<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rayii&#39;s blog</title>
  
  
  <link href="https://1xueyu1.github.io/atom.xml" rel="self"/>
  
  <link href="https://1xueyu1.github.io/"/>
  <updated>2024-02-07T12:34:25.711Z</updated>
  <id>https://1xueyu1.github.io/</id>
  
  <author>
    <name>Rayii</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>bs4解析</title>
    <link href="https://1xueyu1.github.io/2024/02/07/bs4%E8%A7%A3%E6%9E%90/"/>
    <id>https://1xueyu1.github.io/2024/02/07/bs4%E8%A7%A3%E6%9E%90/</id>
    <published>2024-02-07T12:34:01.000Z</published>
    <updated>2024-02-07T12:34:25.711Z</updated>
    
    
    
    
    <category term="python" scheme="https://1xueyu1.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://1xueyu1.github.io/2024/02/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://1xueyu1.github.io/2024/02/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2024-02-07T09:45:37.000Z</published>
    <updated>2024-02-07T11:44:11.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python使用"><a href="#python使用" class="headerlink" title="python使用"></a>python使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">content = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">苹果是红色的</span></span><br><span class="line"><span class="string">橙子是橙色的</span></span><br><span class="line"><span class="string">香蕉是黄色的</span></span><br><span class="line"><span class="string">乌鸦是黑色的</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># r表示原始字符串， 不对字符串中的符号进行转义</span></span><br><span class="line">p = re.<span class="built_in">compile</span>(<span class="string">r&#x27;.色&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> one <span class="keyword">in</span> p.findall(content):</span><br><span class="line">    <span class="built_in">print</span>(one)</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="/2024/02/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240207175308040.png" alt="image-20240207175308040"></p><h2 id="符号含义"><a href="#符号含义" class="headerlink" title="符号含义"></a>符号含义</h2><ol><li><p><code>.</code>表示匹配除<code>\n</code>外的任何<strong>单个</strong>字符</p><p>·eg: <code>.色</code>可以匹配<code>黄色</code>, <code>绿色</code>等两个字符的</p></li><li><p><code>*</code>匹配前面的子表达式任意次，包括0</p><p>·eg:<code>,.*</code>匹配逗号后面的任意字符串</p><p><img src="/2024/02/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240207193324690.png" alt="image-20240207193324690"></p><p><img src="/2024/02/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20240207193520269.png" alt="image-20240207193520269"></p></li><li><p><code>+</code>,和<code>*</code>类似，但是不包括0</p></li><li><p><code>&#123;&#125;</code>指定匹配次数</p><p>eg: 有{3， 4}匹配连续的 <strong>有</strong> 字，至少3次，至多4次</p></li></ol><h2 id="贪婪模式与非贪婪模式"><a href="#贪婪模式与非贪婪模式" class="headerlink" title="贪婪模式与非贪婪模式"></a>贪婪模式与非贪婪模式</h2><h3 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h3><p>src &#x3D; <code>‘&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;’</code></p><p>使用<code>&lt;.*&gt;</code>匹配到的结果是<code>‘&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;’</code></p><h3 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h3><p>使用<code>&lt;.*?&gt;</code>匹配到的结果是<code>[&#39;&lt;html&gt;&#39;, &#39;&lt;head&gt;&#39;, &#39;&lt;title&gt;&#39;, &#39;&lt;/title&gt;&#39;]</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;python使用&quot;&gt;&lt;a href=&quot;#python使用&quot; class=&quot;headerlink&quot; title=&quot;python使用&quot;&gt;&lt;/a&gt;python使用&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="python" scheme="https://1xueyu1.github.io/categories/python/"/>
    
    <category term="正则表达式" scheme="https://1xueyu1.github.io/categories/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫入门</title>
    <link href="https://1xueyu1.github.io/2024/01/27/%E7%88%AC%E8%99%AB/"/>
    <id>https://1xueyu1.github.io/2024/01/27/%E7%88%AC%E8%99%AB/</id>
    <published>2024-01-27T12:59:48.000Z</published>
    <updated>2024-02-06T14:05:02.743Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://c.biancheng.net/python_spider/useragent-pool.html">构建User-Agnet代理池 (biancheng.net)</a></p><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><h2 id="获取网页html信息"><a href="#获取网页html信息" class="headerlink" title="获取网页html信息"></a>获取网页html信息</h2><h3 id="1-获取响应对象"><a href="#1-获取响应对象" class="headerlink" title="1) 获取响应对象"></a>1) 获取响应对象</h3><p>向百度（<a href="http://www.baidu.com/%EF%BC%89%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%99%BE%E5%BA%A6%E9%A6%96%E9%A1%B5%E7%9A%84">http://www.baidu.com/）发起请求，获取百度首页的</a> HTML 信息，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#导包,发起请求使用urllib库的request请求模块</span><br><span class="line">import urllib.request</span><br><span class="line"># urlopen()向URL发请求,返回响应对象,注意url必须完整response=urllib.request.urlopen(&#x27;http://www.baidu.com/&#x27;)</span><br><span class="line">print(response)</span><br></pre></td></tr></table></figure><p>上述代码会返回百度首页的响应对象， 其中 urlopen() 表示打开一个网页地址。注意：请求的 url 必须带有 http 或者 https 传输协议。</p><p>输出结果，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http.client.HTTPResponse object at 0x00000237E872EC20&gt;</span><br></pre></td></tr></table></figure><h3 id="2-输出HTML信息"><a href="#2-输出HTML信息" class="headerlink" title="2) 输出HTML信息"></a>2) 输出HTML信息</h3><p>在上述代码的基础上继续编写如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#提取响应内容</span><br><span class="line">html = response.read().decode(&#x27;utf-8&#x27;)</span><br><span class="line">#打印响应内容</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>在本节您认识了第一个爬虫库 urllib，下面关于 urllib 做简单总结。</p><h3 id="1-urlopen"><a href="#1-urlopen" class="headerlink" title="1) urlopen()"></a>1) urlopen()</h3><p>表示向网站发起请求并获取响应对象，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.urlopen(url,timeout)</span><br></pre></td></tr></table></figure><p>urlopen() 有两个参数，说明如下：</p><ul><li>url：表示要爬取数据的 url 地址。</li><li>timeout：设置等待超时时间，指定时间内未得到响应则抛出超时异常。</li></ul><h3 id="2-Request"><a href="#2-Request" class="headerlink" title="2) Request()"></a>2) Request()</h3><p>该方法用于创建请求对象、包装请求头，比如重构 User-Agent（即用户代理，指用户使用的浏览器）使程序更像人类的请求，而非机器。重构 User-Agent 是爬虫和反爬虫斗争的第一步。在下一节会做详细介绍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.Request(url,headers)</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li>url：请求的URL地址。</li><li>headers：重构请求头。</li></ul><h3 id="3-html响应对象方法"><a href="#3-html响应对象方法" class="headerlink" title="3) html响应对象方法"></a>3) html响应对象方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bytes = response.read() # read()返回结果为 bytes 数据类型</span><br><span class="line">string = response.read().decode() # decode()将字节串转换为 string 类型</span><br><span class="line">url = response.geturl() # 返回响应对象的URL地址</span><br><span class="line">code = response.getcode() # 返回请求时的HTTP响应码</span><br></pre></td></tr></table></figure><h3 id="4-编码解码操作"><a href="#4-编码解码操作" class="headerlink" title="4) 编码解码操作"></a>4) 编码解码操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#字符串转换为字节码</span><br><span class="line">string.encode(&quot;utf-8&quot;) </span><br><span class="line">#字节码转换为字符串</span><br><span class="line">bytes.decode(&quot;utf-8&quot;) </span><br></pre></td></tr></table></figure><h2 id="User-Agent（用户代理）是什么"><a href="#User-Agent（用户代理）是什么" class="headerlink" title="User-Agent（用户代理）是什么"></a>User-Agent（用户代理）是什么</h2><p>网站通过识别请求头中 User-Agent 信息来判断是否是爬虫访问网站。如果是，网站首先对该 IP 进行预警，对其进行重点监控，当发现该 IP 超过规定时间内的访问次数， 将在一段时间内禁止其再次访问网站。</p><h3 id="爬虫程序UA信息"><a href="#爬虫程序UA信息" class="headerlink" title="爬虫程序UA信息"></a>爬虫程序UA信息</h3><p>下面，通过向 HTTP 测试网站（<a href="http://httpbin.org/%EF%BC%89%E5%8F%91%E9%80%81">http://httpbin.org/）发送</a> GET 请求来查看请求头信息，从而获取爬虫程序的 UA。代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#导入模块import urllib.request#向网站发送get请求response=urllib.request.urlopen(&#x27;http://httpbin.org/get&#x27;)html = response.read().decode()print(html)</span><br></pre></td></tr></table></figure><p>程序运行后，输出的请求头信息如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;identity&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;Python-urllib/3.10&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-65b50128-7255dfdc546e1ead1ac95545&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;origin&quot;: &quot;18.179.50.136&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http://httpbin.org/get&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从输出结果可以看出，User-Agent 竟然是 Python-urllib&#x2F;3.10，这显然是爬虫程序访问网站。因此就需要重构 User-Agent，将其伪装成“浏览器”访问网站。</p><h3 id="重构爬虫UA信息"><a href="#重构爬虫UA信息" class="headerlink" title="重构爬虫UA信息"></a>重构爬虫UA信息</h3><p>下面使用<code>urllib.request.Request()</code>方法重构 User-Agent 信息，代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#导包,发起请求使用urllib库的request请求模块</span><br><span class="line">from urllib import request</span><br><span class="line"></span><br><span class="line">url = &#x27;http://httpbin.org/get&#x27;</span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;User-Agent&#x27; : &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/18.17763&#x27;</span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(url=url,headers=headers)</span><br><span class="line">res = request.urlopen(req)</span><br><span class="line">html = res.read().decode(&#x27;utf-8&#x27;)</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><p>程序的运行结果，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;identity&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/18.17763&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-65b502da-15454e9b21a63a0272dec77b&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;origin&quot;: &quot;18.179.50.136&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http://httpbin.org/get&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="构建User-Agnet代理池"><a href="#构建User-Agnet代理池" class="headerlink" title="构建User-Agnet代理池"></a>构建User-Agnet代理池</h2><p>在编写爬虫程序时，一般都会构建一个 User-Agent （用户代理）池，就是把多个浏览器的 UA 信息放进列表中，然后再从中随机选择。构建用户代理池，能够避免总是使用一个 UA 来访问网站，因为短时间内总使用一个 UA 高频率访问的网站，可能会引起网站的警觉，从而封杀掉 IP。</p><h3 id="自定义UA代理池"><a href="#自定义UA代理池" class="headerlink" title="自定义UA代理池"></a>自定义UA代理池</h3><p>构建代理池的方法也非常简单，在您的 Pycharm 工作目录中定义一个 ua_info.py 文件，并将以下 UA 信息以列表的形式粘贴到该文件中，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ua_list = [</span><br><span class="line">    &#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0&#x27;,</span><br><span class="line">    &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&#x27;,</span><br><span class="line">    &#x27;User-Agent:Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11&#x27;,</span><br><span class="line">    &#x27;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&#x27;,</span><br><span class="line">    &#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&#x27;,</span><br><span class="line">    &#x27;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&#x27;,</span><br><span class="line">    &#x27;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0&#x27;,</span><br><span class="line">    &#x27; Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1&#x27;,</span><br><span class="line">    &#x27;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1&#x27;,</span><br><span class="line">    &#x27; Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&#x27;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>经过上述操作，用户代理池就构建成功。</p><h3 id="模块随机获取UA"><a href="#模块随机获取UA" class="headerlink" title="模块随机获取UA"></a>模块随机获取UA</h3><p>您也可以使用专门第三方的模块来随机获取浏览器 UA 信息，不过该模块需要单独安装，安装方式如下：</p><p>pip install fake-useragent</p><p>下载安装成功后，演示如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from fake_useragent import UserAgent</span><br><span class="line">ua = UserAgent()</span><br><span class="line">print(ua.edge)</span><br><span class="line">print(ua.chrome)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.62</span><br><span class="line">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36</span><br></pre></td></tr></table></figure><h2 id="URL基本组成"><a href="#URL基本组成" class="headerlink" title="URL基本组成"></a>URL基本组成</h2><p>URL 是由一些简单的组件构成，比如协议、域名、端口号、路径和查询字符串等，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.biancheng.net/index?param=10</span><br></pre></td></tr></table></figure><p>路径和查询字符串之间使用问号<code>?</code>隔开。上述示例的域名为 <a href="http://www.biancheng.net,路径为/">www.biancheng.net，路径为</a> index，查询字符串为 param&#x3D;1。</p><p>URL 中规定了一些具有特殊意义的字符，常被用来分隔两个不同的 URL 组件，这些字符被称为<strong>保留字符</strong>。例如：</p><ul><li>冒号：用于分隔协议和主机组件，斜杠用于分隔主机和路径</li><li><code>?</code>：用于分隔路径和查询参数等。</li><li><code>=</code>用于表示查询参数中的键值对。</li><li><code>&amp;</code>符号用于分隔查询多个键值对。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其余常用的保留字符有：/ . ... # @ $ + ; %</span><br></pre></td></tr></table></figure><h3 id="Python实现编码与解码"><a href="#Python实现编码与解码" class="headerlink" title="Python实现编码与解码"></a>Python实现编码与解码</h3><p>Python 的标准库<code>urllib.parse</code>模块中提供了用来编码和解码的方法，分别是 urlencode() 与 unquote() 方法。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>urlencode()</td><td>该方法实现了对 url 地址的编码操作</td></tr><tr><td>unquote()</td><td>该方法将编码后的 url 地址进行还原，被称为解码</td></tr></tbody></table><h4 id="1-编码urlencode"><a href="#1-编码urlencode" class="headerlink" title="1) 编码urlencode()"></a>1) 编码urlencode()</h4><p>下面以百度搜索为例进行讲解。首先打开百度首页，在搜索框中输入“爬虫”，然后点击“百度一下”。当搜索结果显示后，此时地址栏的 URL 信息，如下所示：</p><blockquote><p><a href="https://www.baidu.com/s?wd=%E7%88%AC%E8%99%AB&rsv_spt=1&rsv_iqid=0xa3ca348c0001a2ab&issp=1&f=8&rsv_bp=1&rsv_idx=2&ie=utf-8&tn=baiduhome_pg&rsv_enter=1&rsv_dl=ib&rsv_sug3=8&rsv_sug1=7&rsv_sug7=101">https://www.baidu.com/s?wd=爬虫&amp;rsv_spt=1&amp;rsv_iqid=0xa3ca348c0001a2ab&amp;issp=1&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_dl=ib&amp;rsv_sug3=8&amp;rsv_sug1=7&amp;rsv_sug7=101</a></p></blockquote><p>可以看出 URL 中有很多的查询字符串，而第一个查询字符串就是“wd&#x3D;爬虫”，其中 wd 表示查询字符串的键，而“爬虫”则代表您输入的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from urllib import parse</span><br><span class="line">query_string = &#123;</span><br><span class="line">    &#x27;wd&#x27; : &#x27;爬虫&#x27;</span><br><span class="line">&#125;</span><br><span class="line"># 编码</span><br><span class="line">result = parse.urlencode(query_string)</span><br><span class="line"># 使用format函数拼接url地址</span><br><span class="line">url = &#x27;http://www.baidu.com/s?&#123;&#125;&#x27;.format(result)</span><br><span class="line">print(url)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/s?wd=%E7%88%AC%E8%99%AB</span><br></pre></td></tr></table></figure><h4 id="2-解码unquote-string"><a href="#2-解码unquote-string" class="headerlink" title="2) 解码unquote(string)"></a>2) 解码unquote(string)</h4><p>解码是对编码后的 URL 进行还原的一种操作，示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from urllib import parse</span><br><span class="line">string = &#x27;%E7%88%AC%E8%99%AB&#x27;</span><br><span class="line">result = parse.unquote(string)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>爬虫</p></blockquote><h4 id="3-URL地址拼接方式"><a href="#3-URL地址拼接方式" class="headerlink" title="3) URL地址拼接方式"></a>3) URL地址拼接方式</h4><p>最后，给大家介绍三种拼接 URL 地址的方法。除了使用 format() 函数外，还可以使用字符串相加，以及字符串占位符，总结如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 1、字符串相加</span><br><span class="line">  baseurl = &#x27;http://www.baidu.com/s?&#x27;</span><br><span class="line">  params=&#x27;wd=%E7%88%AC%E8%99%AB&#x27;</span><br><span class="line">  url = baseurl + params</span><br><span class="line"># 2、字符串格式化（占位符）</span><br><span class="line">  params=&#x27;wd=%E7%88%AC%E8%99%AB&#x27;</span><br><span class="line">  url = &#x27;http://www.baidu.com/s?%s&#x27;% params</span><br><span class="line"># 3、format()方法</span><br><span class="line">  url = &#x27;http://www.baidu.com/s?&#123;&#125;&#x27;</span><br><span class="line">  params=&#x27;wd=%E7%88%AC%E8%99%AB&#x27;</span><br><span class="line">  url = url.format(params)</span><br></pre></td></tr></table></figure><h2 id="Python爬虫抓取网页"><a href="#Python爬虫抓取网页" class="headerlink" title="Python爬虫抓取网页"></a>Python爬虫抓取网页</h2><p>首先我们对要编写的爬虫程序进行简单地分析，该程序可分为以下三个部分：</p><ul><li>拼接 url 地址</li><li>发送请求</li><li>将照片保存至本地</li></ul><h3 id="导入所需模块"><a href="#导入所需模块" class="headerlink" title="导入所需模块"></a>导入所需模块</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from urllib import parse</span><br><span class="line">from urllib import request</span><br><span class="line">from fake_useragent import UserAgent</span><br></pre></td></tr></table></figure><h3 id="拼接URL地址"><a href="#拼接URL地址" class="headerlink" title="拼接URL地址"></a>拼接URL地址</h3><p>定义 URL 变量，拼接 url 地址。代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一、 拼接 URL 地址</span></span><br><span class="line">query_string = &#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span> : <span class="string">&#x27;杀戮天使&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line">result = parse.urlencode(query_string)</span><br><span class="line"><span class="comment"># 使用format函数拼接url地址</span></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s?&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(result)</span><br></pre></td></tr></table></figure><h3 id="向URL发送请求"><a href="#向URL发送请求" class="headerlink" title="向URL发送请求"></a>向URL发送请求</h3><p>发送请求主要分为以下几个步骤：</p><ul><li>创建请求对象-Request</li><li>获取响应对象-urlopen</li><li>获取响应内容-read</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二、 向 URL 发送请求</span></span><br><span class="line"><span class="comment"># 1. 重构请求头</span></span><br><span class="line">ua = UserAgent()</span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span> : ua.edge&#125;</span><br><span class="line"><span class="comment"># 2. 创建请求对应</span></span><br><span class="line">req = request.Request(url=url, headers = headers)</span><br><span class="line"><span class="comment"># 3. 获取响应对象</span></span><br><span class="line">res = request.urlopen(req)</span><br><span class="line"><span class="comment"># 4. 获取响应内容</span></span><br><span class="line">html = res.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="保存为本地文件"><a href="#保存为本地文件" class="headerlink" title="保存为本地文件"></a>保存为本地文件</h3><p>把爬取的照片保存至本地，此处需要使用 Python 编程的文件 IO 操作，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 三、保存文件至当前目录</span><br><span class="line">filename =  &#x27;杀戮天使.html&#x27;</span><br><span class="line">with open(filename,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">    f.write(html)</span><br></pre></td></tr></table></figure><h3 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from urllib import parse</span><br><span class="line">from urllib import request</span><br><span class="line">from fake_useragent import UserAgent</span><br><span class="line"></span><br><span class="line"># 一、 拼接 URL 地址</span><br><span class="line">query_string = &#123;</span><br><span class="line">    &#x27;wd&#x27; : &#x27;杀戮天使&#x27;</span><br><span class="line">&#125;</span><br><span class="line"># 编码</span><br><span class="line">result = parse.urlencode(query_string)</span><br><span class="line"># 使用format函数拼接url地址</span><br><span class="line">url = &#x27;https://www.baidu.com/s?&#123;&#125;&#x27;.format(result)</span><br><span class="line"></span><br><span class="line"># 二、 向 URL 发送请求</span><br><span class="line"># 1. 重构请求头</span><br><span class="line">ua = UserAgent()</span><br><span class="line">headers = &#123;&#x27;User-Agent&#x27; : ua.edge&#125;</span><br><span class="line"># 2. 创建请求对应</span><br><span class="line">req = request.Request(url=url, headers = headers)</span><br><span class="line"># 3. 获取响应对象</span><br><span class="line">res = request.urlopen(req)</span><br><span class="line"># 4. 获取响应内容</span><br><span class="line">html = res.read().decode(&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line"># 三、保存文件至当前目录</span><br><span class="line">filename =  &#x27;杀戮天使.html&#x27;</span><br><span class="line">with open(filename,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">    f.write(html)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实战（当当网）"><a href="#实战（当当网）" class="headerlink" title="实战（当当网）"></a>实战（当当网）</h2><p><a href="http://bang.dangdang.com/books/fivestars/01.00.00.00.00.00-recent30-0-0-1-1">http://bang.dangdang.com/books/fivestars/01.00.00.00.00.00-recent30-0-0-1-1</a></p><p>从1到25页的图书名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过页面url信息可以发现url组成</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_url</span>(<span class="params">page</span>):</span><br><span class="line">    url = <span class="string">&quot;http://bang.dangdang.com/books/fivestars/01.00.00.00.00.00-recent30-0-0-1-&quot;</span> + <span class="built_in">str</span>(page)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对当当网的请求</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">request_dangdang</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># 重构请求头</span></span><br><span class="line">    ua = UserAgent()</span><br><span class="line">    headers = &#123;<span class="string">&quot;User-Agent&quot;</span> : ua.random&#125;</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="comment"># 如果状态码为200，请求成功</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="comment"># 返回网页源代码</span></span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将信息写入文件中</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_write</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;./book.txt&quot;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析获取到的源码信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info_parse</span>(<span class="params">html</span>):</span><br><span class="line">    <span class="comment"># 可以上网查询一下使用方法</span></span><br><span class="line">    <span class="comment"># 使用BeautifulSoup库， html 代表需要解析的源代码， &#x27;html.parser&#x27;是解析器</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="comment"># 找到所有的class == name的div标签，存入list</span></span><br><span class="line">    div_name = soup.find_all(class_= <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="comment"># 对list中的每一个div标签, 提取其中的a标签的内容</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> div_name:</span><br><span class="line">        <span class="comment"># 提取出名字</span></span><br><span class="line">        a_content = item.a.text</span><br><span class="line">        <span class="comment"># 加上换行符写入文件中去</span></span><br><span class="line">        a_content += <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">        file_write(a_content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">26</span>):</span><br><span class="line">        url = get_url(page)</span><br><span class="line">        <span class="comment"># 提取网页源码</span></span><br><span class="line">        html = request_dangdang(url)</span><br><span class="line">        <span class="comment"># 提取需要的信息</span></span><br><span class="line">        info_parse(html)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实战（豆瓣）"><a href="#实战（豆瓣）" class="headerlink" title="实战（豆瓣）"></a>实战（豆瓣）</h2><p><a href="https://movie.douban.com/top250?start=100&filter=">https://movie.douban.com/top250?start=100&amp;filter=</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_url</span>(<span class="params">page</span>):</span><br><span class="line">    url = <span class="string">&quot;https://movie.douban.com/top250?start=&quot;</span> + <span class="built_in">str</span>(page)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_src_code</span>(<span class="params">url</span>):</span><br><span class="line">    ua = UserAgent()</span><br><span class="line">    headers = &#123;<span class="string">&quot;User-Agent&quot;</span> : ua.random&#125;</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info_parse</span>(<span class="params">html</span>):</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="built_in">list</span> = soup.find(class_=<span class="string">&#x27;grid_view&#x27;</span>).find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        item_name = item.find(class_=<span class="string">&#x27;title&#x27;</span>).string</span><br><span class="line">        item_img = item.find(<span class="string">&#x27;a&#x27;</span>).find(<span class="string">&#x27;img&#x27;</span>).get(<span class="string">&quot;src&quot;</span>)</span><br><span class="line">        item_index = item.find(class_=<span class="string">&quot;&quot;</span>).string</span><br><span class="line">        item_score = item.find(class_=<span class="string">&quot;rating_num&quot;</span>).string</span><br><span class="line">        <span class="keyword">if</span> item.find(class_=<span class="string">&#x27;inq&#x27;</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            item_inq = item.find(class_=<span class="string">&#x27;inq&#x27;</span>).string</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            item_inq = <span class="string">&quot;NOT AVAILABLE&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(item_index + <span class="string">&quot;|&quot;</span> + item_name + <span class="string">&quot;|&quot;</span> + item_score + <span class="string">&quot;|&quot;</span> + item_inq)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    page = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">        url = get_url(page)</span><br><span class="line">        html = get_src_code(url)</span><br><span class="line">        info_parse(html)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p><a href="https://zhuanlan.zhihu.com/p/64702600">一篇文章搞定Python多进程(全) - 知乎 (zhihu.com)</a></p><p>我们通过多开进程处理同一个程序使得运行时间缩短，在上面的代码中，我们将<code>get_src_code(url)</code>和<code>info_parse(html)</code>封装为<code>handle(url)</code>，这样我们就可以开多个进程，每个进程都执行handle函数，把所有的url分配给这5个进程，这5个进程同时执行，就缩短了执行时间。单进程（约4秒）–&gt; 多进程（约1秒）</p><p>下面是修改后的豆瓣代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_url</span>(<span class="params">page</span>):</span><br><span class="line">    url = <span class="string">&quot;https://movie.douban.com/top250?start=&quot;</span> + <span class="built_in">str</span>(page)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_src_code</span>(<span class="params">url</span>):</span><br><span class="line">    ua = UserAgent()</span><br><span class="line">    headers = &#123;<span class="string">&quot;User-Agent&quot;</span> : ua.random&#125;</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info_parse</span>(<span class="params">html</span>):</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="built_in">list</span> = soup.find(class_=<span class="string">&#x27;grid_view&#x27;</span>).find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        item_name = item.find(class_=<span class="string">&#x27;title&#x27;</span>).string</span><br><span class="line">        item_img = item.find(<span class="string">&#x27;a&#x27;</span>).find(<span class="string">&#x27;img&#x27;</span>).get(<span class="string">&quot;src&quot;</span>)</span><br><span class="line">        item_index = item.find(class_=<span class="string">&quot;&quot;</span>).string</span><br><span class="line">        item_score = item.find(class_=<span class="string">&quot;rating_num&quot;</span>).string</span><br><span class="line">        <span class="keyword">if</span> item.find(class_=<span class="string">&#x27;inq&#x27;</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            item_inq = item.find(class_=<span class="string">&#x27;inq&#x27;</span>).string</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            item_inq = <span class="string">&quot;NOT AVAILABLE&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(item_index + <span class="string">&quot;|&quot;</span> + item_name + <span class="string">&quot;|&quot;</span> + item_score + <span class="string">&quot;|&quot;</span> + item_inq)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">url</span>):</span><br><span class="line">    html = get_src_code(url)</span><br><span class="line">    info_parse(html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    startTime = time.time()</span><br><span class="line"></span><br><span class="line">    urls = []</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">        url = get_url(page)</span><br><span class="line">        urls.append(url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多进程爬取</span></span><br><span class="line">    pool = Pool(<span class="number">5</span>)</span><br><span class="line">    pool.<span class="built_in">map</span>(handle, urls)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    <span class="comment"># handle()</span></span><br><span class="line">    endTime = time.time()</span><br><span class="line">    dTime = endTime - startTime</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;运行时间： %s s&quot;</span> % dTime)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="图片验证码（pytesseract）"><a href="#图片验证码（pytesseract）" class="headerlink" title="图片验证码（pytesseract）"></a>图片验证码（pytesseract）</h2><p><a href="https://vip.fxxkpython.com/?p=4848">python爬虫20 | 小帅b教你如何识别图片验证码 – 通往Python高手之路 (fxxkpython.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入相关模块</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">captcha = Image.open(&quot;captcha1.png&quot;)</span><br><span class="line"># 图片识别为字符串</span><br><span class="line">result = pytesseract.image_to_string(captcha)</span><br><span class="line"># 图片进行灰度处理</span><br><span class="line">result = captcha.convert(&#x27;L&#x27;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h2 id="Scrapy框架的使用"><a href="#Scrapy框架的使用" class="headerlink" title="Scrapy框架的使用"></a>Scrapy框架的使用</h2><p><a href="https://www.bilibili.com/video/BV1ha4y1H7sx?p=60&vd_source=a87fbd3945da4b0dcfade345051aeae4">Day8 - 3.scrapy基本使用_哔哩哔哩_bilibili</a></p><ol><li><p><strong>创建一个工程</strong>: scrapy startproject xxxxx</p></li><li><p><strong>在spiders子目录中创建一个爬虫文件</strong></p><p>​scrapy genspider xxxx(name) <a href="http://www.xxx.com(url)/">www.xxx.com(url)</a></p></li><li><p><strong>执行工程</strong>: </p><p>​scrapy crawl xxxx(name)</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://c.biancheng.net/python_spider/useragent-pool.html&quot;&gt;构建User-Agnet代理池 (biancheng.net)&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;爬虫&quot;&gt;&lt;a href=&quot;#爬虫&quot; cla</summary>
      
    
    
    
    <category term="python" scheme="https://1xueyu1.github.io/categories/python/"/>
    
    <category term="爬虫" scheme="https://1xueyu1.github.io/categories/python/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>pwn_college</title>
    <link href="https://1xueyu1.github.io/2024/01/17/pwn-college/"/>
    <id>https://1xueyu1.github.io/2024/01/17/pwn-college/</id>
    <published>2024-01-17T14:22:05.000Z</published>
    <updated>2024-01-24T09:30:58.249Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://tech.c01dkit.com/pwn-college-cse365-spring2023/#building-a-web-server">https://tech.c01dkit.com/pwn-college-cse365-spring2023/#building-a-web-server</a></p><h1 id="Program-Misuse"><a href="#Program-Misuse" class="headerlink" title="Program Misuse"></a>Program Misuse</h1><p><strong><a href="https://github.com/J-shiro/J-shiro.github.io/blob/master/content/post/english/pwn_college/module1/index.md">解答1</a><a href="https://tech.c01dkit.com/">解答2</a></strong></p><h2 id="Linux-Command"><a href="#Linux-Command" class="headerlink" title="Linux Command"></a>Linux Command</h2><p>① <strong>Learning the command line</strong></p><ol><li><p><a href="https://overthewire.org/wargames/bandit/">Bandit</a></p></li><li><p><code>cat</code>: 用于连接文件并打印到标准输出设备上。</p><ul><li><strong>-n 或 –number</strong>：由 1 开始对所有输出的行数编号。</li><li><strong>-b 或 –number-nonblank</strong>：和 -n 相似，只不过对于空白行不编号。</li></ul></li><li><p><code>more</code>: 以一页一页的形式显示</p></li><li><p><code>less</code>: 和 more 类似</p></li><li><p><code>head</code>: 命令可用于查看文件的开头部分的内容，有一个常用的参数 <strong>-n</strong> 用于显示行数，默认为 10，即显示 10 行的内容。</p></li><li><p><code>tail</code>: 与 head 相反</p></li><li><p><code>sort</code>: 用于将文本文件内容加以排序。</p><ul><li>-r : 反序</li></ul></li><li><p><code>rev</code>（reverse）用于将文件中的每行内容以字符为单位反序输出，即第一个字符最后输出，最后一个字符最先输出，以此类推。</p></li><li><p><code>od</code>指令会读取所给予的文件的内容，并将其内容以八进制字码呈现出来。</p><ul><li><pre><code>-b:octal-x -h:hex-c:ASCII-d:Decimal(ten)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">10. **`hd`** : hexdump, mainly used to view the **hexadecimal encoding** of **Binary files**.</span><br><span class="line"></span><br><span class="line">11. `xxd`: Convert any file to **hexadecimal** or binary(-b) form</span><br><span class="line"></span><br><span class="line">12. `base32/base64` base32 [op] [file] 编码, -d 解码</span><br><span class="line"></span><br><span class="line">13. `split`该指令将大文件分割成较小的文件，在默认情况下将按照每1000行切割成一个小文件。</span><br><span class="line"></span><br><span class="line">    - ```</span><br><span class="line">      split [--help][--version][-&lt;行数&gt;][-b &lt;字节&gt;][-C &lt;字节&gt;][-l &lt;行数&gt;][要切割的文件][输出文件名]</span><br></pre></td></tr></table></figure></code></pre></li><li><p>-&lt;行数&gt; : 指定每多少行切成一个小文件</p></li><li><p>-b&lt;字节&gt; : 指定每多少字节切成一个小文件</p></li><li><p>[输出文件名] : 设置切割后文件的前置文件名， split会自动在前置文件名后再加上编号</p></li></ul></li><li><p><code>gzip</code>是个使用广泛的压缩程序，文件经它压缩过后，其名称后面会多出”.gz”的扩展名。</p><ul><li>-c或–stdout或–to-stdout 　把压缩后的文件输出到标准输出设备，不去更动原始文件。</li><li>-f或–force 　强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接。</li><li>-l或–list 　列出压缩文件的相关信息。</li><li>-t或–test 　测试压缩文件是否正确无误。</li><li>-d或–decompress或—-uncompress 　解开压缩文件。</li></ul></li><li><p><code>bzip2</code>采用新的压缩演算法, bbzip2压缩完文件后会产生.bz2的压缩文件，并删除原始的文件。</p><ul><li>-c或–stdout 　将压缩与解压缩的结果送到标准输出。</li><li>-d或–decompress 　执行解压缩。</li><li>-f或–force 　bzip2在压缩或解压缩时，若输出文件与现有文件同名，预设不会覆盖现有文件。若要覆盖，请使用此参数。</li><li>-t或–test 　测试.bz2压缩文件的完整性。</li></ul></li><li><p><code>zip</code> 是个使用广泛的压缩程序，压缩后的文件后缀名为 <strong>.zip</strong>。</p><ul><li>-q 不显示指令执行过程。</li><li>-r 递归处理，将指定目录下的所有文件和子目录一并处理。</li><li>-b&lt;工作目录&gt; 指定暂时存放文件的目录。</li><li>-d 从压缩文件内删除指定的文件。</li></ul></li><li><p><code>tar</code> 是用来建立，还原备份文件的工具程序，它可以加入，解开备份文件内的文件。</p><ul><li>-c或–create 建立新的备份文件。</li><li>-d或–diff或–compare 对比备份文件内和文件系统上的文件的差异。</li><li>-f&lt;备份文件&gt;或–file&#x3D;&lt;备份文件&gt; 指定备份文件。</li><li>-z或–gzip或–ungzip 通过gzip指令处理备份文件。</li><li>-v或–verbose 显示指令执行过程。</li></ul></li><li><p><code>ar</code>可让您集合许多文件，成为单一的备存文件。在备存文件中，所有成员文件皆保有原来的属性与权限。</p><ul><li><pre><code>-r:The file is inserted into the backup file-v:show the detail information-d 　删除备存文件中的成员文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">19. **`cpio`**: used to backup file</span><br><span class="line"></span><br><span class="line">    - -o或--create 　执行copy-out模式，建立备份档。</span><br><span class="line"></span><br><span class="line">20. `find`:find [路径] [匹配条件] [动作]</span><br><span class="line"></span><br><span class="line">    - `-name pattern`：按文件名查找，支持使用通配符 `*` 和 `?`。</span><br><span class="line">    - `-type type`：按文件类型查找，可以是 `f`（普通文件）、`d`（目录）、`l`（符号链接）等。</span><br><span class="line">    - `-size [+-]size[cwbkMG]`：按文件大小查找，支持使用 `+` 或 `-` 表示大于或小于指定大小，单位可以是 `c`（字节）、`w`（字数）、`b`（块数）、`k`（KB）、`M`（MB）或 `G`（GB）。</span><br><span class="line">    - `-user username`：按文件所有者查找。</span><br><span class="line">    - `-mtime days`：按修改时间查找，支持使用 `+` 或 `-` 表示在指定天数前或后，days 是一个整数表示天数。</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Privilege Escalation</span><br><span class="line"></span><br><span class="line">① **permission model**</span><br><span class="line"></span><br><span class="line">Permissions: **r: 4 w: 2 x: 1**</span><br><span class="line"></span><br><span class="line">File: </span><br><span class="line"></span><br><span class="line">- first `rwx`: **owner user** </span><br><span class="line">- second `rwx`: **owner group** </span><br><span class="line">- third `rwx`: **other groups**</span><br><span class="line"></span><br><span class="line">default **UID: 1000**, **UID 0** is the Linux administrator user root</span><br><span class="line"></span><br><span class="line">② **Privilege elevation**</span><br><span class="line"></span><br><span class="line">run an suid binary such as `sudo`, `su`, `newgrp`(SUID is a bit in the Linux permission model)</span><br><span class="line"></span><br><span class="line">**SUID**: execute with the `eUID` of the file owner rather than the parent process.</span><br><span class="line"></span><br><span class="line">**SGID**: execute with the `eGID` of the file owner rather than the parent process.</span><br><span class="line"></span><br><span class="line">**Sticky**: used for shared directories to limit file removal to file owners.</span><br><span class="line"></span><br><span class="line">three different type of user and group IDs</span><br><span class="line"></span><br><span class="line">- **Effective(eUID,eGID):** used for most access checks--&gt;root:0</span><br><span class="line">- **Real(UID,GID):** true identity of the process owner, used for signal checks</span><br><span class="line">- **Saved:** used for temporarily dropping privileges</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ol><p>gcc -w:Does not generate any warning information.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>sudo chmod u+s xxx#SetUID bit, other users can have the file owner permissions<br>#user:rwx—&gt;rws<br>sudo chown root.root xxx #it will cancel the ‘s’ user:rws—&gt;rwx<br>sudo chmod g+s xxx #group:rwx—&gt;rws</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Program Misuse:Mitigations</span><br><span class="line"></span><br><span class="line">**command injection**</span><br><span class="line"></span><br><span class="line">**/bin/sh** SUID mitigation：</span><br><span class="line"></span><br><span class="line">if `/bin/sh` is run as SUID (eUID==0 but rUID !=0)</span><br><span class="line"></span><br><span class="line">it will drop privileges to the rUID(root UID) (eUID=rUID and rUID !=0)</span><br><span class="line"></span><br><span class="line">Mitigation: to disable `sh -p`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># module2(Talking Web)</span><br><span class="line"></span><br><span class="line">static http request:</span><br><span class="line"></span><br><span class="line">- `GET /cat.gif HTTP/1.0`—&gt;</span><br><span class="line">- `HTTP/1.0 200 OK` &lt;—</span><br><span class="line"></span><br><span class="line">dynamic http request:</span><br><span class="line"></span><br><span class="line">- `GET /time?tz=UTC HTTP/1.0` —&gt;</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  HTTP/1.0 200 OK</span><br><span class="line">  Content-Type: text/plain</span><br><span class="line">  Content-Length: 19</span><br><span class="line">  </span><br><span class="line">  2022-01-19 03:14:07 //&lt;——</span><br></pre></td></tr></table></figure><h2 id="Talking-Web-The-Internet"><a href="#Talking-Web-The-Internet" class="headerlink" title="Talking Web: The Internet"></a>Talking Web: The Internet</h2><p>TCP&#x2F;IP</p><ul><li>Link Layer(Physically link computers)</li><li>Internet Layer(Find the right computer:IP、ICMP、ARP)</li><li>Transport Layer(Find the right program:UDP、TCP)</li><li>Application Layer(Talk with the program:HTTP、FTP、SMTP、SSH)</li></ul><h2 id="Talking-Web-RFC-1945"><a href="#Talking-Web-RFC-1945" class="headerlink" title="Talking Web: RFC 1945"></a>Talking Web: RFC 1945</h2><p>①Hyper Transfer Protocol: HTTP is an application-level protocol</p><p>②Request-Line &#x3D; Method SP Request-URI SP HTTP-Version CRLF</p><p>SP: space, CRLF: \n</p><ul><li>Method: “GET” | “HEAD” | “POST”</li></ul><p>③Status-Line &#x3D; HTTP-Version SP Status-Code SP Reason-Phrase CRLF</p><p><strong>Status-Code Definition</strong></p><p>1xx: <strong>Informational</strong>-Not used, but reserved for futrue use</p><p>2xx: <strong>Success</strong>-The action was successfully received, understood, and accepted</p><p>3xx: <strong>Redirection</strong>-Further action must be taken in order to complete the request</p><p>4xx: <strong>Client Error</strong>-The request contains bad syntax or can’t be fulfilled</p><p>5xx: <strong>Server Error</strong>-The server failed to fulfill an apparently valid request</p><p>④ GET</p><blockquote><p><code>GET请求</code></p><p>GET &#x2F;greet HTTP&#x2F;1.0</p><p>Host: hello.example.com</p></blockquote><blockquote><p><code>服务器返回</code></p><p>HTTP&#x2F;1.0 200 OK</p><p>Content-Type: text&#x2F;html; charset&#x3D;UTF-8</p><p>Content-Length: 39</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;body&gt;Hello, World!&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></blockquote><p>⑥ POST</p><blockquote><p><code>POST请求</code></p><p>POST &#x2F;greet HTTP&#x2F;1.0</p><p>Host: hello.example.com</p><p>Content-Length: 11</p><p>Content-Type: application&#x2F;x-www-form-urlencoded</p><p>name&#x3D;Connor</p></blockquote><blockquote><p><code>返回</code></p><p>HTTP&#x2F;1.0 200 OK</p><p>Content-Length: 0</p></blockquote><h2 id="Talking-Web-URLs-and-Encoding"><a href="#Talking-Web-URLs-and-Encoding" class="headerlink" title="Talking Web: URLs and Encoding"></a>Talking Web: URLs and Encoding</h2><p>① URL: <code>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt;</code></p><p>scheme: Protocol used to access resource</p><p>host: Host that holds resource</p><p>port: Port for program servicing resource</p><p>path: Identifies the specific resource</p><p>query: Information that the resource can use</p><p>fragment: Client information about the resource</p><p>②URL encoding</p><p>SP&#x3D;%20 #&#x3D;%23 &#x2F;&#x3D;%2F ?&#x3D;%3F A&#x3D;%41</p><p>③ Content-Type: Form</p><p>application&#x2F;x-www-form-urlencoded name&#x3D;xx</p><p>application&#x2F;json {“name”:”xx”}</p><h2 id="Talking-Web-State"><a href="#Talking-Web-State" class="headerlink" title="Talking Web: State"></a>Talking Web: State</h2><p>① HTTP is a stateless protocol</p><p><strong>solution:</strong> use HTTP Headers for maintaning state</p><ol><li>The server sets a cookie in a response with the header: <code>Set-Cookie</code></li><li>The client includes the cookie in future requests with the header: <code>Cookie</code></li></ol><h2 id="CURL"><a href="#CURL" class="headerlink" title="CURL"></a>CURL</h2><p>CURL（CommandLine Uniform Resource Locator），是一个利用 URL 语法，在命令行终端下使用的网络请求工具，支持 HTTP、HTTPS、FTP 等协议。</p><h3 id="1-1-基础语法"><a href="#1-1-基础语法" class="headerlink" title="1.1 基础语法"></a>1.1 基础语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl [options...] &lt;url&gt;</span><br></pre></td></tr></table></figure><h3 id="1-2-常用参数"><a href="#1-2-常用参数" class="headerlink" title="1.2 常用参数"></a>1.2 常用参数</h3><p>(1)Show Info</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-v/--verbose                    # output details</span><br><span class="line">-H &#x27;Host:xxx&#x27;:       # 自定义 HTTP 头部, Host 头部通常用于指定要访问的主机名</span><br><span class="line">-d &quot;a=xxx&quot;#-d:--data <span class="language-xml"><span class="tag">&lt;<span class="name">data</span>&gt;</span></span>   HTTP POST data</span><br><span class="line">-XPOST/GET# 是指定什么类型(POST/GET/HEAD/DELETE/PUT/PATCH)</span><br><span class="line">-L#--location(HTTP/HTTPS)追随http响应头“Location：”定向到跳转后的页面；(在http响应码为3XX时使用，如301跳转、302跳转)</span><br><span class="line"></span><br><span class="line">curl 127.0.0.1:80 -H &#x27;Host:xxx&#x27; </span><br></pre></td></tr></table></figure><h3 id="传参数"><a href="#传参数" class="headerlink" title="传参数"></a>传参数</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">单个：</span><br><span class="line">curl -v 127.0.0.1:80?a=xxx</span><br><span class="line">curl -v 127.0.0.1:80/?a=xxx</span><br><span class="line"></span><br><span class="line">多个：</span><br><span class="line">curl -v 127.0.0.1:80?a=xxx&amp;b=xxx  #same as&#x27;curl -v 127.0.0.1:80?a=xxx#need to transfer meaning</span><br><span class="line">curl -v 127.0.0.1:80?a=xxx\&amp;b=xxx#get flag</span><br></pre></td></tr></table></figure><p><strong>特殊字符encoder</strong></p><table><thead><tr><th>tab</th><th>%9</th></tr></thead><tbody><tr><td>#</td><td>%23</td></tr><tr><td>“</td><td>%22</td></tr><tr><td>space</td><td>%20</td></tr><tr><td>!</td><td>%21</td></tr><tr><td>&amp;</td><td>%26</td></tr></tbody></table><p>etc.</p><h2 id="nc命令"><a href="#nc命令" class="headerlink" title="nc命令"></a>nc命令</h2><p>nc是netcat的简写，有着网络界的瑞士军刀美誉。因为它短小精悍、功能实用，被设计为一个简单、可靠的网络工具。比如大家很熟悉使用telnet测试tcp端口，而nc可以支持测试linux的tcp和udp端口，而且也经常被用于端口扫描，甚至把nc作为server以TCP或UDP方式侦听指定端口做简单的模拟测试。</p><p>Used to send and to monitor any TCP and UDP data, so we can simulate any client or server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ nc 127.0.0.1 80</span><br><span class="line">#Simulate the HTTP request</span><br><span class="line">==============================================</span><br><span class="line">GET / HTTP/1.1#input</span><br><span class="line">host: localhost#127.0.0.1 either</span><br><span class="line"></span><br><span class="line">==============================================</span><br><span class="line">POST / HTTP/1.1</span><br><span class="line">Content-Length: 74</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">a=xxx&amp;b=xxx</span><br><span class="line">================================================</span><br><span class="line">POST / HTTP/1.1</span><br><span class="line">Content-Length: 123</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;a&quot;:&quot;xx&quot;,</span><br><span class="line">&quot;b&quot;:&#123;&quot;c&quot;: &quot;xxx&quot;, &quot;d&quot;: [&quot;xx&quot;, &quot;x xx&amp;xxx#xxxx&quot;]&#125;</span><br><span class="line">&#125;</span><br><span class="line">================================================</span><br></pre></td></tr></table></figure><h3 id="传参数-1"><a href="#传参数-1" class="headerlink" title="传参数"></a>传参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">单个：</span><br><span class="line">GET /?a=xxx HTTP/1.1 </span><br><span class="line"></span><br><span class="line">多个：</span><br><span class="line">GET /?a=xxx&amp;b=xxx HTTP/1.1 </span><br></pre></td></tr></table></figure><h1 id="module4-Building-a-Web-Server"><a href="#module4-Building-a-Web-Server" class="headerlink" title="module4(Building a Web Server)"></a>module4(Building a Web Server)</h1><h2 id="Building-a-Web-Server-Linux-Processes"><a href="#Building-a-Web-Server-Linux-Processes" class="headerlink" title="Building a Web Server: Linux Processes"></a>Building a Web Server: Linux Processes</h2><p><code>Linux的系统函数</code></p><p>①syscall</p><p><strong>read(int fd, void <code>\*</code>buf, size_t count)</strong> attempts to read up to count bytes from file descriptor fd into the buffer starting at buf.</p><p><strong>write(int fd, void <code>\*</code>buf, size_t count)</strong> writes up to count bytes from the buffer starting at buf to the file referred to by the file descriptor fd.</p><p><strong>open(char <code>\*</code>pathname, int flags, mode_t mode)</strong> opens the file specified by pathname. If the specified file doesn’t exist, it may optionally be created(if O_CREAT is specified in flags), the return value of it is a file descriptor that used in subsequent system calls(read(2),write(2),lseek(2),fcntl(2)) to refer to the open file.</p><p>②system calls</p><p>for more system call can see <a href="https://x64.syscall.sh/">this</a></p><h2 id="Building-a-Web-Server-Network-System-Calls"><a href="#Building-a-Web-Server-Network-System-Calls" class="headerlink" title="Building a Web Server: Network System Calls"></a>Building a Web Server: Network System Calls</h2><ol><li><p><img src="/2024/01/17/pwn-college/image-20240117224839466.png" alt="image-20240117224839466"></p></li><li><pre><code>struct sockaddr&#123;    uint16_t sa_family;// 2字节    uint8_t sa_data[14];// 1字节 x 14端口+IP&#125;;struct sockaddr_in&#123;    uint16_t sin_family;//2字节    uint16_t sin_port;//端口    uint32_t sin_addr;//IP    uint8_t __pad[8];//空&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. </span><br><span class="line"></span><br><span class="line">AF_INET is 2; [htons()](https://stackoverflow.com/questions/19207745/htons-function-in-socket-programing)function used to convert the number from little endian to big endian for networking work on big ending integers; `ipv4` address of 4 bytes is also big endian, the[inet_addr()](https://blog.csdn.net/ivnetware/article/details/78756321)function cverts an unsigned integer IP from a host end-order to a network end-order</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`.ascii`, `.asciz`区别：`.asciz`会在末尾自动添加`\0`</span><br><span class="line"></span><br><span class="line">## 学习笔记</span><br><span class="line"></span><br><span class="line">使用socket创建一个A-B的网络文件，然后使用bind将socket与具体的ip绑定。使用listen来被动侦听sockfd。使用accept接受外部连接。</span><br><span class="line"></span><br><span class="line">使用TCP/IP进行网络通讯，服务器端的例子如：</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">// int socket(int domain, int type, int protocol)</span><br><span class="line">socket_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_IP);</span><br><span class="line">    </span><br><span class="line">// int bind(int socket_fd, struct sockaddr* addr, socklen_t addrlen)</span><br><span class="line">/*</span><br><span class="line"> * struct sockaddr &#123;</span><br><span class="line"> *   uint16_t sa_family;</span><br><span class="line"> *   uint8_t  sa_data[14];   port + ip</span><br><span class="line"> * &#125;</span><br><span class="line"> * </span><br><span class="line"> * struct sockaddr_in &#123;</span><br><span class="line"> *   uint16_t sin_family;</span><br><span class="line"> *   uint16_t sin_port;port</span><br><span class="line"> *   uint32_t sin_addr;ip</span><br><span class="line"> *   uint8_t  __pad[8];not use</span><br><span class="line"> * &#125;</span><br><span class="line">*/</span><br><span class="line">    </span><br><span class="line">bind(socket_fd, &#123;sa_family=AF_INET, sin_port=htons(port), sin_addr=inet_addr(&quot;0.0.0.0&quot;)&#125;, 16);</span><br><span class="line"></span><br><span class="line">// int listen(int socket_fd, int backlog);</span><br><span class="line">listen(socket_fd, 0);</span><br><span class="line"></span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">    // int accept(int socket_fd, struct sockaddr* addr, socklen_t* addrlen);</span><br><span class="line">    tunnel = accept(socket_fd, NULL, NULL);</span><br><span class="line"></span><br><span class="line">    // receive http request: GET /file/xxx HTTP/1.0</span><br><span class="line">    // ssize_t read(int fd, void buf[.count], size_t count); read msg from client into [request]</span><br><span class="line">    // eg: GET /flag HTTP/1.0\r\n\r\n</span><br><span class="line">    read(tunnel, request, maxLength); // then extract the file path</span><br><span class="line"></span><br><span class="line">    if(request == GET)</span><br><span class="line">    &#123;</span><br><span class="line">        // open file and read file</span><br><span class="line">        file_fd = open(file_path, mode); // O_RDONLY, O_CREAT, O_WRONLY</span><br><span class="line">        valid_count = read(file_fd, file_content, maxLength); // read file content into file_content</span><br><span class="line">        // response</span><br><span class="line">        write(tunnel, &quot;HTTP/1.0 200 OK\r\n\r\n&quot;, 19);</span><br><span class="line">        write(tunnel, file_content, valid_count);</span><br><span class="line">        close(file_fd);</span><br><span class="line">    &#125;</span><br><span class="line">    else if(request == POST)</span><br><span class="line">    &#123;</span><br><span class="line">        file_fd = open(file_path, mode); // O_WRONLY...</span><br><span class="line">        write(file_fd, POST_request_body, POST_request_body_length);</span><br><span class="line">        close(file_fd);</span><br><span class="line">        // response</span><br><span class="line">        write(tunnel, &quot;HTTP/1.0 200 OK\r\n\r\n&quot;, 19);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(tunnel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exit(0);</span><br></pre></td></tr></table></figure></code></pre></li></ol><h1 id="module5-Reverse-Engineering"><a href="#module5-Reverse-Engineering" class="headerlink" title="module5(Reverse Engineering)"></a>module5(Reverse Engineering)</h1><h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><p>Linux file命令用于辨识文件类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file [-bcLvz][-f &lt;名称文件&gt;][-m &lt;魔法数字文件&gt;...][文件或目录...]</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ul><li>-b 　列出辨识结果时，不显示文件名称。</li><li>-c 　详细显示指令执行过程，便于排错或分析程序执行的情形。</li><li>-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。</li><li>-L 　直接显示符号连接所指向的文件的类别。</li><li>-m&lt;魔法数字文件&gt; 　指定魔法数字文件。</li><li>-v 　显示版本信息。</li><li>-z 　尝试去解读压缩文件的内容。</li><li>[文件或目录…] 要确定类型的文件列表，多个文件之间使用空格分开，可以使用shell通配符匹配多个文件。</li></ul><p><img src="/2024/01/17/pwn-college/image-20240121164931795.png" alt="image-20240121164931795"></p><p>Linux strings命令</p><p>strings - print the strings of printable characters in files.</p><p>意思是， 打印文件中可打印的字符。 我来补充一下吧， 这个文件可以是文本文件（test.c）, 可执行文件(test), 动态链接库(test.o), 静态链接库(test.a)</p><p>Linux strip命令</p><p><strong>简单的说就是给文件脱掉外衣，具体就是从特定文件中剥掉一些符号信息和调试信息，使文件变小。</strong></p><h2 id="GDB-使用"><a href="#GDB-使用" class="headerlink" title="GDB 使用"></a>GDB 使用</h2><ul><li><p><code>run/r</code> : 运行程序</p></li><li><p><code>break/b &lt;function_name&gt;/&lt;address&gt;</code> : 在函数名称或地址下断点</p></li><li><p><code>continue/c</code> : 继续运行程序</p></li><li><p><code>info registers/r</code> : 显示所有寄存器的信息</p></li><li><p><code>print/p $rax</code> : 打印某个寄存器的值 (in decimal)</p></li><li><p><code>p/x $rax </code>: 打印某个寄存器的值 (in hex)</p></li><li><p><code>x/&lt;n&gt;&lt;u&gt;&lt;f&gt; &lt;address&gt; </code> 和<code>display</code>用法一样。 将<code>x</code>替换为<code>display</code>即可</p><ul><li><p><code>&lt;u&gt;</code> 是要显示的单位大小 <code>eg: b(1byte), h(2byte), w(4byte), g(8byte)</code></p></li><li><p><code>&lt;f&gt;</code> 是要显示它的格式 <code>eg: d(decimal), x(hexadecimal), s(string), i(instruction)</code></p><p>The address can be specified using a register name, symbol name, or<br>absolute address. Additionally, you can supply mathematical expressions when specifying the address.</p></li><li><p><code>&lt;n&gt;</code>是要显示的元素个数</p></li><li><p><code>eg:</code></p><ul><li><code>x/8i $rip</code> will print the next 8 instructions from the current instruction pointer</li><li><code>x/16i main</code> will print the first 16 instructions of main</li><li><code>x/16gx $rsp</code> will print the first 16 values on the stack</li><li><code>x/gx $rbp-0x32</code>will print the local variable stored there on the stack</li></ul></li></ul></li><li><p><code>disassemble/disas &lt;function_name&gt;</code> : 将函数的汇编代码显示出来</p></li><li><p><code>set disassembly-flavor intel</code>: You will probably want to view your instructions using the CORRECT assembly syntax.</p></li><li><p><code>set</code> : 给寄存器赋值 <code>eg: set $rax = 0</code></p></li><li><p><code>stepi/si &lt;n&gt;</code>： 执行 n 条指令，会进入函数</p></li><li><p><code>nexti/ni &lt;n&gt;</code>： 执行 n 条指令，不会进入函数</p></li><li><p><code>finish</code> : 执行到当前函数结尾</p></li><li><p><code>layout regs</code>: 将界面变为如下格式</p></li><li><p><img src="/2024/01/17/pwn-college/image-20240122170103582.png" alt="image-20240122170103582"></p></li></ul><h3 id="GDB-script"><a href="#GDB-script" class="headerlink" title="GDB script"></a>GDB script</h3><p>You can write your commands to some file, for example <code>x.gdb</code>, and then launch gdb using the flag <code>-x &lt;PATH_TO_SCRIPT&gt;</code>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://tech.c01dkit.com/pwn-college-cse365-spring2023/#building-a-web-server&quot;&gt;https://tech.c01dkit.com/pwn-college-cse365-sprin</summary>
      
    
    
    
    <category term="pwn_college" scheme="https://1xueyu1.github.io/categories/pwn-college/"/>
    
    
  </entry>
  
  <entry>
    <title>单调栈</title>
    <link href="https://1xueyu1.github.io/2023/12/21/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <id>https://1xueyu1.github.io/2023/12/21/%E5%8D%95%E8%B0%83%E6%A0%88/</id>
    <published>2023-12-21T10:19:00.000Z</published>
    <updated>2023-12-21T10:24:18.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p><a href="https://leetcode.cn/problems/trapping-rain-water/description/">42. 接雨水 - 力扣（LeetCode）</a></p><p>单调栈一般用于存放数组的<strong>下标</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 单调栈，用于存放下标</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; height.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!st.<span class="built_in">empty</span>() &amp;&amp; height[i] &gt;= height[st.<span class="built_in">top</span>()])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 求中间的高度</span></span><br><span class="line">                <span class="type">int</span> bottom_h = height[st.<span class="built_in">top</span>()];</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="comment">// 如果到边缘结束</span></span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">empty</span>())<span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 待求面积的高，两边高度较小的减去中间的</span></span><br><span class="line">                <span class="type">int</span> dh = <span class="built_in">min</span>(height[i], height[st.<span class="built_in">top</span>()]) - bottom_h;</span><br><span class="line">                <span class="comment">// 乘上宽度即是面积</span></span><br><span class="line">                ans += dh * (i - st.<span class="built_in">top</span>() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            st.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="前后缀和-单调栈"><a href="#前后缀和-单调栈" class="headerlink" title="前后缀和+单调栈"></a>前后缀和+单调栈</h2><p><a href="https://leetcode.cn/problems/beautiful-towers-ii/description/?envType=daily-question&envId=2023-12-21">2866. 美丽塔 II - 力扣（LeetCode）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">maximumSumOfHeights</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; maxHeights)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = maxHeights.<span class="built_in">size</span>();</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后缀和</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">suf</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 哨兵</span></span><br><span class="line">        st.<span class="built_in">push</span>(n);</span><br><span class="line">        <span class="comment">// 求后缀和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> x = maxHeights[i];</span><br><span class="line">            <span class="comment">// x &lt;= maxHeights[st.top()] 等于代表相邻相同的数值存一次</span></span><br><span class="line">            <span class="keyword">while</span> (st.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; x &lt;= maxHeights[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                <span class="type">int</span> j = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                sum -= (<span class="type">long</span> <span class="type">long</span>)maxHeights[j] * (st.<span class="built_in">top</span>() - j);</span><br><span class="line">            &#125;</span><br><span class="line">            sum += (<span class="type">long</span> <span class="type">long</span>)maxHeights[i] * (st.<span class="built_in">top</span>() - i);</span><br><span class="line">            suf[i] = sum;</span><br><span class="line">            st.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        st = <span class="built_in">stack</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = sum;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> pre = <span class="number">0</span>;</span><br><span class="line">        st.<span class="built_in">push</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> x = maxHeights[i];</span><br><span class="line">            <span class="keyword">while</span> (st.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; x &lt;= maxHeights[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                <span class="type">int</span> j = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                pre -= (<span class="type">long</span> <span class="type">long</span>)maxHeights[j] * (j - st.<span class="built_in">top</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            pre += (<span class="type">long</span> <span class="type">long</span>)maxHeights[i] * (i - st.<span class="built_in">top</span>());</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, pre + suf[i + <span class="number">1</span>]);</span><br><span class="line">            st.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;单调栈&quot;&gt;&lt;a href=&quot;#单调栈&quot; class=&quot;headerlink&quot; title=&quot;单调栈&quot;&gt;&lt;/a&gt;单调栈&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/trapping-rain-water/descript</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="skill" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/skill/"/>
    
    
    <category term="单调栈" scheme="https://1xueyu1.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="https://1xueyu1.github.io/2023/12/20/%E6%8E%92%E5%BA%8F/"/>
    <id>https://1xueyu1.github.io/2023/12/20/%E6%8E%92%E5%BA%8F/</id>
    <published>2023-12-20T03:41:56.000Z</published>
    <updated>2023-12-23T12:54:58.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="插入排序-1"><a href="#插入排序-1" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertSort</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = nums[i];</span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt; temp; j--)</span><br><span class="line">&#123;</span><br><span class="line">nums[j + <span class="number">1</span>] = nums[j];</span><br><span class="line">&#125;</span><br><span class="line">nums[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 折半插入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">halfInsertSort</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = nums[i];</span><br><span class="line"><span class="comment">// 折半查找[0, i - 1]</span></span><br><span class="line">        <span class="comment">// 闭区间二分</span></span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, r = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m = l + (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (nums[m] &lt; temp)</span><br><span class="line">&#123;</span><br><span class="line">l = m + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">r = m - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [l, i - 1]元素后移</span></span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= l; j--)</span><br><span class="line">nums[j + <span class="number">1</span>] = nums[j];</span><br><span class="line"><span class="comment">// 插入指定位置</span></span><br><span class="line">nums[l] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 记录当前遍历是否发生过交换</span></span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 每次将未排序的数中最小的数推到前面</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = n - <span class="number">1</span>; j &gt; i; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (nums[j] &lt; nums[j - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = nums[j];</span><br><span class="line">nums[j] = nums[j - <span class="number">1</span>];</span><br><span class="line">nums[j - <span class="number">1</span>] = t;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果没有发生交换，说明已经有序了</span></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> start, <span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (start &gt;= end)<span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// 将第一个数作为基准值</span></span><br><span class="line"><span class="type">int</span> t = nums[start];</span><br><span class="line"><span class="type">int</span> i = start, j = end;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; nums[j] &gt;= t)</span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i &lt; j)</span><br><span class="line">nums[i] = nums[j];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; nums[i] &lt;= t)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i &lt; j)</span><br><span class="line">nums[j] = nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最后把基准值放在最后剩下的位置</span></span><br><span class="line">nums[i] = t;</span><br><span class="line"><span class="comment">// 并分为两部分</span></span><br><span class="line"><span class="comment">// i 左边的都更小，右边的都更大</span></span><br><span class="line"><span class="built_in">quickSort</span>(nums, start, i - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">quickSort</span>(nums, i + <span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectSort</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] &gt; nums[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = nums[i];</span><br><span class="line">nums[i] = nums[j];</span><br><span class="line">nums[j] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 递归拆分</span></span><br><span class="line"><span class="built_in">mergeSort</span>(nums, left, mid);</span><br><span class="line"><span class="built_in">mergeSort</span>(nums, mid + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line"><span class="comment">// 先将数组元素放到辅助数组中去</span></span><br><span class="line"><span class="keyword">for</span> (k = left; k &lt;= right; k++)</span><br><span class="line">&#123;</span><br><span class="line">a[k] = nums[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = left, j = mid + <span class="number">1</span>, k = i; i &lt;= mid &amp;&amp; j &lt;= right; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 如果左边的小就放左边的</span></span><br><span class="line"><span class="keyword">if</span> (a[i] &lt;= a[j])</span><br><span class="line">&#123;</span><br><span class="line">nums[k] = a[i++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 否则放右边的</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">nums[k] = a[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当有一个完成了就跳出，把另一个序列的剩下所有元素放进去</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid)nums[k++] = a[i++];</span><br><span class="line"><span class="keyword">while</span> (j &lt;= right)nums[k++] = a[j++];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 堆调整</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapUpdate</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> start, <span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> dad = start;</span><br><span class="line"><span class="type">int</span> son = dad * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (son &lt;= end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (son + <span class="number">1</span> &lt;= end &amp;&amp; nums[son] &lt; nums[son + <span class="number">1</span>])son++;</span><br><span class="line"><span class="keyword">if</span> (nums[dad] &gt; nums[son])<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(&amp;nums[dad], &amp;nums[son]);</span><br><span class="line">dad = son;</span><br><span class="line">son = dad * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapSort</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 更新以i为根的子树</span></span><br><span class="line"><span class="built_in">heapUpdate</span>(nums, i, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(&amp;nums[<span class="number">0</span>], &amp;nums[i]);</span><br><span class="line"><span class="built_in">heapUpdate</span>(nums, <span class="number">0</span>, i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h1&gt;&lt;h2 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="排序" scheme="https://1xueyu1.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>差分数组</title>
    <link href="https://1xueyu1.github.io/2023/12/17/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/"/>
    <id>https://1xueyu1.github.io/2023/12/17/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/</id>
    <published>2023-12-17T11:33:22.000Z</published>
    <updated>2023-12-25T16:12:25.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="差分数组"><a href="#差分数组" class="headerlink" title="差分数组"></a>差分数组</h1><h2 id="一维差分数组"><a href="#一维差分数组" class="headerlink" title="一维差分数组"></a>一维差分数组</h2><p><a href="https://leetcode.cn/problems/car-pooling/solutions/2550264/suan-fa-xiao-ke-tang-chai-fen-shu-zu-fu-9d4ra/">1094. 拼车 - 力扣（LeetCode）</a></p><h3 id="定义和性质"><a href="#定义和性质" class="headerlink" title="定义和性质"></a>定义和性质</h3><p><img src="/2023/12/17/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/image-20231217193954494.png" alt="image-20231217193954494"></p><h2 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h2><p><a href="https://leetcode.cn/problems/stamping-the-grid/solutions/1199642/wu-nao-zuo-fa-er-wei-qian-zhui-he-er-wei-zwiu/?envType=daily-question&envId=2023-12-14">2132. 用邮票贴满网格图 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/circle/discuss/UUuRex/">【图解】二维前缀和（附模板代码 Python&#x2F;Java&#x2F;C++&#x2F;Go&#x2F;JS） - 力扣（LeetCode）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">possibleToStamp</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, <span class="type">int</span> stampHeight, <span class="type">int</span> stampWidth)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.二维前缀和数组</span></span><br><span class="line">        <span class="comment">// s[i][j] 代表前 i 行每行的前 j 个元素的和</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">s</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (n + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 可以先想一下，或者可以看上面的链接</span></span><br><span class="line">                s[i][j] = s[i][j - <span class="number">1</span>] + s[i - <span class="number">1</span>][j] - s[i - <span class="number">1</span>][j - <span class="number">1</span>] + grid[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用一个二维数组记录满足的情况， 如果这一块满足情况，就将里面的元素全部加1</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">d</span>(m + <span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (n + <span class="number">2</span>));</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i2 = stampHeight; i2 &lt;= m; i2++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j2 = stampWidth; j2 &lt;= n; j2++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> i1 = i2 - stampHeight + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> j1 = j2 - stampWidth + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 如果这一片的面积为0说明是满足情况的</span></span><br><span class="line">                <span class="keyword">if</span>(s[i2][j2] - s[i2][j1 - <span class="number">1</span>] - s[i1 - <span class="number">1</span>][j2] + s[i1 - <span class="number">1</span>][j1 - <span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    d[i1][j1]++;</span><br><span class="line">                    d[i1][j2 + <span class="number">1</span>]--;</span><br><span class="line">                    d[i2 + <span class="number">1</span>][j1]--;</span><br><span class="line">                    d[i2 + <span class="number">1</span>][j2 + <span class="number">1</span>]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.还原二维差分数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                d[i + <span class="number">1</span>][j + <span class="number">1</span>] += d[i + <span class="number">1</span>][j] + d[i][j + <span class="number">1</span>] - d[i][j];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">0</span> &amp;&amp; d[i + <span class="number">1</span>][j + <span class="number">1</span>] == <span class="number">0</span>)<span class="comment">// 这说明这个格子没有情况是满足的</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;差分数组&quot;&gt;&lt;a href=&quot;#差分数组&quot; class=&quot;headerlink&quot; title=&quot;差分数组&quot;&gt;&lt;/a&gt;差分数组&lt;/h1&gt;&lt;h2 id=&quot;一维差分数组&quot;&gt;&lt;a href=&quot;#一维差分数组&quot; class=&quot;headerlink&quot; title=&quot;一维差分数</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="skill" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/skill/"/>
    
    
    <category term="差分数组" scheme="https://1xueyu1.github.io/tags/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>AVL树</title>
    <link href="https://1xueyu1.github.io/2023/12/12/AVL%E6%A0%91/"/>
    <id>https://1xueyu1.github.io/2023/12/12/AVL%E6%A0%91/</id>
    <published>2023-12-12T11:54:33.000Z</published>
    <updated>2023-12-12T12:41:09.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h1><p><a href="https://zhuanlan.zhihu.com/p/56066942">什么是平衡二叉树（AVL） - 知乎 (zhihu.com)</a></p><p>AVL树又称<strong>平衡二叉搜索树</strong></p><h2 id="平衡因子"><a href="#平衡因子" class="headerlink" title="平衡因子"></a>平衡因子</h2><p>定义：某节点的左子树与右子树的高度(深度)差即为该节点的平衡因子（BF,Balance Factor），平衡二叉树中不存在平衡因子大于 1 的节点。在一棵平衡二叉树中，节点的平衡因子只能取 0 、1 或者 -1 ，分别对应着左右子树等高，左子树比较高，右子树比较高。 </p><h2 id="节点定义"><a href="#节点定义" class="headerlink" title="节点定义"></a>节点定义</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AVLNode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> depth; </span><br><span class="line">Tree parent; <span class="comment">//父节点</span></span><br><span class="line">ElementType val;</span><br><span class="line">Tree l, r;</span><br><span class="line"></span><br><span class="line"><span class="built_in">AVLNode</span>(<span class="type">int</span> val = <span class="number">0</span>)</span><br><span class="line">: <span class="built_in">parent</span>(<span class="literal">nullptr</span>)</span><br><span class="line">, <span class="built_in">depth</span>(<span class="number">0</span>)</span><br><span class="line">, <span class="built_in">l</span>(<span class="literal">nullptr</span>)</span><br><span class="line">, <span class="built_in">r</span>(<span class="literal">nullptr</span>)</span><br><span class="line">, <span class="built_in">val</span>(val)</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="用到的函数"><a href="#用到的函数" class="headerlink" title="用到的函数"></a>用到的函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新当前深度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_depth</span><span class="params">(Tree node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> depth_Lchild=<span class="built_in">get_balance</span>(node-&gt;lchild); <span class="comment">//左孩子深度</span></span><br><span class="line">        <span class="type">int</span> depth_Rchild=<span class="built_in">get_balance</span>(node-&gt;rchild); <span class="comment">//右孩子深度</span></span><br><span class="line">        node-&gt;depth=<span class="built_in">max</span>(depth_Lchild,depth_Rchild)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前结点的深度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_balance</span><span class="params">(Tree node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node==<span class="literal">NULL</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node-&gt;depth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回当前平衡因子</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">is_balance</span><span class="params">(Tree node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node==<span class="literal">NULL</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">get_balance</span>(node-&gt;lchild)-<span class="built_in">get_balance</span>(node-&gt;rchild); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四种旋转方式"><a href="#四种旋转方式" class="headerlink" title="四种旋转方式"></a>四种旋转方式</h2><h3 id="RR型"><a href="#RR型" class="headerlink" title="RR型"></a>RR型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RR型调整函数</span></span><br><span class="line"><span class="comment">//返回新父节点</span></span><br><span class="line"><span class="function">Tree <span class="title">RR_rotate</span><span class="params">(Tree node)</span></span>&#123;</span><br><span class="line">    <span class="comment">//node为离操作结点最近的失衡的结点</span></span><br><span class="line">    Tree parent=<span class="literal">NULL</span>,son;</span><br><span class="line">    <span class="comment">//获取失衡结点的父节点</span></span><br><span class="line">    parent=node-&gt;parent;</span><br><span class="line">    <span class="comment">//获取失衡结点的右孩子</span></span><br><span class="line">    son=node-&gt;rchild;</span><br><span class="line">    <span class="comment">//设置son结点左孩子的父指针</span></span><br><span class="line">    <span class="keyword">if</span> (son-&gt;lchild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">          son-&gt;lchild-&gt;parent=node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失衡结点的右孩子变更为son的左孩子</span></span><br><span class="line">    node-&gt;rchild=son-&gt;lchild;</span><br><span class="line">    <span class="comment">//更新失衡结点的高度信息</span></span><br><span class="line">    <span class="built_in">update_depth</span>(node);</span><br><span class="line">    <span class="comment">//失衡结点变成son的左孩子</span></span><br><span class="line">    son-&gt;lchild=node;</span><br><span class="line">    <span class="comment">//设置son的父结点为原失衡结点的父结点</span></span><br><span class="line">    son-&gt;parent=parent;</span><br><span class="line">    <span class="comment">//如果失衡结点不是根结点，则开始更新父节点</span></span><br><span class="line">    <span class="keyword">if</span> (parent!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">//如果父节点的左孩子是失衡结点，指向现在更新后的新孩子son</span></span><br><span class="line">        <span class="keyword">if</span> (parent-&gt;lchild==node)&#123;</span><br><span class="line">            parent-&gt;lchild=son;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//父节点的右孩子是失衡结点</span></span><br><span class="line">            parent-&gt;rchild=son;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置失衡结点的父亲</span></span><br><span class="line">    node-&gt;parent=son;</span><br><span class="line">    <span class="comment">//更新son结点的高度信息</span></span><br><span class="line">    <span class="built_in">update_depth</span>(son);</span><br><span class="line">    <span class="keyword">return</span> son;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LL型"><a href="#LL型" class="headerlink" title="LL型"></a>LL型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LL型调整函数</span></span><br><span class="line"><span class="comment">//返回:新父节点</span></span><br><span class="line"><span class="function">Tree <span class="title">LL_rotate</span><span class="params">(Tree node)</span></span>&#123;</span><br><span class="line">    <span class="comment">//node为离操作结点最近的失衡的结点</span></span><br><span class="line">    Tree parent=<span class="literal">NULL</span>,son;</span><br><span class="line">    <span class="comment">//获取失衡结点的父节点</span></span><br><span class="line">    parent=node-&gt;parent;</span><br><span class="line">    <span class="comment">//获取失衡结点的左孩子</span></span><br><span class="line">    son=node-&gt;lchild;</span><br><span class="line">    <span class="comment">//设置son结点右孩子的父指针</span></span><br><span class="line">    <span class="keyword">if</span> (son-&gt;rchild!=<span class="literal">NULL</span>)  son-&gt;rchild-&gt;parent=node;</span><br><span class="line">    <span class="comment">//失衡结点的左孩子变更为son的右孩子</span></span><br><span class="line">    node-&gt;lchild=son-&gt;rchild;</span><br><span class="line">    <span class="comment">//更新失衡结点的高度信息</span></span><br><span class="line">    <span class="built_in">update_depth</span>(node);</span><br><span class="line">    <span class="comment">//失衡结点变成son的右孩子</span></span><br><span class="line">    son-&gt;rchild=node;</span><br><span class="line">    <span class="comment">//设置son的父结点为原失衡结点的父结点</span></span><br><span class="line">    son-&gt;parent=parent;</span><br><span class="line">    <span class="comment">//如果失衡结点不是根结点，则开始更新父节点</span></span><br><span class="line">    <span class="keyword">if</span> (parent!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">//如果父节点的左孩子是失衡结点，指向现在更新后的新孩子son</span></span><br><span class="line">        <span class="keyword">if</span> (parent-&gt;lchild==node)&#123;</span><br><span class="line">            parent-&gt;lchild=son;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="comment">//父节点的右孩子是失衡结点</span></span><br><span class="line">              parent-&gt;rchild=son;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//设置失衡结点的父亲</span></span><br><span class="line">    node-&gt;parent=son;</span><br><span class="line">    <span class="comment">//更新son结点的高度信息</span></span><br><span class="line">    <span class="built_in">update_depth</span>(son);</span><br><span class="line">    <span class="keyword">return</span> son;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RL型"><a href="#RL型" class="headerlink" title="RL型"></a>RL型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RL型，先右旋转，再左旋转</span></span><br><span class="line"><span class="comment">//返回:新父节点</span></span><br><span class="line"><span class="function">Tree <span class="title">RL_rotate</span><span class="params">(Tree node)</span></span>&#123;</span><br><span class="line">    <span class="built_in">LL_rotate</span>(node-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RR_rotate</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LR型"><a href="#LR型" class="headerlink" title="LR型"></a>LR型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LR型，先左旋转，再右旋转</span></span><br><span class="line"><span class="comment">//返回：新父节点</span></span><br><span class="line"><span class="function">Tree <span class="title">LR_rotate</span><span class="params">(Tree node)</span></span>&#123;</span><br><span class="line">    <span class="built_in">RR_rotate</span>(node-&gt;lchild);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">LL_rotate</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AVL树&quot;&gt;&lt;a href=&quot;#AVL树&quot; class=&quot;headerlink&quot; title=&quot;AVL树&quot;&gt;&lt;/a&gt;AVL树&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56066942&quot;&gt;什么是平衡二叉树（AVL） </summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
    <category term="AVL树" scheme="https://1xueyu1.github.io/tags/AVL%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>记忆化递归</title>
    <link href="https://1xueyu1.github.io/2023/12/03/%E8%AE%B0%E5%BF%86%E5%8C%96%E9%80%92%E5%BD%92/"/>
    <id>https://1xueyu1.github.io/2023/12/03/%E8%AE%B0%E5%BF%86%E5%8C%96%E9%80%92%E5%BD%92/</id>
    <published>2023-12-03T04:46:16.000Z</published>
    <updated>2023-12-03T04:50:08.374Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/minimum-path-cost-in-a-grid/description/?envType=daily-question&envId=2023-11-22">2304. 网格中的最小路径代价 - 力扣（LeetCode）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPathCost</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; moveCost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 记录dfs(i, j)已经计算过的</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">memo</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> i, <span class="type">int</span> j) -&gt; <span class="type">int</span>&#123;</span><br><span class="line">            <span class="comment">// 到边界了，直接返回</span></span><br><span class="line">            <span class="keyword">if</span>(i == m - <span class="number">1</span>)<span class="keyword">return</span> grid[i][j];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 引用， 记录过就直接返回</span></span><br><span class="line">            <span class="keyword">auto</span>&amp; res = memo[i][j];</span><br><span class="line">            <span class="keyword">if</span>(res)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 没记录过，就递归求答案</span></span><br><span class="line">            res = INT_MAX;</span><br><span class="line">            <span class="comment">// 移动到下一行的k列</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, <span class="built_in">dfs</span>(i + <span class="number">1</span>, k) + moveCost[grid[i][j]][k]);</span><br><span class="line">            &#125;</span><br><span class="line">            res += grid[i][j];</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> ans = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)<span class="comment">// 枚举起点</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, <span class="built_in">dfs</span>(<span class="number">0</span>, j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/minimum-path-cost-in-a-grid/description/?envType=daily-question&amp;envId=2023-11-22&quot;&gt;2304. 网格中的最小路径代价 </summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="图" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
    <category term="递归" scheme="https://1xueyu1.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="记忆化搜索" scheme="https://1xueyu1.github.io/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>最短路径</title>
    <link href="https://1xueyu1.github.io/2023/11/30/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    <id>https://1xueyu1.github.io/2023/11/30/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</id>
    <published>2023-11-30T11:13:30.000Z</published>
    <updated>2023-11-30T11:54:21.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h1><p><a href="https://leetcode.cn/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/description/?envType=daily-question&envId=2023-11-14">1334. 阈值距离内邻居最少的城市 - 力扣（LeetCode）</a></p><h2 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h2><h3 id="递归-（记忆化搜索）"><a href="#递归-（记忆化搜索）" class="headerlink" title="递归+（记忆化搜索）"></a>递归+（记忆化搜索）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTheCity</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, <span class="type">int</span> distanceThreshold)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (n, INT_MAX / <span class="number">2</span>));</span><br><span class="line">        <span class="comment">// 邻接矩阵</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : edges)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = e[<span class="number">0</span>], y = e[<span class="number">1</span>], dis = e[<span class="number">2</span>];</span><br><span class="line">            g[x][y] = g[y][x] = dis;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记忆化存储</span></span><br><span class="line">        vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">mem</span>(n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n)));</span><br><span class="line">        <span class="comment">// dfs(k, i, j)表示从i到j的路径节点 &lt;= k</span></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> k, <span class="type">int</span> i, <span class="type">int</span> j) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            <span class="comment">// 到边界, 即从i到j无其他节点</span></span><br><span class="line">            <span class="keyword">if</span>(k &lt; <span class="number">0</span>)<span class="keyword">return</span> g[i][j];</span><br><span class="line">            <span class="comment">// 引用res，能修改mem</span></span><br><span class="line">            <span class="keyword">auto</span>&amp; res = mem[k][i][j];</span><br><span class="line">            <span class="keyword">if</span>(res)<span class="keyword">return</span> res;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 不选k点，dfs(k, i, j) = dfs(k - 1, i, j)</span></span><br><span class="line">            <span class="comment">// 选k点, dfs(k, i, j) = dfs(k - 1, i, k) + dfs(k - 1, k, j)</span></span><br><span class="line">            <span class="keyword">return</span> res = <span class="built_in">min</span>(<span class="built_in">dfs</span>(k - <span class="number">1</span>, i, j), <span class="built_in">dfs</span>(k - <span class="number">1</span>, i, k) + <span class="built_in">dfs</span>(k - <span class="number">1</span>, k, j));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans;</span><br><span class="line">        <span class="type">int</span> min_citys = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i != j &amp;&amp; <span class="built_in">dfs</span>(n - <span class="number">1</span>, i, j) &lt;= distanceThreshold)</span><br><span class="line">                &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// =的原因时取编号最大的</span></span><br><span class="line">            <span class="keyword">if</span>(cnt &lt;= min_citys)</span><br><span class="line">            &#123;</span><br><span class="line">                min_citys = cnt;</span><br><span class="line">                ans = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="迭代写法"><a href="#迭代写法" class="headerlink" title="迭代写法"></a>迭代写法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTheCity</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, <span class="type">int</span> distanceThreshold)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (n, INT_MAX / <span class="number">2</span>));</span><br><span class="line">        <span class="comment">// 邻接矩阵</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : edges)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = e[<span class="number">0</span>], y = e[<span class="number">1</span>], dis = e[<span class="number">2</span>];</span><br><span class="line">            g[x][y] = g[y][x] = dis;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            g[k][k] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 相当于往i到j的路径中间不断加入其他点，并更新所有路径的值</span></span><br><span class="line">                    g[i][j] = <span class="built_in">min</span>(g[i][j], g[i][k] + g[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>, min_cnt = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(g[i][j] &lt;= distanceThreshold)</span><br><span class="line">                &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt &lt;= min_cnt)</span><br><span class="line">            &#123;</span><br><span class="line">                min_cnt = cnt;</span><br><span class="line">                ans = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最短路径&quot;&gt;&lt;a href=&quot;#最短路径&quot; class=&quot;headerlink&quot; title=&quot;最短路径&quot;&gt;&lt;/a&gt;最短路径&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/find-the-city-with-the-s</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="图" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
    <category term="最短路径" scheme="https://1xueyu1.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>二叉树迭代器</title>
    <link href="https://1xueyu1.github.io/2023/11/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>https://1xueyu1.github.io/2023/11/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2023-11-27T14:36:10.000Z</published>
    <updated>2023-11-28T05:10:39.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树迭代器（前序遍历）"><a href="#二叉树迭代器（前序遍历）" class="headerlink" title="二叉树迭代器（前序遍历）"></a>二叉树迭代器（前序遍历）</h2><h3 id="定义树节点"><a href="#定义树节点" class="headerlink" title="定义树节点"></a>定义树节点</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 树节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>* left, * right;</span><br><span class="line">&#125;TreeNode;</span><br></pre></td></tr></table></figure><h3 id="创建二叉树类"><a href="#创建二叉树类" class="headerlink" title="创建二叉树类"></a>创建二叉树类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二叉树类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BinaryTree</span>() &#123;&#125;</span><br><span class="line"><span class="comment">// 二叉树构造函数</span></span><br><span class="line"><span class="built_in">BinaryTree</span>(<span class="type">int</span> num[], <span class="type">int</span> numSize, <span class="type">int</span>* index)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="built_in">creatBinaryTree</span>(num, numSize, index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建二叉树函数</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">creatBinaryTree</span><span class="params">(<span class="type">int</span> num[], <span class="type">int</span> numSize, <span class="type">int</span>* index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回begin迭代器</span></span><br><span class="line"><span class="function">BinaryTreeIterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">BinaryTreeIterator</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回end迭代器</span></span><br><span class="line"><span class="function">BinaryTreeIterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">BinaryTreeIterator</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addFive</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(BinaryTreeIterator it = <span class="built_in">begin</span>(); it != <span class="built_in">end</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">(*it)-&gt;val += <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">TreeNode* root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">BinaryTree::creatBinaryTree</span><span class="params">(<span class="type">int</span> num[], <span class="type">int</span> numSize, <span class="type">int</span>* index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果数组当前值为-1，空节点</span></span><br><span class="line"><span class="keyword">if</span> (num[(*index)] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">(*index)++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">TreeNode* root = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> ((*index) &lt; numSize)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//否则新建节点</span></span><br><span class="line">root = (TreeNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(TreeNode));</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;内存分配失败!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">root-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;val = num[(*index)++];</span><br><span class="line"></span><br><span class="line">root-&gt;left = <span class="built_in">creatBinaryTree</span>(num, numSize, index);</span><br><span class="line">root-&gt;right = <span class="built_in">creatBinaryTree</span>(num, numSize, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树迭代器"><a href="#二叉树迭代器" class="headerlink" title="二叉树迭代器"></a>二叉树迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建二叉树的迭代器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTreeIterator</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 先存放二叉树的根节点</span></span><br><span class="line"><span class="built_in">BinaryTreeIterator</span>(TreeNode* root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root)</span><br><span class="line">&#123;</span><br><span class="line">st.<span class="built_in">push</span>(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载*，返回当前位置的节点</span></span><br><span class="line">TreeNode*&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> st.<span class="built_in">top</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载++， 按照前序遍历的方式遍历二叉树</span></span><br><span class="line">BinaryTreeIterator&amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (node-&gt;right)st.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line"><span class="keyword">if</span> (node-&gt;left)st.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> BinaryTreeIterator&amp; a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !st.<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">stack&lt;TreeNode*&gt; st;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 树节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>* left, * right;</span><br><span class="line">&#125;TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建二叉树的迭代器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTreeIterator</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 先存放二叉树的根节点</span></span><br><span class="line"><span class="built_in">BinaryTreeIterator</span>(TreeNode* root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root)</span><br><span class="line">&#123;</span><br><span class="line">st.<span class="built_in">push</span>(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载*，返回当前位置的节点</span></span><br><span class="line">TreeNode*&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> st.<span class="built_in">top</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照前序遍历的方式遍历二叉树</span></span><br><span class="line">BinaryTreeIterator&amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (node-&gt;right)st.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line"><span class="keyword">if</span> (node-&gt;left)st.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> BinaryTreeIterator&amp; a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !st.<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">stack&lt;TreeNode*&gt; st;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BinaryTree</span>() &#123;&#125;</span><br><span class="line"><span class="comment">// 二叉树构造函数</span></span><br><span class="line"><span class="built_in">BinaryTree</span>(<span class="type">int</span> num[], <span class="type">int</span> numSize, <span class="type">int</span>* index)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="built_in">creatBinaryTree</span>(num, numSize, index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建二叉树函数</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">creatBinaryTree</span><span class="params">(<span class="type">int</span> num[], <span class="type">int</span> numSize, <span class="type">int</span>* index)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BinaryTreeIterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">BinaryTreeIterator</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BinaryTreeIterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">BinaryTreeIterator</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addFive</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(BinaryTreeIterator it = <span class="built_in">begin</span>(); it != <span class="built_in">end</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">(*it)-&gt;val += <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">TreeNode* root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//前序遍历和此顺序一样，-1代表节点为空</span></span><br><span class="line"><span class="type">int</span> num[] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">8</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">15</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">42</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">33</span>, <span class="number">21</span>, <span class="number">54</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">31</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> numSize = <span class="built_in">sizeof</span>(num) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 以root为根节点创建二叉树对象</span></span><br><span class="line"><span class="function">BinaryTree <span class="title">tree</span><span class="params">(num, numSize, &amp;index)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 利用 二叉树迭代器 遍历二叉树</span></span><br><span class="line"><span class="keyword">for</span> (BinaryTreeIterator it = tree.<span class="built_in">begin</span>(); it != tree.<span class="built_in">end</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; (*it)-&gt;val &lt;&lt; <span class="string">&quot;   &quot;</span>;</span><br><span class="line">sum += (*it)-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;sum : &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 用accumulate函数验证</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;accumulate值 : &quot;</span> &lt;&lt; <span class="built_in">accumulate</span>(tree.<span class="built_in">begin</span>(), tree.<span class="built_in">end</span>(), <span class="number">0</span>, [](<span class="type">int</span> sum, BinaryTreeIterator a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> sum + (*a)-&gt;val;</span><br><span class="line">&#125;) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树所有节点+5</span></span><br><span class="line">tree.<span class="built_in">addFive</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;所有节点+5后 :&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (BinaryTreeIterator it = tree.<span class="built_in">begin</span>(); it != tree.<span class="built_in">end</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; (*it)-&gt;val &lt;&lt; <span class="string">&quot;   &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">BinaryTree::creatBinaryTree</span><span class="params">(<span class="type">int</span> num[], <span class="type">int</span> numSize, <span class="type">int</span>* index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果数组当前值为-1，空节点</span></span><br><span class="line"><span class="keyword">if</span> (num[(*index)] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">(*index)++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">TreeNode* root = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> ((*index) &lt; numSize)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//否则新建节点</span></span><br><span class="line">root = (TreeNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(TreeNode));</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;内存分配失败!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">root-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;val = num[(*index)++];</span><br><span class="line"></span><br><span class="line">root-&gt;left = <span class="built_in">creatBinaryTree</span>(num, numSize, index);</span><br><span class="line">root-&gt;right = <span class="built_in">creatBinaryTree</span>(num, numSize, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二叉树迭代器（前序遍历）&quot;&gt;&lt;a href=&quot;#二叉树迭代器（前序遍历）&quot; class=&quot;headerlink&quot; title=&quot;二叉树迭代器（前序遍历）&quot;&gt;&lt;/a&gt;二叉树迭代器（前序遍历）&lt;/h2&gt;&lt;h3 id=&quot;定义树节点&quot;&gt;&lt;a href=&quot;#定义树节点&quot; c</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
    <category term="二叉树" scheme="https://1xueyu1.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>最小生成树</title>
    <link href="https://1xueyu1.github.io/2023/11/27/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>https://1xueyu1.github.io/2023/11/27/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</id>
    <published>2023-11-27T02:22:26.000Z</published>
    <updated>2023-12-10T03:13:26.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h1><p><strong>模板题</strong><br><a href="https://leetcode.cn/problems/min-cost-to-connect-all-points/description/">1584. 连接所有点的最小费用 - 力扣（LeetCode）</a></p><h2 id="prim算法"><a href="#prim算法" class="headerlink" title="prim算法"></a>prim算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points, <span class="type">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = points.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.邻接矩阵记录所有边的距离</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> dist = <span class="built_in">abs</span>(points[i][<span class="number">0</span>] - points[j][<span class="number">0</span>]) + <span class="built_in">abs</span>(points[i][<span class="number">1</span>] - points[j][<span class="number">1</span>]);</span><br><span class="line">            g[i][j] = g[j][i] = dist;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 规定v[i] == 0的点为V集合，v[i] == 1的集合为Vnew集合</span></span><br><span class="line">    <span class="comment">// 记录点的状态 v[start] == 1代表用过了</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 记录V集合到Vnew集合所有点中的最小距离</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">lowcost</span><span class="params">(n, INT_MAX)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把第一个点放入Vnew集合中</span></span><br><span class="line">    v[start] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == start)<span class="keyword">continue</span>;</span><br><span class="line">        lowcost[i] = g[i][start];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理剩下的所有点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> _ = <span class="number">1</span>; _ &lt; n; _++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> minIndex = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> minVal = INT_MAX;</span><br><span class="line">        <span class="comment">// 查找与Vnew集合的最小距离</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(v[i] == <span class="number">0</span> &amp;&amp; lowcost[i] &lt; minVal)</span><br><span class="line">            &#123;</span><br><span class="line">                minIndex = i;</span><br><span class="line">                minVal = lowcost[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 把找到的点从V放入Vnew</span></span><br><span class="line">        v[minIndex] = <span class="number">1</span>;</span><br><span class="line">        ans += minVal;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新lowcost</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(g[j][minIndex] &lt; lowcost[j])</span><br><span class="line">            &#123;</span><br><span class="line">                lowcost[j] = g[j][minIndex];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Kruskal-算法"><a href="#Kruskal-算法" class="headerlink" title="Kruskal 算法"></a>Kruskal 算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DisjoinSetUnion</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f, rank;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">DisjoinSetUnion</span>(<span class="type">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        n = n;</span><br><span class="line">        rank.<span class="built_in">resize</span>(n, <span class="number">1</span>);</span><br><span class="line">        f.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找函数</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x != f[x])</span><br><span class="line">        &#123;</span><br><span class="line">            f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并函数</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">UnionSet</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> fx = <span class="built_in">find</span>(x), fy = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span>(fx == fy)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(rank[fx] &lt; rank[fy])<span class="built_in">swap</span>(fx, fy);</span><br><span class="line">        rank[fx] += rank[fy];</span><br><span class="line">        f[fy] = fx;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义边</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> len, x, y;</span><br><span class="line">    <span class="built_in">edge</span>(<span class="type">int</span> len, <span class="type">int</span> x, <span class="type">int</span> y) : <span class="built_in">len</span>(len), <span class="built_in">x</span>(x), <span class="built_in">y</span>(y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostConnectPoints</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dist = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) -&gt; <span class="type">int</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(points[x][<span class="number">0</span>] - points[y][<span class="number">0</span>]) + <span class="built_in">abs</span>(points[x][<span class="number">1</span>] - points[y][<span class="number">1</span>]);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n = points.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">DisjoinSetUnion <span class="title">dsu</span><span class="params">(n)</span></span>;</span><br><span class="line">        vector&lt;edge&gt; edges;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                edges.<span class="built_in">emplace_back</span>(<span class="built_in">dist</span>(i, j), i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将边排序</span></span><br><span class="line">        <span class="built_in">sort</span>(edges.<span class="built_in">begin</span>(), edges.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="keyword">auto</span>&amp; a, <span class="type">const</span> <span class="keyword">auto</span>&amp; b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a.len &lt; b.len;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历所有边，将每条边的两个端点进行union操作</span></span><br><span class="line">       <span class="comment">// ans记录路径和, num记录当前已经完成的边的个数，初始化为1</span></span><br><span class="line">        <span class="comment">// 当所有点都联通时需要n-1条边</span></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>, num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; [len, x, y] : edges)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 合并成功代表将两个连通集合并到一起了</span></span><br><span class="line">            <span class="keyword">if</span>(dsu.<span class="built_in">UnionSet</span>(x, y))</span><br><span class="line">            &#123;</span><br><span class="line">                ans += len;</span><br><span class="line">                num++;</span><br><span class="line">                <span class="comment">// 全部联通时退出</span></span><br><span class="line">                <span class="keyword">if</span>(num == n)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="洛谷模板题"><a href="#洛谷模板题" class="headerlink" title="洛谷模板题"></a>洛谷模板题</h1><p><a href="https://www.luogu.com.cn/problem/P3366">P3366 【模板】最小生成树 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p><a href="https://www.bilibili.com/video/BV1mJ411S7BB/?spm_id_from=333.337.search-card.all.click&vd_source=a87fbd3945da4b0dcfade345051aeae4">【AgOHの数据结构】你真的了解链式前向星吗？_哔哩哔哩_bilibili</a></p><h2 id="prim算法-1"><a href="#prim算法-1" class="headerlink" title="prim算法"></a>prim算法</h2><h3 id="图的存储（链式前向星）"><a href="#图的存储（链式前向星）" class="headerlink" title="图的存储（链式前向星）"></a>图的存储（链式前向星）</h3><p>先开一个比较大的内存池，也就是e[maxm&lt;&lt;1],然后在这块空间里进行，tot代表最近的且未被使用的一块内存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// head[i]是第i个点的邻接点</span></span><br><span class="line">ll head[maxn], tot;</span><br><span class="line"><span class="comment">// 无向图所以开两倍</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edges</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// v代表当前点指向的点，w为权值， next代表当前点的下一个邻接点</span></span><br><span class="line">ll v, w, next;</span><br><span class="line">&#125;e[maxm &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addEage</span><span class="params">(ll u, ll v, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 先根据一条边初始化一个节点</span></span><br><span class="line">e[tot].v = v;</span><br><span class="line">    e[tot].w = w;</span><br><span class="line">    <span class="comment">// 然后插入对应的位置</span></span><br><span class="line">    e[tot].next = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/11/27/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-12-09%20190543.png" alt="屏幕截图 2023-12-09 190543"></p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个极大值</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x7f7ff</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, dist[<span class="number">5010</span>], head[<span class="number">5010</span>], ans, k;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">5010</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式前向星存储（邻接表）</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v, next, w;</span><br><span class="line">&#125;edges[<span class="number">400010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edges[++k].v = v;</span><br><span class="line">edges[k].w = w;</span><br><span class="line">edges[k].next = head[u];</span><br><span class="line">head[u] = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 全部设为最大值</span></span><br><span class="line"><span class="built_in">fill</span>(dist, dist + n + <span class="number">1</span>, inf);</span><br><span class="line">    <span class="comment">// 处理第一个点</span></span><br><span class="line">dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 从剩下的点中找出距离最短的点</span></span><br><span class="line"><span class="type">int</span> u = <span class="number">-1</span>, minn = inf;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!vis[i] &amp;&amp; dist[i] &lt; minn)</span><br><span class="line">&#123;</span><br><span class="line">u = i;</span><br><span class="line">minn = dist[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 没找到的情况</span></span><br><span class="line"><span class="keyword">if</span> (u == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 记录当前走过的点</span></span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line">ans += dist[u];</span><br><span class="line">        <span class="comment">// 更新剩下的distance</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = edges[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = edges[i].v;</span><br><span class="line"><span class="keyword">if</span> (!vis[v] &amp;&amp; dist[v] &gt; edges[i].w)dist[v] = edges[i].w;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="built_in">add</span>(a, b, c);</span><br><span class="line"><span class="built_in">add</span>(b, a, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">prim</span>();</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">-1</span>)cout &lt;&lt; <span class="string">&quot;orz&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="kruskal"><a href="#kruskal" class="headerlink" title="kruskal"></a>kruskal</h2><p>将所有边按权值排序为由小到大。</p><p>然后遍历每条边，在一个连通集中就跳过，不在就加入，ans加上这条边的权值，再用total记录点的个数，total &#x3D;&#x3D; n - 1时所有点都进去了，结束。如果最后total !&#x3D; n - 1，说明没有不联通，所以没有最小生成树。</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// u为当前边的起始点，v为终点，total记录点的个数</span></span><br><span class="line"><span class="type">int</span> n, m, u, v, total;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录所有边</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> start, to;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> val;</span><br><span class="line">&#125;edges[<span class="number">2000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录祖先</span></span><br><span class="line"><span class="type">int</span> f[<span class="number">100000</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找祖先，并用了路径压缩</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (f[x] == x)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line"><span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体的数组排序函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.val &lt; b.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 从小到大遍历每条边</span></span><br><span class="line">        <span class="comment">// 起点</span></span><br><span class="line">u = <span class="built_in">find</span>(edges[i].start);</span><br><span class="line">        <span class="comment">//终点</span></span><br><span class="line">v = <span class="built_in">find</span>(edges[i].to);</span><br><span class="line">        <span class="comment">// 已经在同一个连通集就跳过</span></span><br><span class="line"><span class="keyword">if</span> (u == v)<span class="keyword">continue</span>;</span><br><span class="line">ans += edges[i].val;<span class="comment">//不在同一个并查集里就加上</span></span><br><span class="line">        <span class="comment">// 合并两点</span></span><br><span class="line">f[u] = v;</span><br><span class="line">total++;</span><br><span class="line"><span class="keyword">if</span> (total == n - <span class="number">1</span>)<span class="keyword">break</span>;<span class="comment">// 已经形成了最小生成树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)f[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;edges[i].start, &amp;edges[i].to, &amp;edges[i].val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(edges + <span class="number">1</span>, edges + m + <span class="number">1</span>, cmp);</span><br><span class="line"><span class="built_in">kruskal</span>();</span><br><span class="line"><span class="keyword">if</span> (total != n - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;orz&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcode&quot;&gt;&lt;a href=&quot;#leetcode&quot; class=&quot;headerlink&quot; title=&quot;leetcode&quot;&gt;&lt;/a&gt;leetcode&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;模板题&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://leetc</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="图" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
    <category term="最小生成树" scheme="https://1xueyu1.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="https://1xueyu1.github.io/2023/11/26/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>https://1xueyu1.github.io/2023/11/26/%E7%BA%BF%E6%AE%B5%E6%A0%91/</id>
    <published>2023-11-26T02:37:35.000Z</published>
    <updated>2023-12-20T13:47:00.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><p><strong>参考文献</strong></p><p><a href="https://blog.csdn.net/weixin_45697774/article/details/104274713">线段树 从入门到进阶（超清晰，简单易懂）_线段树怎么写-CSDN博客</a></p><h2 id="简单线段树"><a href="#简单线段树" class="headerlink" title="简单线段树"></a>简单线段树</h2><p><strong>模板题</strong></p><p><a href="https://www.luogu.com.cn/problem/P3374">P3374 【模板】树状数组 1（单点修改&#x2F;区间查询）</a></p><p><a href="https://www.luogu.com.cn/problem/P3368">P3368 【模板】树状数组 2 （区间修改&#x2F;单点查询）</a></p><h3 id="树状数组的构建"><a href="#树状数组的构建" class="headerlink" title="树状数组的构建"></a>树状数组的构建</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[i].left = left;</span><br><span class="line">tree[i].right = right;</span><br><span class="line"><span class="comment">// 到叶子节点</span></span><br><span class="line"><span class="keyword">if</span> (left == right)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 递归构建左右子树</span></span><br><span class="line"><span class="built_in">build</span>(i * <span class="number">2</span>, left, mid);</span><br><span class="line"><span class="built_in">build</span>(i * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取数组的值给线段树赋值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[i].left == tree[i].right)</span><br><span class="line">&#123;</span><br><span class="line">tree[i].num = nums[tree[i].right];</span><br><span class="line"><span class="keyword">return</span> tree[i].num;</span><br><span class="line">&#125;</span><br><span class="line">tree[i].num = <span class="built_in">add</span>(i * <span class="number">2</span>) + <span class="built_in">add</span>(i * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> tree[i].num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从i开始递归修改所有 包含 第dis位 的区间，都加上k</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_plus</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> dis, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[i].num += k;</span><br><span class="line"><span class="keyword">if</span> (tree[i].left == tree[i].right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 修改左右儿子区间的值</span></span><br><span class="line"><span class="keyword">if</span> (dis &lt;= tree[i * <span class="number">2</span>].right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">my_plus</span>(i * <span class="number">2</span>, dis, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dis &gt;= tree[i * <span class="number">2</span> + <span class="number">1</span>].left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">my_plus</span>(i * <span class="number">2</span> + <span class="number">1</span>, dis, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询[l, r]的状态，如 区间的和 或者 区间的最大值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= tree[i].left &amp;&amp; tree[i].right &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">ans += tree[i].num;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tree[i * <span class="number">2</span>].right &gt;= l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">search</span>(i * <span class="number">2</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tree[i * <span class="number">2</span> + <span class="number">1</span>].left &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">search</span>(i * <span class="number">2</span> + <span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> nums[<span class="number">500010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> left, right;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">&#125;tree[<span class="number">2000010</span>];  <span class="comment">// [4n]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[i].left = left;</span><br><span class="line">tree[i].right = right;</span><br><span class="line"><span class="comment">// 到叶子节点</span></span><br><span class="line"><span class="keyword">if</span> (left == right)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 递归构建左右子树</span></span><br><span class="line"><span class="built_in">build</span>(i * <span class="number">2</span>, left, mid);</span><br><span class="line"><span class="built_in">build</span>(i * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[i].left == tree[i].right)</span><br><span class="line">&#123;</span><br><span class="line">tree[i].num = nums[tree[i].right];</span><br><span class="line"><span class="keyword">return</span> tree[i].num;</span><br><span class="line">&#125;</span><br><span class="line">tree[i].num = <span class="built_in">add</span>(i * <span class="number">2</span>) + <span class="built_in">add</span>(i * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> tree[i].num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单点修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_plus</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> dis, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[i].num += k;</span><br><span class="line"><span class="keyword">if</span> (tree[i].left == tree[i].right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dis &lt;= tree[i * <span class="number">2</span>].right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">my_plus</span>(i * <span class="number">2</span>, dis, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dis &gt;= tree[i * <span class="number">2</span> + <span class="number">1</span>].left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">my_plus</span>(i * <span class="number">2</span> + <span class="number">1</span>, dis, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间查询</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= tree[i].left &amp;&amp; tree[i].right &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">ans += tree[i].num;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tree[i * <span class="number">2</span>].right &gt;= l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">search</span>(i * <span class="number">2</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tree[i * <span class="number">2</span> + <span class="number">1</span>].left &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">search</span>(i * <span class="number">2</span> + <span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">my_plus</span>(<span class="number">1</span>, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">search</span>(<span class="number">1</span>, b, c);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段树的构建"><a href="#线段树的构建" class="headerlink" title="线段树的构建"></a>线段树的构建</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[o] = &#123; l, r, <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">// 路径上记录的是区间修改值，叶子上记录的是节点权值</span></span><br><span class="line">    <span class="comment">// 将输入值赋值给线段树叶子节点，也就是说</span></span><br><span class="line">    <span class="comment">// 非叶子节点记录的只是区间修改值，所以query函数是加上路径上所有修改值和叶子节点的权值</span></span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[o].num = nums[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建左右子树</span></span><br><span class="line">    <span class="type">int</span> m = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(o * <span class="number">2</span>, l, m);</span><br><span class="line">    <span class="built_in">build</span>(o * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 区间修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[o].l &gt;= l &amp;&amp; tree[o].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[o].num += k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m = (tree[o].l + tree[o].r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modify</span>(o * <span class="number">2</span>, l, r, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modify</span>(o * <span class="number">2</span> + <span class="number">1</span>, l, r, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单点查询"><a href="#单点查询" class="headerlink" title="单点查询"></a>单点查询</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单点查询</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 将路径上的修改值，叶子上代表的原本的权值 全部加上就是最终的值</span></span><br><span class="line">    ans += tree[o].num;</span><br><span class="line">    <span class="keyword">if</span> (tree[o].l == tree[o].r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> m = (tree[o].l + tree[o].r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= m)</span><br><span class="line">        <span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span>, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总代码-1"><a href="#总代码-1" class="headerlink" title="总代码"></a>总代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> nums[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segment_tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">&#125;tree[maxn * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[o] = &#123; l, r, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将输入值赋值给线段树叶子节点，也就是说</span></span><br><span class="line"><span class="comment">// 非叶子节点记录的只是区间修改值，所以query函数需要加上路径上所有值</span></span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">tree[o].num = nums[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建左右子树</span></span><br><span class="line"><span class="type">int</span> m = l + (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">build</span>(o * <span class="number">2</span>, l, m);</span><br><span class="line"><span class="built_in">build</span>(o * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[o].l &gt;= l &amp;&amp; tree[o].r &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">tree[o].num += k;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = (tree[o].l + tree[o].r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">modify</span>(o * <span class="number">2</span>, l, r, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m &lt; r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">modify</span>(o * <span class="number">2</span> + <span class="number">1</span>, l, r, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单点查询</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans += tree[o].num;</span><br><span class="line"><span class="keyword">if</span> (tree[o].l == tree[o].r)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> m = (tree[o].l + tree[o].r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= m)</span><br><span class="line"><span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span>, x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;ST;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; nums[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ST.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y, z;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">ST.<span class="built_in">modify</span>(<span class="number">1</span>, x, y, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">ST.<span class="built_in">query</span>(<span class="number">1</span>, x);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进阶线段树（加法）"><a href="#进阶线段树（加法）" class="headerlink" title="进阶线段树（加法）"></a>进阶线段树（加法）</h2><p><a href="https://www.luogu.com.cn/problem/P3372">P3372 【模板】线段树 1 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><h3 id="线段树的构建-1"><a href="#线段树的构建-1" class="headerlink" title="线段树的构建"></a>线段树的构建</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">ll l, r, sum;</span><br><span class="line"><span class="comment">// lazytag</span></span><br><span class="line">ll lz;</span><br><span class="line">&#125;tree[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线段树的构建</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(ll i, ll l, ll r, ll input[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化节点</span></span><br><span class="line">tree[i].lz = <span class="number">0</span>;</span><br><span class="line">tree[i].l = l;</span><br><span class="line">tree[i].r = r;</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">tree[i].sum = input[l]; <span class="comment">// 将值输入给叶子节点</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">2</span> * i, l, mid, input);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">2</span> * i + <span class="number">1</span>, mid + <span class="number">1</span>, r, input);</span><br><span class="line"><span class="comment">// 最后返回时把上层节点赋值</span></span><br><span class="line">tree[i].sum = tree[<span class="number">2</span> * i].sum + tree[<span class="number">2</span> * i + <span class="number">1</span>].sum;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="push-down操作"><a href="#push-down操作" class="headerlink" title="push_down操作"></a>push_down操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(ll i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[i].lz != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 将lazytag传给左右儿子</span></span><br><span class="line">tree[i * <span class="number">2</span>].lz += tree[i].lz;</span><br><span class="line">tree[i * <span class="number">2</span> + <span class="number">1</span>].lz += tree[i].lz;</span><br><span class="line">ll mid = (tree[i].l + tree[i].r) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 这里儿子加的是父亲的lazytag，，因为本身的lazytag是使用过的，不需要再加</span></span><br><span class="line">tree[<span class="number">2</span> * i].sum += tree[i].lz * (mid - tree[i * <span class="number">2</span>].l + <span class="number">1</span>);</span><br><span class="line">tree[<span class="number">2</span> * i + <span class="number">1</span>].sum += tree[i].lz * (tree[i * <span class="number">2</span> + <span class="number">1</span>].r - mid);</span><br><span class="line">tree[i].lz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间修改-1"><a href="#区间修改-1" class="headerlink" title="区间修改"></a>区间修改</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll i, ll l, ll r, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 在范围内</span></span><br><span class="line"><span class="keyword">if</span> (tree[i].l &gt;= l &amp;&amp; tree[i].r &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 更新节点值并记录lazytag</span></span><br><span class="line">tree[i].sum += k * (tree[i].r - tree[i].l + <span class="number">1</span>);</span><br><span class="line">tree[i].lz += k;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果不完全包括，则将lazytag向下传递</span></span><br><span class="line"><span class="built_in">push_down</span>(i);</span><br><span class="line">    <span class="comment">// 并处理左右儿子中有交集的部分</span></span><br><span class="line"><span class="keyword">if</span> (tree[i * <span class="number">2</span>].r &gt;= l)</span><br><span class="line"><span class="built_in">add</span>(<span class="number">2</span> * i, l, r, k);</span><br><span class="line"><span class="keyword">if</span> (tree[i * <span class="number">2</span> + <span class="number">1</span>].l &lt;= r)</span><br><span class="line"><span class="built_in">add</span>(<span class="number">2</span> * i + <span class="number">1</span>, l, r, k);</span><br><span class="line">    <span class="comment">// 返回时更新上层节点</span></span><br><span class="line">tree[i].sum = tree[i * <span class="number">2</span>].sum + tree[i * <span class="number">2</span> + <span class="number">1</span>].sum;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间查询-1"><a href="#区间查询-1" class="headerlink" title="区间查询"></a>区间查询</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">search</span><span class="params">(ll i, ll l, ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 完全包括在内，直接返回，并不用向下查询了</span></span><br><span class="line"><span class="keyword">if</span> (tree[i].l &gt;= l &amp;&amp; tree[i].r &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> tree[i].sum;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 否则先向下传递自身的lazytag</span></span><br><span class="line"><span class="built_in">push_down</span>(i);</span><br><span class="line">    <span class="comment">// 然后再向左右子树查询</span></span><br><span class="line">ll num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (tree[<span class="number">2</span> * i].r &gt;= l)</span><br><span class="line">num += <span class="built_in">search</span>(<span class="number">2</span> * i, l, r);</span><br><span class="line"><span class="keyword">if</span> (tree[i * <span class="number">2</span> + <span class="number">1</span>].l &lt;= r)</span><br><span class="line">num += <span class="built_in">search</span>(i * <span class="number">2</span> + <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总代码-2"><a href="#总代码-2" class="headerlink" title="总代码"></a>总代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> ll N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">ll l, r, sum;</span><br><span class="line"><span class="comment">// lazytag</span></span><br><span class="line">ll lz;</span><br><span class="line">&#125;tree[N];</span><br><span class="line"></span><br><span class="line">ll input[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线段树的构建</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(ll i, ll l, ll r, ll input[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[i].lz = <span class="number">0</span>;</span><br><span class="line">tree[i].l = l;</span><br><span class="line">tree[i].r = r;</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">tree[i].sum = input[l]; <span class="comment">// 将值输入给叶子节点</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">2</span> * i, l, mid, input);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">2</span> * i + <span class="number">1</span>, mid + <span class="number">1</span>, r, input);</span><br><span class="line"><span class="comment">// 最后返回时把上层节点赋值</span></span><br><span class="line">tree[i].sum = tree[<span class="number">2</span> * i].sum + tree[<span class="number">2</span> * i + <span class="number">1</span>].sum;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(ll i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[i].lz != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">tree[i * <span class="number">2</span>].lz += tree[i].lz;</span><br><span class="line">tree[i * <span class="number">2</span> + <span class="number">1</span>].lz += tree[i].lz;</span><br><span class="line">ll mid = (tree[i].l + tree[i].r) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 这里儿子加的是父亲的lazytag，，因为本身的lazytag是使用过的，不需要再加</span></span><br><span class="line">tree[<span class="number">2</span> * i].sum += tree[i].lz * (mid - tree[i * <span class="number">2</span>].l + <span class="number">1</span>);</span><br><span class="line">tree[<span class="number">2</span> * i + <span class="number">1</span>].sum += tree[i].lz * (tree[i * <span class="number">2</span> + <span class="number">1</span>].r - mid);</span><br><span class="line">tree[i].lz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll i, ll l, ll r, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[i].l &gt;= l &amp;&amp; tree[i].r &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">tree[i].sum += k * (tree[i].r - tree[i].l + <span class="number">1</span>);</span><br><span class="line">tree[i].lz += k;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">push_down</span>(i);</span><br><span class="line"><span class="keyword">if</span> (tree[i * <span class="number">2</span>].r &gt;= l)</span><br><span class="line"><span class="built_in">add</span>(<span class="number">2</span> * i, l, r, k);</span><br><span class="line"><span class="keyword">if</span> (tree[i * <span class="number">2</span> + <span class="number">1</span>].l &lt;= r)</span><br><span class="line"><span class="built_in">add</span>(<span class="number">2</span> * i + <span class="number">1</span>, l, r, k);</span><br><span class="line">tree[i].sum = tree[i * <span class="number">2</span>].sum + tree[i * <span class="number">2</span> + <span class="number">1</span>].sum;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">search</span><span class="params">(ll i, ll l, ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[i].l &gt;= l &amp;&amp; tree[i].r &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> tree[i].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(i);</span><br><span class="line">ll num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (tree[<span class="number">2</span> * i].r &gt;= l)</span><br><span class="line">num += <span class="built_in">search</span>(<span class="number">2</span> * i, l, r);</span><br><span class="line"><span class="keyword">if</span> (tree[i * <span class="number">2</span> + <span class="number">1</span>].l &lt;= r)</span><br><span class="line">num += <span class="built_in">search</span>(i * <span class="number">2</span> + <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; input[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n, input);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">ll a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ll x, y, k;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>, x, y, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">ll x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">search</span>(<span class="number">1</span>, x, y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态开点线段树"><a href="#动态开点线段树" class="headerlink" title="动态开点线段树"></a>动态开点线段树</h2><p>[动态开点线段树 - Locked_Fog - 洛谷博客 (luogu.com.cn)](<a href="https://www.luogu.com.cn/blog/Locked-Fog/dong-tai-kai-dian-xian-duan-shu#:~:text=1%E3%80%81%E5%8A%A8%E6%80%81%E5%BC%80%E7%82%B9%E7%BA%BF%E6%AE%B5%E6%A0%91">https://www.luogu.com.cn/blog/Locked-Fog/dong-tai-kai-dian-xian-duan-shu#:~:text=1、动态开点线段树</a> 1 1、基本思路 对于线段树这种暴力结构，其空间效率是比较底下的 O (4*n) O(4∗n) 。,2、核心代码 … 3 3、例题 … 4 4、练习 )</p><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>对于线段树这种暴力结构，其空间效率是比较底下的 <em>O</em>(4∗<em>n</em>) 。因此，我们想到一个比较优秀的方法来优化——动态开点。</p><p>也就是说，其实我们不需要一上来就把所有的节点全部建立起来，只需要在用到一个节点的时候再建立一个节点就可以了。</p><blockquote><p><strong>注意</strong></p><p>使用动态开点线段树的话，节点的下标将是无序的，因此必须建立结构体或用两个数组来分别保存一个节点的左右子节点</p></blockquote><h3 id="总代码-3"><a href="#总代码-3" class="headerlink" title="总代码"></a>总代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll val[maxn &lt;&lt; <span class="number">1</span>], lazy[maxn &lt;&lt; <span class="number">1</span>]; <span class="comment">// 涉及区间修改</span></span><br><span class="line"><span class="type">int</span> lson[maxn &lt;&lt; <span class="number">1</span>], rson[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="comment">// cnt 相当于一个编号，记录所有节点的序号</span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span>&amp; k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">val[k] = val[lson[k]] + val[rson[k]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 如果lazy不为0，就推向左右儿子</span></span><br><span class="line"><span class="keyword">if</span> (lazy[k])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 如果左右儿子不存在就开点</span></span><br><span class="line"><span class="keyword">if</span> (!lson[k])lson[k] = ++cnt;</span><br><span class="line"><span class="keyword">if</span> (!rson[k])rson[k] = ++cnt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lazy传递给儿子</span></span><br><span class="line">lazy[lson[k]] += lazy[k];</span><br><span class="line">lazy[rson[k]] += lazy[k];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并将儿子的值加上lazy</span></span><br><span class="line"><span class="type">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">val[lson[k]] += (m - l + <span class="number">1</span>) * lazy[k];</span><br><span class="line">val[rson[k]] += (r - m) * lazy[k];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递完清除lazy</span></span><br><span class="line">lazy[k] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用单点修改的方法建树, 递归找到目标点修改，如果目标点不存在就创建</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span>&amp; k, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> v, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// &amp;k相当于一个节点的引用，如果当前节点不存在就创建</span></span><br><span class="line"><span class="comment">// 而 v 是需要修改的节点的编号</span></span><br><span class="line"><span class="keyword">if</span> (!k)k = ++cnt;</span><br><span class="line"><span class="comment">// 叶子节点直接赋值</span></span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">val[k] = x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (v &lt;= m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">build</span>(lson[k], l, m, v, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">build</span>(rson[k], m + <span class="number">1</span>, r, v, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span>&amp; k, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 如果不存在就新建节点</span></span><br><span class="line"><span class="keyword">if</span> (!k)k = ++cnt;</span><br><span class="line"><span class="comment">// 节点被完全包括了</span></span><br><span class="line"><span class="keyword">if</span> (L &lt;= l &amp;&amp; R &gt;= r)</span><br><span class="line">&#123;</span><br><span class="line">lazy[k] += x;</span><br><span class="line">val[k] += (r - l + <span class="number">1</span>) * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(k, l, r);</span><br><span class="line"><span class="type">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">update</span>(lson[k], l, m, L, R, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m &lt; R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">update</span>(rson[k], m + <span class="number">1</span>, r, L, R, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!k)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)<span class="keyword">return</span> val[k];</span><br><span class="line"><span class="built_in">pushdown</span>(k, l, r);</span><br><span class="line"><span class="type">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= m)</span><br><span class="line">&#123;</span><br><span class="line">ans += <span class="built_in">query</span>(lson[k], l, m, L, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m &lt; R)</span><br><span class="line">&#123;</span><br><span class="line">ans += <span class="built_in">query</span>(rson[k], m + <span class="number">1</span>, r, L, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> temp = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="built_in">build</span>(temp, <span class="number">1</span>, n, i, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> q;</span><br><span class="line">cin &gt;&gt; q;</span><br><span class="line"><span class="keyword">if</span>(q == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L, R, x;</span><br><span class="line">cin &gt;&gt; L &gt;&gt; R &gt;&gt; x;</span><br><span class="line"><span class="type">int</span> temp = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">update</span>(temp, <span class="number">1</span>, n, L, R, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> L, R;</span><br><span class="line">cin &gt;&gt; L &gt;&gt; R;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, L, R));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线段树&quot;&gt;&lt;a href=&quot;#线段树&quot; class=&quot;headerlink&quot; title=&quot;线段树&quot;&gt;&lt;/a&gt;线段树&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;参考文献&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
    <category term="线段树" scheme="https://1xueyu1.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>逆向基础</title>
    <link href="https://1xueyu1.github.io/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    <id>https://1xueyu1.github.io/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/</id>
    <published>2023-11-24T14:30:50.000Z</published>
    <updated>2023-12-06T16:36:53.748Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考文章</strong>（系列）–&gt; <strong>强推</strong></p><p><a href="https://www.52pojie.cn/thread-1358649-1-1.html">玩玩破解，写给新人看（第一集） - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a><strong>（完全零基础也能看）</strong></p><h1 id="破解的坑和思路"><a href="#破解的坑和思路" class="headerlink" title="破解的坑和思路"></a>破解的坑和思路</h1><h2 id="一、我们的破解对象是谁？"><a href="#一、我们的破解对象是谁？" class="headerlink" title="一、我们的破解对象是谁？"></a>一、我们的破解对象是谁？</h2><p><strong>一是破解软件的注册验证。</strong><br>    <strong>二是破解软件的反调试功能。</strong></p><h3 id="（一）软件的注册验证。"><a href="#（一）软件的注册验证。" class="headerlink" title="（一）软件的注册验证。"></a>（一）软件的注册验证。</h3><p>总体分为本地验证和网络验证。</p><p>本地验证又分为重启验证和非重启验证。</p><p>重启验证包括：注册表验证、加密狗验证、文件验证（文件验证里有一个INI文件验证比较特殊，因为读取这个文件有特殊的函数）</p><p>非重启验证包括：账号密码验证、机器码验证等。</p><h3 id="（二）反调试功能"><a href="#（二）反调试功能" class="headerlink" title="（二）反调试功能"></a>（二）反调试功能</h3><p>所谓反调试，就是对用户使用调试器（对OD、IDA等调试工具）进行反击。</p><p>反调试的手段目前主要有两种：检测处理和干扰处理。</p><h4 id="一、按照检测的时间和方式不同，粗略分为三类："><a href="#一、按照检测的时间和方式不同，粗略分为三类：" class="headerlink" title="一、按照检测的时间和方式不同，粗略分为三类："></a>一、按照检测的时间和方式不同，粗略分为三类：</h4><h5 id="1、调试前：对用户是否正在使用调试器进行静态判断。"><a href="#1、调试前：对用户是否正在使用调试器进行静态判断。" class="headerlink" title="1、调试前：对用户是否正在使用调试器进行静态判断。"></a>1、调试前：对用户是否正在使用调试器进行静态判断。</h5><p>通俗说就是你是不是打开了调试器？</p><h5 id="2、调试中：对用户正在使用调试器的行为进行动态识别。"><a href="#2、调试中：对用户正在使用调试器的行为进行动态识别。" class="headerlink" title="2、调试中：对用户正在使用调试器的行为进行动态识别。"></a>2、调试中：对用户正在使用调试器的行为进行动态识别。</h5><p>主要有F2断点检测、硬件断点检测、CRC数据完整性校验、时钟检测等方式。</p><p>通俗说就是你是不是正在用调试器对软件进行调试和修改？</p><h5 id="3、调试后：对用户修改后的软件的完整性进行检测。"><a href="#3、调试后：对用户修改后的软件的完整性进行检测。" class="headerlink" title="3、调试后：对用户修改后的软件的完整性进行检测。"></a>3、调试后：对用户修改后的软件的完整性进行检测。</h5><p>通俗说就是软件是否被修改过？文件的大小、相关数据、执行流程等有无变化等。</p><h4 id="二、干扰处理"><a href="#二、干扰处理" class="headerlink" title="二、干扰处理"></a>二、干扰处理</h4><p>加壳、加花、虚拟化代码。</p><p>目前大家破解中最头疼的就是VM壳，这个壳的特点就是让软件的代码在OD里无法正常识别和跟踪。</p><p>加花是对代码加了花指令，增加了一些无意义的代码，让OD识别有误。从目前反调试的趋势来看，对代码的干扰是主流，就是让你在调试器里打开后看不懂。</p><h2 id="OD使用技巧"><a href="#OD使用技巧" class="headerlink" title="OD使用技巧"></a>OD使用技巧</h2><h3 id="Ctrl-F9-运行到当前函数结尾"><a href="#Ctrl-F9-运行到当前函数结尾" class="headerlink" title="Ctrl + F9 运行到当前函数结尾"></a>Ctrl + F9 运行到当前函数结尾</h3><h3 id="ALT-F9-直接从系统领空运行到程序领空"><a href="#ALT-F9-直接从系统领空运行到程序领空" class="headerlink" title="ALT + F9 直接从系统领空运行到程序领空"></a>ALT + F9 直接从系统领空运行到程序领空</h3><h1 id="易语言程序的快速破解"><a href="#易语言程序的快速破解" class="headerlink" title="易语言程序的快速破解"></a>易语言程序的快速破解</h1><h2 id="一、判断软件是否是易语言编写的"><a href="#一、判断软件是否是易语言编写的" class="headerlink" title="一、判断软件是否是易语言编写的"></a>一、判断软件是否是易语言编写的</h2><p>在OD里按CTRL+G转到401000处, 401000处的汇编代码，如果是xor eax,eax就说明是易语言编写的程序。</p><h2 id="二、易语言程序快速破解的方法"><a href="#二、易语言程序快速破解的方法" class="headerlink" title="二、易语言程序快速破解的方法"></a>二、易语言程序快速破解的方法</h2><h3 id="方法一：采用“两头找线索”的通用办法"><a href="#方法一：采用“两头找线索”的通用办法" class="headerlink" title="方法一：采用“两头找线索”的通用办法"></a><strong>方法一：采用“两头找线索”的通用办法</strong></h3><p>看看在验证后的结果中有没有敏感字符串、弹窗等等。</p><p>或者是对验证前获取注册表、文件、输入文本的API下断点。</p><h3 id="方法二：对按钮事件下断点"><a href="#方法二：对按钮事件下断点" class="headerlink" title="方法二：对按钮事件下断点"></a><strong>方法二：对按钮事件下断点</strong></h3><p>通过搜索二进制字串FF55FC5F5E直接断到按钮事件。红色箭头指的CALL 就是按钮事件的子程序。</p><p>这个CALL里面的代码就是你点击按钮后会执行的代码。</p><p>**程序的验证流程: **</p><p>点击按钮 → 读取假码 → 算法CALL → 验证CALL → 验证结果</p><p>只要是易语言程序，它的按钮事件CALL的汇编代码就是FF55FC5F5E。</p><p>VB程序的按钮事件的特征码是816C24。</p><p>你如果找到了按钮事件CALL，</p><p>你通过F8就可以清楚的看到验证的整个流程，</p><p>所以我们破解易语言程序，首选就是这个方法。</p><h3 id="三、PUSH窗体大法"><a href="#三、PUSH窗体大法" class="headerlink" title="三、PUSH窗体大法"></a>三、PUSH窗体大法</h3><p>第一步：搜二进制字串FF25，找到第一个弹出窗口的窗口ID</p><p>第二步：搜所有命令PUSH 10001，找到其他窗口的窗口ID。</p><p>第三步：替换窗口ID</p><p>比如外挂程序，你打开后会有一个登陆界面,你输入正确的账号和密码，登陆后才会出现外挂功能窗口。我们实际需要的是外挂功能窗口，不是这个登陆窗口。那么易语言编写的程序，就可以用窗口ID替换这个方法，直接显示出外挂功能窗口。这个方法在破解外挂方面是最常用的。</p><p>但是一些外挂在程序里写了一些“恶意代码”，称为“暗桩”。</p><p>你直接替换窗口ID，它可能会进行检测，然后对你进行报复。</p><h3 id="四、文本比较大法"><a href="#四、文本比较大法" class="headerlink" title="四、文本比较大法"></a>四、文本比较大法</h3><p>我们都知道，程序验证的最核心代码的位置就是真假码的比较。</p><p>操作方法如下：</p><p>OD加载程序后，转到401000处。</p><p>然后搜索命令 test edx,3</p><h3 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h3><p>1、搜“注册失败”字符串</p><p>2、对MessageBoxA函数下断点</p><p>3、F12暂停法</p><p>4、对GetWindowsTextA函数下断点</p><p>5、易语言按钮事件（FF55FC5F5E）</p><p>6、易语言文本比较通杀命令（test edx,3）</p><h1 id="CrackMe-001（Delphi）"><a href="#CrackMe-001（Delphi）" class="headerlink" title="CrackMe 001（Delphi）"></a>CrackMe 001（Delphi）</h1><h2 id="去除NAG"><a href="#去除NAG" class="headerlink" title="去除NAG"></a>去除NAG</h2><p>搜索字符串或者<strong>ShowWindow(推荐)</strong></p><h2 id="破解输入账号和密码的验证"><a href="#破解输入账号和密码的验证" class="headerlink" title="破解输入账号和密码的验证"></a>破解输入账号和密码的验证</h2><p>搜索字符串或者<strong>MessageBoxA</strong></p><h2 id="破解输入密码的验证"><a href="#破解输入密码的验证" class="headerlink" title="破解输入密码的验证"></a>破解输入密码的验证</h2><p>搜索字符串或者<strong>MessageBoxA</strong></p><h2 id="Delphi程序专用的工具DarkDe4"><a href="#Delphi程序专用的工具DarkDe4" class="headerlink" title="Delphi程序专用的工具DarkDe4"></a>Delphi程序专用的工具DarkDe4</h2><p>DD使用方法：把CM拖入DD后，会提示转储成功，点是，接着又会出现两次对话框都点否，然后点“过程”。</p><p>你会看到每一个按钮的按钮事件，从而一步就到达关键代码处，比搜字符串和API函数更简单暴力。</p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231201014058435.png" alt="image-20231201014058435"></p><h1 id="CrackMe-002-VB"><a href="#CrackMe-002-VB" class="headerlink" title="CrackMe 002(VB)"></a>CrackMe 002(VB)</h1><p>1、搜索字符串。</p><p>2、弹窗</p><p><strong>阶段总结：VB编写的软件可以在_VbaStrCmp函数下断点，因为这个函数往往在真假码比较时使用。</strong></p><h2 id="函数块（搜索二进制字串FF25）"><a href="#函数块（搜索二进制字串FF25）" class="headerlink" title="函数块（搜索二进制字串FF25）"></a>函数块（搜索二进制字串FF25）</h2><p>还记得我们以前分析易语言时，可以用搜索二进制字串FF25找到易语言体，我们同样用这种方法在VB程序中试试看。见下图：</p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231201015840456.png" alt="image-20231201015840456"></p><p>会看到一连串的JMP，这些JMP后面都是函数。是的，这些函数就是这个VB程序会调用到的API函数。</p><h2 id="涉及函数"><a href="#涉及函数" class="headerlink" title="涉及函数"></a>涉及函数</h2><h3 id="rtcMsgBox"><a href="#rtcMsgBox" class="headerlink" title="rtcMsgBox"></a>rtcMsgBox</h3><p>这个是VB程序特有的调用弹窗的函数，替代了我们在其他语言编写的程序中经常用的MessageBoxA。</p><h3 id="VbaStrCmp"><a href="#VbaStrCmp" class="headerlink" title="_VbaStrCmp"></a>_VbaStrCmp</h3><p>字符串比较函数_VbaStrCmp。</p><p><strong>阶段总结：在VB程序中，要对rtcMsgBox函数下断点才能断下弹窗。</strong></p><h3 id="按钮事件的首地址816C24"><a href="#按钮事件的首地址816C24" class="headerlink" title="按钮事件的首地址816C24"></a>按钮事件的首地址816C24</h3><p>搜索<strong>二进制字串816C24</strong></p><p>分别在下面有一个JMP，这两个JMP后面的地址就是点击“OK”按钮和“cancel”按钮后的按钮事件的首地址。</p><h2 id="VB-Decompiler工具"><a href="#VB-Decompiler工具" class="headerlink" title="VB Decompiler工具"></a>VB Decompiler工具</h2><p><strong>总结：以后遇到VB程序，如果是没有加壳的，直接用VB Decompiler工具找到按钮事件位置，即可快速破解。</strong></p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231201020432614.png" alt="image-20231201020432614"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>1、VB程序与其他语言编写的程序在API函数名称不同，要用专门的API函数才可以下断。</strong></p><p><strong>2、破解VB程序有专门的核武器，就是VB Decompiler。</strong></p><p><strong>3、可以通过查询二进制字串816C24快速找到按钮事件的首地址。</strong></p><h1 id="CrackMe-003-VB"><a href="#CrackMe-003-VB" class="headerlink" title="CrackMe 003(VB)"></a>CrackMe 003(VB)</h1><h2 id="去除NAG窗口"><a href="#去除NAG窗口" class="headerlink" title="去除NAG窗口"></a>去除NAG窗口</h2><p>我们还记得易语言有个PUSH窗体大法吧。</p><p>就是把功能窗口ID替换到主窗口ID就可以实现跳过主窗口。</p><p>VB没有PUSH窗体大法，但是有4C大法。</p><p><a href="https://www.52pojie.cn/thread-1368568-1-1.html">玩玩破解，写给新人看（第二十一集） - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><h1 id="VB程序破解方法综述"><a href="#VB程序破解方法综述" class="headerlink" title="VB程序破解方法综述"></a><strong>VB</strong>程序破解方法综述</h1><p>VB程序按照编译方式可分为两大类：</p><p>一类是NATIVE CODE，一类是P CODE。</p><p>其中P CODE方式编写的VB程序，破解难度大，不适合新人学习。</p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231201114721579.png" alt="image-20231201114721579"></p><p>对于NATIVE CODE的VB程序</p><h2 id="通用方法：搜字符串和下API函数断点。"><a href="#通用方法：搜字符串和下API函数断点。" class="headerlink" title="通用方法：搜字符串和下API函数断点。"></a><strong>通用方法：搜字符串和下API函数断点。</strong></h2><p>比如弹窗API函数，VB里的名称是rtcMsgBox，在其他语言编写的程序里是MessageBox。</p><h2 id="特殊方法："><a href="#特殊方法：" class="headerlink" title="特殊方法："></a><strong>特殊方法：</strong></h2><p>1、用816C24特征码法，快速定位按钮事件。在代码区搜索二进制字串816C24，找到的代码下面一行JMP后面的地址就是按钮事件的首地址，你在首地址下断点即可。</p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231201115035123.png" alt="image-20231201115035123"></p><h1 id="CrackMe-004-Delphi"><a href="#CrackMe-004-Delphi" class="headerlink" title="CrackMe 004(Delphi)"></a>CrackMe 004(Delphi)</h1><h2 id="爆破法"><a href="#爆破法" class="headerlink" title="爆破法"></a>爆破法</h2><h3 id="字符串搜索"><a href="#字符串搜索" class="headerlink" title="字符串搜索"></a>字符串搜索</h3><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231201222650028.png" alt="image-20231201222650028">找到<strong>注册成功！</strong>到代码往上找到跳过成功的关键跳转然后直接nop掉，爆破成功</p><h2 id="注册算法"><a href="#注册算法" class="headerlink" title="注册算法"></a>注册算法</h2><p>在<strong>MessageBoxA</strong>函数, <strong>字符串比较</strong>函数下断点都没有断下</p><p>然后没有办法想起了Delphi工具<strong>DarkD4</strong></p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231201223305688.png" alt="image-20231201223305688"></p><p>chkcode模块， 面板（单击，双击）模块</p><p>然后在chkcode的RVA下断点，输入用户名:Rayii， 密码:1，debug过程发现可疑字符串</p><p><strong>黑头Sun Bird</strong></p><p><strong>dseloffc-012-OK</strong></p><p><strong>Rayii</strong></p><p>然后还有一串长的  <strong>黑头Sun Bird10dseloffc-012-OKRayii</strong>  确定这就是注册码了</p><p>因为我看的别人的解答，我就不说我的思路了，这个10是用户名的长度+5</p><p><a href="https://www.52pojie.cn/thread-604635-1-1.html">初练160个CrakeMe程序之004 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><h1 id="CrackMe-005-Delphi-upx"><a href="#CrackMe-005-Delphi-upx" class="headerlink" title="CrackMe 005(Delphi+upx)"></a>CrackMe 005(Delphi+upx)</h1><p>这个程序的破解太难了，我完全参考的这篇帖子：</p><p><a href="https://www.52pojie.cn/thread-366291-1-1.html">160个CrackMe练手之005 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=1740493&highlight=CrackMe005">破解练习-CRACKME005 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>第一步：新建一个路径为X:\ajj.126.c0m\j\o\j\o\ok.txt的文本文件，文件内容的二进制为 20 61 6A 6A D0 B4 B5 C4 43 4B 6D 65D5 E6 C0 C3 21 FF FF，给出二进制的原因主要是因为后面两个字符FF FF打文本打不出来，这句话的文本显示为“ajj写的CKme真烂!这个文件的作用就是会在界面中多显示出一个输入框（下面记为Edit2），但是初始是禁用的，输不了东西。</p></li><li><p>第二步：打开程序，初始化完成之后，鼠标右键点击“注册”按钮5次。记住一定是鼠标右键，而且必须是点击5次;</p></li><li><p>第三步：在显示图片的图片框中双击没有图片显示的地方；这一步完成之后，输入框Edit2就可以输入内容了。</p></li><li><p>第四步：输入注册名和Edit2,。这两个输入的内容也是有要求的，注册名长度必须是3的倍数，Edit2输入的内容长度必须为8，且第2个字符为’_’，第6个字符为’,’。</p></li><li><p>第五步：输入完成之后，双击Edit2;</p></li><li><p>第六步：在图片3（“性相近“）出现时，移动鼠标从界面的右下角外部进入程序界面；</p></li><li><p>第七步：在图片2（“性本善“）出现时，移动鼠标从界面的左下角外部进入程序界面；</p></li><li><p>第八步：通过计算有多种答案</p></li></ol><h2 id="利用DarkD4"><a href="#利用DarkD4" class="headerlink" title="利用DarkD4"></a>利用DarkD4</h2><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231202113453387.png" alt="image-20231202113453387"></p><ul><li><code>Timer1Timer</code>计时器作用</li><li><code>Button1MouseDown</code>鼠标左键或右键按下就会发生</li><li><code>Panel1DblClick</code>面板双击触发的事件</li></ul><h2 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h2><h3 id="字符串搜索-1"><a href="#字符串搜索-1" class="headerlink" title="字符串搜索"></a>字符串搜索</h3><p>找到注册成功的字符串，往上看到有<strong>5个</strong>跳转</p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231202155821402.png" alt="image-20231202155821402"></p><p>找到这些ds:[ebx+0x304]（第一步）、ds:[ebx+0x308]（第二步、第三步）、ds:[ebx+0x310]（第六步、第七步）、ds:[ebx+0x318]（第8步）、ds:[ebx+0x314]（第六步、第七步）内存地址是在哪里进行赋值的。唯一能做的一件事就是查看所有的反汇编代码把这些地址统统揪出来，然后仔细的分析在哪里可能会完成赋值操作，以及要完成所要的赋值操作要满足什么条件。</p><p><strong>在这里我再插入一段可能对于破Delphi程序比较适用的方法。我们从上面找到的那段爆破关键代码段的第一行地址004473E4，在OD中选中这一行然后右键à查看参考à选定命令，这时候就会出现下面的结果:</strong></p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231202160359568.png" alt="image-20231202160359568"></p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231202160454874.png" alt="image-20231202160454874"></p><p>这些都是在定义鼠标按下，鼠标移动，定时器等消息的处理过程，而dd CKme002.0044xxxx这个就是对应的消息处理函数，要知道上面列出的那些内存地址如何赋值，必定离不开对这些消息处理函数的跟踪，也就是要在这些地址上面下断点，但不要忙着把断点都下了，一次都下了也没什么好处，我们还是从上面列出的内存地址一个一个开始解决，用到时再下断点也不迟。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">00446A3A      D0            db D0</span><br><span class="line">00446A3B      02            db 02</span><br><span class="line">00446A3C      00            db 00</span><br><span class="line">00446A3D      00            db 00</span><br><span class="line">00446A3E      00            db 00</span><br><span class="line">00446A3F      00            db 00</span><br><span class="line">00446A40   .  06            db 06</span><br><span class="line">00446A41   .  50 61 6E 65 6&gt;ascii &quot;Panel1&quot;</span><br><span class="line">00446A47      D4            db D4</span><br><span class="line">00446A48      02            db 02</span><br><span class="line">00446A49      00            db 00</span><br><span class="line">00446A4A      00            db 00</span><br><span class="line">00446A4B      01            db 01</span><br><span class="line">00446A4C      00            db 00</span><br><span class="line">00446A4D   .  06            db 06</span><br><span class="line">00446A4E   .  54 69 6D 65 7&gt;ascii &quot;Timer1&quot;</span><br><span class="line">00446A54      D8            db D8</span><br><span class="line">00446A55      02            db 02</span><br><span class="line">00446A56      00            db 00</span><br><span class="line">00446A57      00            db 00</span><br><span class="line">00446A58      02            db 02</span><br><span class="line">00446A59      00            db 00</span><br><span class="line">00446A5A   .  06            db 06</span><br><span class="line">00446A5B   .  49 6D 61 67 6&gt;ascii &quot;Image1&quot;</span><br><span class="line">00446A61      DC            db DC</span><br><span class="line">00446A62      02            db 02</span><br><span class="line">00446A63      00            db 00</span><br><span class="line">00446A64      00            db 00</span><br><span class="line">00446A65      02            db 02</span><br><span class="line">00446A66      00            db 00</span><br><span class="line">00446A67   .  06            db 06</span><br><span class="line">00446A68   .  49 6D 61 67 6&gt;ascii &quot;Image2&quot;</span><br><span class="line">00446A6E      E0            db E0</span><br><span class="line">00446A6F      02            db 02</span><br><span class="line">00446A70      00            db 00</span><br><span class="line">00446A71      00            db 00</span><br><span class="line">00446A72      02            db 02</span><br><span class="line">00446A73      00            db 00</span><br><span class="line">00446A74   .  06            db 06</span><br><span class="line">00446A75   .  49 6D 61 67 6&gt;ascii &quot;Image3&quot;</span><br><span class="line">00446A7B      E4            db E4</span><br><span class="line">00446A7C      02            db 02</span><br><span class="line">00446A7D      00            db 00</span><br><span class="line">00446A7E      00            db 00</span><br><span class="line">00446A7F      02            db 02</span><br><span class="line">00446A80      00            db 00</span><br><span class="line">00446A81   .  06            db 06</span><br><span class="line">00446A82   .  49 6D 61 67 6&gt;ascii &quot;Image4&quot;</span><br><span class="line">00446A88      E8            db E8</span><br><span class="line">00446A89      02            db 02</span><br><span class="line">00446A8A      00            db 00</span><br><span class="line">00446A8B      00            db 00</span><br><span class="line">00446A8C      03            db 03</span><br><span class="line">00446A8D      00            db 00</span><br><span class="line">00446A8E   .  05            db 05</span><br><span class="line">00446A8F   .  45 64 69 74 3&gt;ascii &quot;Edit1&quot;</span><br><span class="line">00446A94      EC            db EC</span><br><span class="line">00446A95      02            db 02</span><br><span class="line">00446A96      00            db 00</span><br><span class="line">00446A97      00            db 00</span><br><span class="line">00446A98      04            db 04</span><br><span class="line">00446A99      00            db 00</span><br><span class="line">00446A9A   .  07            db 07</span><br><span class="line">00446A9B   .  42 75 74 74 6&gt;ascii &quot;Button1&quot;</span><br><span class="line">00446AA2      F0            db F0</span><br><span class="line">00446AA3      02            db 02</span><br><span class="line">00446AA4      00            db 00</span><br><span class="line">00446AA5      00            db 00</span><br><span class="line">00446AA6      03            db 03</span><br><span class="line">00446AA7      00            db 00</span><br><span class="line">00446AA8   .  05            db 05</span><br><span class="line">00446AA9   .  45 64 69 74 3&gt;ascii &quot;Edit2&quot;</span><br><span class="line">00446AAE      F4            db F4</span><br><span class="line">00446AAF      02            db 02</span><br><span class="line">00446AB0      00            db 00</span><br><span class="line">00446AB1      00            db 00</span><br><span class="line">00446AB2      05            db 05</span><br><span class="line">00446AB3      00            db 00</span><br><span class="line">00446AB4   .  06            db 06</span><br><span class="line">00446AB5   .  4C 61 62 65 6&gt;ascii &quot;Label1&quot;</span><br><span class="line">00446ABB      F8            db F8</span><br><span class="line">00446ABC      02            db 02</span><br><span class="line">00446ABD      00            db 00</span><br><span class="line">00446ABE      00            db 00</span><br><span class="line">00446ABF      05            db 05</span><br><span class="line">00446AC0      00            db 00</span><br><span class="line">00446AC1   .  06            db 06</span><br><span class="line">00446AC2   .  4C 61 62 65 6&gt;ascii &quot;Label2&quot;</span><br><span class="line">00446AC8      FC            db FC</span><br><span class="line">00446AC9      02            db 02</span><br><span class="line">00446ACA      00            db 00</span><br><span class="line">00446ACB      00            db 00</span><br><span class="line">00446ACC      05            db 05</span><br><span class="line">00446ACD      00            db 00</span><br><span class="line">00446ACE   .  06            db 06</span><br><span class="line">00446ACF   .  4C 61 62 65 6&gt;ascii &quot;Label3&quot;</span><br><span class="line">00446AD5      00            db 00</span><br><span class="line">00446AD6      03            db 03</span><br><span class="line">00446AD7      00            db 00</span><br><span class="line">00446AD8      00            db 00</span><br><span class="line">00446AD9      01            db 01</span><br><span class="line">00446ADA      00            db 00</span><br><span class="line">00446ADB   .  06            db 06</span><br><span class="line">00446ADC   .  54 69 6D 65 7&gt;ascii &quot;Timer2&quot;</span><br></pre></td></tr></table></figure><h2 id="第一步-ebx-304-0xC34"><a href="#第一步-ebx-304-0xC34" class="headerlink" title="第一步[ebx + 304] !&#x3D; 0xC34"></a>第一步[ebx + 304] !&#x3D; 0xC34</h2><p> 由于查上述内存地址在哪些地方有赋值操作要通读反汇编代码，所以可以选择任意一款静态反汇编工具来搜索，这里选用的是W32DAsm。</p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231202161246384.png" alt="image-20231202161246384"></p><p>回到OD查找这两行地址所在的函数头，就会发现刚好是在窗台创建FormCreate的消息处理函数dd CKme002.00446C1C里面，果断下断点，重启程序、F9然后就进入了这个断点，</p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231202165425115.png" alt="image-20231202165425115"></p><p>我换了个地址保存后，分析新的程序，建好文件后输入内容111111，</p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231202170605357.png" alt="image-20231202170605357"></p><p>进入文件内容对比函数：</p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231202170732872.png" alt="image-20231202170732872"></p><p>得到文件内容需要是：<code>ajj写的CKme真烂!</code>由于后面两个无法输入，需使用二进制编辑，其二进制数据为<code>20 61 6A 6A D0 B4 B5 C4 43 4B 6D 65 D5 E6 C0 C3 21 FF FF</code></p><p>如果没有该文件或文件内容不对 <code>[ebx + 304]</code>就会被赋值为<code>0xC34</code></p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231202175924857.png" alt="image-20231202175924857"></p><p>我是用这个软件的hex模式输入二进制代码过的</p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231202180144409.png" alt="image-20231202180144409"></p><p>为了方便可以直接改为jmp</p><h3 id="启用输入框"><a href="#启用输入框" class="headerlink" title="启用输入框"></a>启用输入框</h3><p>然后第二个输入框就显示出来了， 但是这个输入框是禁用的，所以我们要找到启用它的办法，我们注意到与输入框相关的消息处理函数只有一个Edit2DblClick，对应函数地址为<code>dd CKme002.00446FF8</code>，那么这个对应关系也容易确定了。只要我们在00446FF8这个地址处下断，双击一下能不能断下来就可以了。</p><p>两个输入框Edit1和Edit2的ID（暂且称为ID吧，我不知道Delphi如何称呼，但MFC里面叫ID）分别为0x2E8和0x2F0,在W32DAsm反汇编里搜索0x2F0这个ID,找到一个在<code>Edit2DblClick</code>里, 一个在<code>PanelDblClick</code>里下断点，发现要判断<code>[ebx + 308]</code>的值是否等于<code>0x29D</code>，并且初始值为<code>0x28E</code></p><h2 id="第二关-ebx-308-0x230D"><a href="#第二关-ebx-308-0x230D" class="headerlink" title="第二关[ebx + 308] !&#x3D; 0x230D"></a>第二关[ebx + 308] !&#x3D; 0x230D</h2><p>同第一步的方法找到位置是在Button1MouseDown事件</p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231203154518945.png" alt="image-20231203154518945"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [ebx + 308] 初始化为 0x28E</span></span><br><span class="line"><span class="keyword">if</span>([ebx + <span class="number">308</span>] == <span class="number">0x230D</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(右键按下)</span><br><span class="line">&#123;</span><br><span class="line">    [ebx + <span class="number">308</span>] += <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 即左键按下之前需要右键按至少两下</span></span><br><span class="line"><span class="keyword">if</span>(左键按下 &amp;&amp; [ebx + <span class="number">308</span>] &gt;= <span class="number">0x294</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[ebx + <span class="number">308</span>] = <span class="number">0x230D</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><ul><li>如果 <code>[ebx + 308]</code>处值已经为<code>0x230D</code>，则不做任何处理</li><li>如果 <code>[ebx + 308]</code>处值不为<code>0x230D</code><ul><li>右键按下，其值加三</li><li>左键按下，如果左键按下前没有按两次右键就会赋值为<code>0x230D</code>，如果之前已经按了两次右键就不做任何处理</li></ul></li></ul><p>可以得知第二个输入框出现后需要右键注册5次， 并且左键注册之前一定要已经右键注册2次，右键5次后双击面板即可启用输入框</p><h2 id="第三关-ebx-310-0xF94"><a href="#第三关-ebx-310-0xF94" class="headerlink" title="第三关[ebx + 310] !&#x3D; 0xF94"></a>第三关[ebx + 310] !&#x3D; 0xF94</h2><p><code>[ebx + 310]</code>初始化为<code>0x9</code></p><p>同理找到控件FormMouseMove, </p><p>发现四个Image1MouseDown : </p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231203170333260.png" alt="image-20231203170333260"></p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231204220110815.png" alt="image-20231204220110815"></p><p><code>edx</code>保存鼠标进入的<code>y</code>坐标， <code>eax</code>保存鼠标进入的<code>x</code>坐标，并且后面连着的是坐标的范围</p><h2 id="第四关-ebx-318-ebx-314"><a href="#第四关-ebx-318-ebx-314" class="headerlink" title="第四关[ebx + 318] !&#x3D; [ebx + 314]"></a>第四关[ebx + 318] !&#x3D; [ebx + 314]</h2><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231204221955546.png" alt="image-20231204221955546"></p><p>**<code>[ebx+0x318]</code>**初始化为<code>0x0</code></p><ul><li>在第一张图（人之初）左键<code>[ebx + 0x318]</code>就<code>+0x2</code>， 右键<code>+0x11</code></li><li>同理第二张图<code>+0x3</code>, <code>+0x13</code></li><li>第三张 <code>+0x5</code>, <code>+0x17</code></li><li><code>+0x7</code>, <code>+0x1B</code></li></ul><p>**<code>[ebx+0x314]</code>**初始化为<code>0xB</code></p><p>根据<code>[ebx+0x30C]</code>的值给<code>[ebx+0x314]</code>赋初值</p><p><img src="/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/image-20231204224237701.png" alt="image-20231204224237701"></p><p>查到<code>[ebx+30C]</code>的值在<code>Edit2DblClick</code>赋值</p><p>在我的输入中赋初值为<code>1</code>要求是用户名长度是<code>3</code>的倍数， 密码<code>8</code>位且第二位为<code>_</code>,第<code>6</code>位为<code>,</code></p><p>我输入的用户名<code>Ray</code>, 密码<code>1_111,11</code></p><p>因为我的<code>[ebx+30C]</code>初值为<code>1</code>,所以最后<code>[ebx+0x314]</code>赋值为<code>0x3D</code></p><h1 id="CrackMe-006"><a href="#CrackMe-006" class="headerlink" title="CrackMe 006"></a>CrackMe 006</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;参考文章&lt;/strong&gt;（系列）–&amp;gt; &lt;strong&gt;强推&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.52pojie.cn/thread-1358649-1-1.html&quot;&gt;玩玩破解，写给新人看（第一集） - 『脱壳破</summary>
      
    
    
    
    <category term="逆向" scheme="https://1xueyu1.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://1xueyu1.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>二分法</title>
    <link href="https://1xueyu1.github.io/2023/11/23/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <id>https://1xueyu1.github.io/2023/11/23/%E4%BA%8C%E5%88%86%E6%B3%95/</id>
    <published>2023-11-23T13:04:24.000Z</published>
    <updated>2023-12-25T16:12:09.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.cn/problems/successful-pairs-of-spells-and-potions/description/?envType=daily-question&envId=2023-11-10">2300. 咒语和药水的成功对数 - 力扣（LeetCode）</a></p><h3 id="闭区间写法"><a href="#闭区间写法" class="headerlink" title="闭区间写法[]"></a>闭区间写法[]</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lower_bount1</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// [left, right]</span></span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;  <span class="comment">// [mid + 1, right]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;  <span class="comment">// [left, mid - 1]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后left = right + 1, 并且left左侧均为红色，right右侧均为蓝色</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="左闭右开"><a href="#左闭右开" class="headerlink" title="左闭右开[)"></a>左闭右开[)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lower_bount2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = nums.<span class="built_in">size</span>();  <span class="comment">//区间[left, right)</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) <span class="comment">//相等时区间为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;  <span class="comment">// [mid + 1, right)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            right = mid;  <span class="comment">// [left, mid)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最终left == right</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开区间"><a href="#开区间" class="headerlink" title="开区间()"></a>开区间()</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lower_bount3</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = nums.<span class="built_in">size</span>();  <span class="comment">//区间(left, right)</span></span><br><span class="line">    <span class="keyword">while</span>(left + <span class="number">1</span> &lt; right)  <span class="comment">//区间里有数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            left = mid;  <span class="comment">// (mid, right)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            right = mid;  <span class="comment">// (left, mid)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// left + 1 == right</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lower_bound</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; potions, <span class="type">double</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = potions.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> m = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(potions[m] &gt;= t)</span><br><span class="line">            &#123;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> l = m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 第l个刚好大于t， [0, l - 1]一共l个， 所以大于的数目为这个</span></span><br><span class="line">        <span class="keyword">return</span> potions.<span class="built_in">size</span>() - l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">successfulPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; spells, vector&lt;<span class="type">int</span>&gt;&amp; potions, <span class="type">long</span> <span class="type">long</span> success)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(potions.<span class="built_in">begin</span>(), potions.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> spellsSize = spells.<span class="built_in">size</span>(), potionsSize = potions.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(spellsSize, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; spellsSize; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> t = (<span class="type">double</span>)success / spells[i];</span><br><span class="line">            <span class="comment">// 查找比t大的数有多少</span></span><br><span class="line">            ans[i] = <span class="built_in">lower_bound</span>(potions, t);</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二分法&quot;&gt;&lt;a href=&quot;#二分法&quot; class=&quot;headerlink&quot; title=&quot;二分法&quot;&gt;&lt;/a&gt;二分法&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="skill" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/skill/"/>
    
    
    <category term="二分法" scheme="https://1xueyu1.github.io/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="https://1xueyu1.github.io/2023/11/21/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>https://1xueyu1.github.io/2023/11/21/%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2023-11-21T15:04:53.000Z</published>
    <updated>2023-11-26T02:15:41.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p><a href="https://leetcode.cn/problems/number-of-provinces/">547. 省份数量 - 力扣（LeetCode）</a></p><h3 id="并查集模板"><a href="#并查集模板" class="headerlink" title="并查集模板"></a>并查集模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">father</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先将每个人的father初始化为自己</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找算法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//查找X的father</span></span><br><span class="line"><span class="keyword">if</span>(father[x] != x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//路径压缩</span></span><br><span class="line">        father[x] = <span class="built_in">find</span>(father[x]);</span><br><span class="line">        <span class="keyword">return</span> father[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="type">int</span> fy = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(fx != fy)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// y的father 变成x</span></span><br><span class="line">        fx = father[y];</span><br><span class="line">    <span class="comment">//如果有要求谁是谁的father，我们可以利用size数组来记录双方的影响力谁大决定谁做father</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parents;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(parents[x] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            parents[x] = <span class="built_in">find</span>(parents[x]);</span><br><span class="line">            <span class="keyword">return</span> parents[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line">        <span class="type">int</span> fy = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span>(fx != fy)</span><br><span class="line">        &#123;</span><br><span class="line">            parents[fx] = fy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findCircleNum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; isConnected)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = isConnected.<span class="built_in">size</span>();</span><br><span class="line">        parents.<span class="built_in">resize</span>(n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            parents[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(isConnected[i][j] == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">Union</span>(i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(parents[i] == i)</span><br><span class="line">            &#123;</span><br><span class="line">                ans ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><p><a href="https://leetcode.cn/problems/couples-holding-hands/description/?envType=daily-question&envId=2023-11-11">765. 情侣牵手 - 力扣（LeetCode）</a></p><h3 id="并查集解法"><a href="#并查集解法" class="headerlink" title="并查集解法"></a>并查集解法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent;</span><br><span class="line">    <span class="type">int</span> counts;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UnionFind</span>(<span class="type">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            parent.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        counts = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(parent[x] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            parent[x] = <span class="built_in">find</span>(parent[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> fp = <span class="built_in">find</span>(p), fq = <span class="built_in">find</span>(q);</span><br><span class="line">        <span class="keyword">if</span>(fp == fq)<span class="keyword">return</span>;</span><br><span class="line">        parent[fp] = fq;</span><br><span class="line">        counts--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getCounts</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> counts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSwapsCouples</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; row)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = row.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">UnionFind <span class="title">uf</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// merge操作是将两个座位上的人合并，如果是情侣，他们下标除以二相等，所以本来就在一个联通集中，不需要合并，如果不是情侣，连通集中每增加一对，counts--</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 因为情侣下标除以2是相等的</span></span><br><span class="line">            uf.<span class="built_in">merge</span>(row[i] / <span class="number">2</span>, row[i + <span class="number">1</span>] / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n - uf.<span class="built_in">getCounts</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="位运算解法-（贪心）"><a href="#位运算解法-（贪心）" class="headerlink" title="位运算解法+（贪心）"></a>位运算解法+（贪心）</h3><p>因为情侣的编号相差1，所以通过与1进行异或运算就能找到他们对应的人</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSwapsCouples</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; row)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = row.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果当前这对是情侣</span></span><br><span class="line">            <span class="keyword">if</span>((row[i] ^ <span class="number">1</span>) == row[i + <span class="number">1</span>])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 否则向后遍历</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">2</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 找到了对应的情侣就交换</span></span><br><span class="line">                <span class="keyword">if</span>((row[i] ^ <span class="number">1</span>) == row[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(row[i + <span class="number">1</span>], row[j]);</span><br><span class="line">                    ans ++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/number-of-provinces/&quot;&gt;547. 省</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="图" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
    <category term="并查集" scheme="https://1xueyu1.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>拓扑排序</title>
    <link href="https://1xueyu1.github.io/2023/11/21/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <id>https://1xueyu1.github.io/2023/11/21/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</id>
    <published>2023-11-20T16:11:36.000Z</published>
    <updated>2023-11-20T17:24:55.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拓扑排序-理论"><a href="#拓扑排序-理论" class="headerlink" title="拓扑排序(理论)"></a>拓扑排序(理论)</h2><p>参考<a href="https://www.jianshu.com/p/3347f54a3187">深入理解拓扑排序（Topological sort) - 简书 (jianshu.com)</a></p><h3 id="拓扑排序存在前提"><a href="#拓扑排序存在前提" class="headerlink" title="拓扑排序存在前提"></a>拓扑排序存在前提</h3><p>当且仅当一个有向图为有向无环图（directed acyclic graph，或称DAG）时，才能得到对应于该图的拓扑排序。每一个有向无环图都至少存在一种拓扑排序。</p><pre class="mermaid">graph LR;    A-->B-->C-->D    A-->E-->F-->D    B-->F</pre><p>其拓扑排序为[A, B, E, C, F, D]</p><p><strong>要点</strong></p><p><strong>每次删除一个入度边个数为 0 的点，并刷新其他点的出度边个数。</strong></p><p>如果图中有环，经过拓扑排序后入度不为0的节点构成一个环</p><hr><hr><hr><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.cn/problems/maximum-employees-to-be-invited-to-a-meeting/?envType=daily-question&envId=2023-11-01">2127. 参加会议的最多员工数 - 力扣（LeetCode）</a></p><p>一个公司准备组织一场会议，邀请名单上有 <code>n</code> 位员工。公司准备了一张 <strong>圆形</strong> 的桌子，可以坐下 <strong>任意数目</strong> 的员工。</p><p>员工编号为 <code>0</code> 到 <code>n - 1</code> 。每位员工都有一位 <strong>喜欢</strong> 的员工，每位员工 <strong>当且仅当</strong> 他被安排在喜欢员工的旁边，他才会参加会议。每位员工喜欢的员工 <strong>不会</strong> 是他自己。</p><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>favorite</code> ，其中 <code>favorite[i]</code> 表示第 <code>i</code> 位员工喜欢的员工。请你返回参加会议的 <strong>最多员工数目</strong> 。</p><p><strong>提示：</strong></p><ul><li><code>n == favorite.length</code></li><li><code>2 &lt;= n &lt;= 105</code></li><li><code>0 &lt;= favorite[i] &lt;= n - 1</code></li><li><code>favorite[i] != i</code></li></ul><hr><hr><hr><h2 id="思路参考"><a href="#思路参考" class="headerlink" title="思路参考"></a>思路参考</h2><p><a href="https://leetcode.cn/problems/maximum-employees-to-be-invited-to-a-meeting/solutions/1187830/nei-xiang-ji-huan-shu-tuo-bu-pai-xu-fen-c1i1b/?envType=daily-question&envId=2023-11-01">2127. 参加会议的最多员工数 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/u/endlesscheng/">@灵茶山艾府</a></p><p>下面是我的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumInvitations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; favorite)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = favorite.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 记录节点入度</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">degree</span><span class="params">(n)</span></span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">rg</span>(n);<span class="comment">// 反图</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x : favorite)</span><br><span class="line">        &#123;</span><br><span class="line">            degree[x]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(degree[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拓扑排序</span></span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> y = favorite[x];</span><br><span class="line">            <span class="comment">//不会把环中的关系加进来，防止计算深度时循环？</span></span><br><span class="line">            rg[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">            degree[y]--;</span><br><span class="line">            <span class="keyword">if</span>(degree[y] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; rdfs =  [&amp;](<span class="type">int</span> x) -&gt; <span class="type">int</span>&#123;</span><br><span class="line">            <span class="type">int</span> maxDepth = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 选择当前节点的所有儿子选择最长的</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> son : rg[x])</span><br><span class="line">            &#123;</span><br><span class="line">                maxDepth = <span class="built_in">max</span>(maxDepth, <span class="built_in">rdfs</span>(son) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> maxDepth;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> maxRingSize = <span class="number">0</span>, sumChainSize = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遍历所有节点找到基环树中有几个节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(degree[i] == <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            degree[i] = <span class="number">0</span>;<span class="comment">//防止重复遍历</span></span><br><span class="line">            <span class="type">int</span> ringSize = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> x = favorite[i]; x != i; x = favorite[x])</span><br><span class="line">            &#123;</span><br><span class="line">                degree[x] = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 记录环中的节点个数</span></span><br><span class="line">                ringSize++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(ringSize == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 因为这个环总共就两个节点</span></span><br><span class="line">                <span class="comment">// 可以将所有的基环长度为2的链放一起</span></span><br><span class="line">                sumChainSize += <span class="built_in">rdfs</span>(i) + <span class="built_in">rdfs</span>(favorite[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                maxRingSize = <span class="built_in">max</span>(maxRingSize, ringSize);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(sumChainSize, maxRingSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><p><a href="https://leetcode.cn/problems/course-schedule-ii/description/?utm_source=LCUS&utm_medium=ip_redirect&utm_campaign=transfer2china">210. 课程表 II - 力扣（LeetCode）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;拓扑排序-理论&quot;&gt;&lt;a href=&quot;#拓扑排序-理论&quot; class=&quot;headerlink&quot; title=&quot;拓扑排序(理论)&quot;&gt;&lt;/a&gt;拓扑排序(理论)&lt;/h2&gt;&lt;p&gt;参考&lt;a href=&quot;https://www.jianshu.com/p/3347f54a318</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="图" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
    <category term="图" scheme="https://1xueyu1.github.io/tags/%E5%9B%BE/"/>
    
    <category term="拓扑排序" scheme="https://1xueyu1.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的遍历</title>
    <link href="https://1xueyu1.github.io/2023/11/20/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://1xueyu1.github.io/2023/11/20/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</id>
    <published>2023-11-20T09:09:30.000Z</published>
    <updated>2023-12-01T15:11:40.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><h3 id="定义二叉树"><a href="#定义二叉树" class="headerlink" title="定义二叉树"></a>定义二叉树</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义二叉树节点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">right</span>;</span></span><br><span class="line">&#125;TreeNode;</span><br></pre></td></tr></table></figure><h3 id="二叉树的创建（前序遍历的方式）"><a href="#二叉树的创建（前序遍历的方式）" class="headerlink" title="二叉树的创建（前序遍历的方式）"></a>二叉树的创建（前序遍历的方式）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二叉树的创建</span></span><br><span class="line">TreeNode* <span class="title function_">creatBinaryTree</span><span class="params">(<span class="type">int</span> num[], <span class="type">int</span> numSize, <span class="type">int</span>* index)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果数组当前值为-1，空节点</span></span><br><span class="line"><span class="keyword">if</span> (num[(*index)] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">(*index)++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">TreeNode* root = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> ((*index) &lt; numSize)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//否则新建节点</span></span><br><span class="line">root = (TreeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;内存分配失败!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">root-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;val = num[(*index)++];</span><br><span class="line"></span><br><span class="line">root-&gt;left = creatBinaryTree(num, numSize, index);</span><br><span class="line">root-&gt;right = creatBinaryTree(num, numSize, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="前序遍历（中左右）"><a href="#前序遍历（中左右）" class="headerlink" title="前序遍历（中左右）"></a>前序遍历（中左右）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前序遍历(递归)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line">preOrderTraversal(root-&gt;left);</span><br><span class="line"><span class="comment">//右</span></span><br><span class="line">preOrderTraversal(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历(非递归)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrderTraversalNo</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用栈模拟</span></span><br><span class="line">TreeNode* <span class="built_in">stack</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> stackTop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是前序遍历（非递归）:\n&quot;</span>);</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root;</span><br><span class="line"><span class="keyword">while</span> (stackTop)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line">TreeNode* node = <span class="built_in">stack</span>[--stackTop];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, node-&gt;val);</span><br><span class="line"><span class="comment">//因为用栈模拟，所以入栈使左右的顺序反过来，出栈使顺序就是对的</span></span><br><span class="line"><span class="comment">//右</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = node-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = node-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序遍历（递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line">inOrderTraversal(root-&gt;left);</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line"><span class="comment">//右</span></span><br><span class="line">inOrderTraversal(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//中序遍历（非递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrderTraversalNo</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用栈模拟</span></span><br><span class="line">TreeNode* <span class="built_in">stack</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> stackTop = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是中序遍历（非递归）:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (stackTop || root)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//先把节点入栈，出栈的时候就是从下往上，即左-&gt;中</span></span><br><span class="line"><span class="keyword">while</span> (root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root;</span><br><span class="line">root = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">root = <span class="built_in">stack</span>[--stackTop];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line">        <span class="comment">//右</span></span><br><span class="line">root = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序遍历（递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">postOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">postOrderTraversal(root-&gt;left);</span><br><span class="line">postOrderTraversal(root-&gt;right);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历（非递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">postOrderTraversalNo</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//后序遍历是左右中，前序遍历是中左右</span></span><br><span class="line"><span class="comment">//所以在前序遍历中修改代码变成中右左，再reverse数组就得到后序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将遍历的节点暂时存储在这里</span></span><br><span class="line"><span class="type">int</span> ans[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> ansSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用栈模拟</span></span><br><span class="line">TreeNode* <span class="built_in">stack</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> stackTop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root;</span><br><span class="line"><span class="keyword">while</span> (stackTop)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line">root = <span class="built_in">stack</span>[--stackTop];</span><br><span class="line">ans[ansSize++] = root-&gt;val;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line"><span class="keyword">if</span> (root-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是后序遍历（非递归）:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = ansSize - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">levelOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//层序遍历用队列模拟</span></span><br><span class="line">TreeNode* <span class="built_in">queue</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> queueFront = <span class="number">0</span>, queueRear = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是层序遍历：\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>[queueFront++] = root;</span><br><span class="line"><span class="keyword">while</span> (queueFront != queueRear)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="built_in">queue</span>[queueRear++];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line"><span class="keyword">if</span> (root-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>[queueFront++] = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>[queueFront++] = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二叉树的节点和深度"><a href="#二叉树的节点和深度" class="headerlink" title="二叉树的节点和深度"></a>二叉树的节点和深度</h2><h3 id="求二叉树节点个数"><a href="#求二叉树节点个数" class="headerlink" title="求二叉树节点个数"></a>求二叉树节点个数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树节点个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nodeCount</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//递归返回左右子树的节点个数加上当前节点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + nodeCount(root-&gt;left) + nodeCount(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求二叉树的深度"><a href="#求二叉树的深度" class="headerlink" title="求二叉树的深度"></a>求二叉树的深度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树深度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">BinaryTreeDepth</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> leftDepth = BinaryTreeDepth(root-&gt;left);</span><br><span class="line"><span class="type">int</span> rightDepth = BinaryTreeDepth(root-&gt;right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> max(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><strong>二叉树例子</strong></p><p><img src="/2023/11/20/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/%E4%BA%8C%E5%8F%89%E6%A0%91.jpg" alt="二叉树举例"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义二叉树节点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">right</span>;</span></span><br><span class="line">&#125;TreeNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树的创建</span></span><br><span class="line">TreeNode* <span class="title function_">creatBinaryTree</span><span class="params">(<span class="type">int</span> num[], <span class="type">int</span> numSize, <span class="type">int</span>* index)</span>;</span><br><span class="line"><span class="comment">//前序遍历(递归)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrderTraversal</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//前序遍历(非递归)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrderTraversalNo</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//中序遍历（递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrderTraversal</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//中序遍历（非递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrderTraversalNo</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//后序遍历（递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">postOrderTraversal</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//后序遍历（非递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">postOrderTraversalNo</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">levelOrderTraversal</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//二叉树节点个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nodeCount</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//二叉树深度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">BinaryTreeDepth</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//前序遍历和此顺序一样，-1代表节点为空</span></span><br><span class="line"><span class="type">int</span> num[] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">8</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">15</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">42</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">33</span>, <span class="number">21</span>, <span class="number">54</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">31</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> numSize = <span class="keyword">sizeof</span>(num) / <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">TreeNode* root = creatBinaryTree(num, numSize, &amp;index);</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历（递归）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是前序遍历（递归法）:\n&quot;</span>);</span><br><span class="line">preOrderTraversal(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//前序遍历（非递归）</span></span><br><span class="line">preOrderTraversalNo(root);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历（递归）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是中序遍历（递归法）:\n&quot;</span>);</span><br><span class="line">inOrderTraversal(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//中序遍历（非递归）</span></span><br><span class="line">inOrderTraversalNo(root);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历（递归）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是后序遍历（递归法）:\n&quot;</span>);</span><br><span class="line">postOrderTraversal(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//后序遍历（非递归）</span></span><br><span class="line">postOrderTraversalNo(root);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line">levelOrderTraversal(root);</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树节点个数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;二叉树节点个数：%d\n&quot;</span>, nodeCount(root));</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树深度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;二叉树的深度：%d\n&quot;</span>, BinaryTreeDepth(root));</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树的创建 前序遍历</span></span><br><span class="line">TreeNode* <span class="title function_">creatBinaryTree</span><span class="params">(<span class="type">int</span> num[], <span class="type">int</span> numSize, <span class="type">int</span>* index)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果数组当前值为-1，空节点</span></span><br><span class="line"><span class="keyword">if</span> (num[(*index)] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">(*index)++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">TreeNode* root = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> ((*index) &lt; numSize)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//否则新建节点</span></span><br><span class="line">root = (TreeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;内存分配失败!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">root-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;val = num[(*index)++];</span><br><span class="line"></span><br><span class="line">root-&gt;left = creatBinaryTree(num, numSize, index);</span><br><span class="line">root-&gt;right = creatBinaryTree(num, numSize, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line">preOrderTraversal(root-&gt;left);</span><br><span class="line"><span class="comment">//右</span></span><br><span class="line">preOrderTraversal(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历(非递归)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrderTraversalNo</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用栈模拟</span></span><br><span class="line">TreeNode* <span class="built_in">stack</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> stackTop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是前序遍历（非递归）:\n&quot;</span>);</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root;</span><br><span class="line"><span class="keyword">while</span> (stackTop)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line">TreeNode* node = <span class="built_in">stack</span>[--stackTop];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, node-&gt;val);</span><br><span class="line"><span class="comment">//因为用栈模拟，所以入栈使左右的顺序反过来，出栈使顺序就是对的</span></span><br><span class="line"><span class="comment">//右</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = node-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = node-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历（递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line">inOrderTraversal(root-&gt;left);</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line"><span class="comment">//右</span></span><br><span class="line">inOrderTraversal(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//中序遍历（非递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrderTraversalNo</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用栈模拟</span></span><br><span class="line">TreeNode* <span class="built_in">stack</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> stackTop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是中序遍历（非递归）:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (stackTop || root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root;</span><br><span class="line">root = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">root = <span class="built_in">stack</span>[--stackTop];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line">root = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历（递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">postOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">postOrderTraversal(root-&gt;left);</span><br><span class="line">postOrderTraversal(root-&gt;right);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">postOrderTraversalNo</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//后序遍历是左右中，前序遍历是中左右</span></span><br><span class="line"><span class="comment">//所以在前序遍历中修改代码变成中右左，再reverse数组就得到后序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将遍历的节点暂时存储在这里</span></span><br><span class="line"><span class="type">int</span> ans[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> ansSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用栈模拟</span></span><br><span class="line">TreeNode* <span class="built_in">stack</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> stackTop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root;</span><br><span class="line"><span class="keyword">while</span> (stackTop)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line">root = <span class="built_in">stack</span>[--stackTop];</span><br><span class="line">ans[ansSize++] = root-&gt;val;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line"><span class="keyword">if</span> (root-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是后序遍历（非递归）:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = ansSize - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">levelOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//层序遍历用队列模拟</span></span><br><span class="line">TreeNode* <span class="built_in">queue</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> queueFront = <span class="number">0</span>, queueRear = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是层序遍历：\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>[queueFront++] = root;</span><br><span class="line"><span class="keyword">while</span> (queueFront != queueRear)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="built_in">queue</span>[queueRear++];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line"><span class="keyword">if</span> (root-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>[queueFront++] = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>[queueFront++] = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树节点个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nodeCount</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//递归返回左右子树的节点个数加上当前节点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + nodeCount(root-&gt;left) + nodeCount(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树深度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">BinaryTreeDepth</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> leftDepth = BinaryTreeDepth(root-&gt;left);</span><br><span class="line"><span class="type">int</span> rightDepth = BinaryTreeDepth(root-&gt;right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> max(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二叉树的遍历&quot;&gt;&lt;a href=&quot;#二叉树的遍历&quot; class=&quot;headerlink&quot; title=&quot;二叉树的遍历&quot;&gt;&lt;/a&gt;二叉树的遍历&lt;/h2&gt;&lt;h3 id=&quot;定义二叉树&quot;&gt;&lt;a href=&quot;#定义二叉树&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
    <category term="二叉树的遍历" scheme="https://1xueyu1.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    
    <category term="C" scheme="https://1xueyu1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>markdown-tutorial</title>
    <link href="https://1xueyu1.github.io/2023/11/19/markdown-tutorial/"/>
    <id>https://1xueyu1.github.io/2023/11/19/markdown-tutorial/</id>
    <published>2023-11-18T16:51:12.000Z</published>
    <updated>2023-12-04T02:41:08.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MarkDown基础"><a href="#MarkDown基础" class="headerlink" title="MarkDown基础"></a>MarkDown基础</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#标题名字（#的个数代表标题的级数）</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题使用一个#</span></span><br><span class="line"><span class="section">## 二级标题使用两个#</span></span><br><span class="line">......</span><br><span class="line">最多支持六级标题</span><br></pre></td></tr></table></figure><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这就是 ~~删除线~~</span><br></pre></td></tr></table></figure><p>这就是 <del>删除线</del></p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="emphasis">*斜体*</span> 的文本</span><br></pre></td></tr></table></figure><p>这是用来 <em>斜体</em> 的文本</p><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="strong">**加粗**</span> 的文本</span><br></pre></td></tr></table></figure><p>这是用来 <strong>加粗</strong> 的文本</p><h3 id="斜体-加粗"><a href="#斜体-加粗" class="headerlink" title="斜体+加粗"></a>斜体+加粗</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="strong">**<span class="emphasis">*斜体+加粗*</span>**</span> 的文本</span><br></pre></td></tr></table></figure><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线是HTML语法</p><p><code>下划线</code> <u>下划线（Ctrl + u）</u></p><h3 id="高亮（需勾选扩展语法）"><a href="#高亮（需勾选扩展语法）" class="headerlink" title="高亮（需勾选扩展语法）"></a>高亮（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 ==斜体+加粗== 的文本</span><br></pre></td></tr></table></figure><p>这是用来 &#x3D;&#x3D;斜体+加粗&#x3D;&#x3D; 的文本</p><h3 id="下标（需勾选扩展语法）"><a href="#下标（需勾选扩展语法）" class="headerlink" title="下标（需勾选扩展语法）"></a>下标（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">H~2~O</span><br><span class="line">H~2~O~2~</span><br></pre></td></tr></table></figure><p>H<del>2</del>O</p><p>H<del>2</del>O<del>2</del></p><h3 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">面积 m^2^</span><br><span class="line">体积 m^3^</span><br></pre></td></tr></table></figure><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win下输入 win + ;即可选择想要的表情</span><br></pre></td></tr></table></figure><p>😊😂🤣(●’◡’●)</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><blockquote><p>直接使用Ctrl+t生成表格，然后再在源码出修改对齐方式</p></blockquote><table><thead><tr><th align="left">name</th><th>price</th></tr></thead><tbody><tr><td align="left">fried chicken</td><td>19</td></tr><tr><td align="left">cola</td><td>32</td></tr></tbody></table><table><thead><tr><th align="left">name</th><th align="center">price</th></tr></thead><tbody><tr><td align="left">fried chicken</td><td align="center">19</td></tr><tr><td align="left">cola</td><td align="center">32</td></tr></tbody></table><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&quot;后悔创业&quot;</span><br></pre></td></tr></table></figure><blockquote><p>“后悔创业”</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;可以嵌套使用</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>1</p></blockquote></blockquote><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表-–-符号-空格"><a href="#无序列表-–-符号-空格" class="headerlink" title="无序列表 – 符号 空格"></a>无序列表 – 符号 空格</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 可以使用 <span class="code">`*`</span> 作为标记</span><br><span class="line"><span class="bullet">+</span> 也可以使用 <span class="code">`+`</span></span><br><span class="line"><span class="bullet">-</span> 或者 <span class="code">`-`</span></span><br></pre></td></tr></table></figure><ul><li>可以使用<code>*</code>作为标记</li></ul><ul><li>也可以使用<code>+</code>作为标记</li></ul><ul><li>或者<code>-</code></li></ul><h4 id="有序列表-–-数字-空格"><a href="#有序列表-–-数字-空格" class="headerlink" title="有序列表 – 数字.空格"></a>有序列表 – 数字<code>.</code>空格</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有序列表以数字和 <span class="code">`.`</span> 开始</span><br><span class="line">数字的序列不会影响生成的列表序列</span><br></pre></td></tr></table></figure><ol><li>有序列表以数字和 <code>.</code> 开始</li><li>数字的序列不会影响生成的列表序列</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以使用：数字\. 来取消显示为列表</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​<span class="code">```语言名称</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(string[] args)</span></span></span><br></pre></td></tr></table></figure><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以通过``，插入行内代码</span><br><span class="line">例如 <span class="code">`Markdown`</span></span><br></pre></td></tr></table></figure><p><code>Markdown</code></p><h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p>代码块中的文本都会显示为原始内容</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>可以在一行中使用三个或更多的<code>*</code>、<code>-</code>、或<code>_</code>来添加分割线：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"><span class="strong">***</span></span></span><br><span class="line"><span class="strong"><span class="section">------</span></span></span><br><span class="line"><span class="strong"><span class="section">__<span class="emphasis">_</span></span></span></span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><h3 id="外部跳转–超链接"><a href="#外部跳转–超链接" class="headerlink" title="外部跳转–超链接"></a>外部跳转–超链接</h3><p>格式为<code>[link text](link)</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">提示文字</span>](<span class="link">https://1xueyu1.github.io/</span>)</span><br></pre></td></tr></table></figure><p><a href="https://1xueyu1.github.io/">Rayii’s blog</a></p><h3 id="内部跳转–本文件内跳（Typora支持）"><a href="#内部跳转–本文件内跳（Typora支持）" class="headerlink" title="内部跳转–本文件内跳（Typora支持）"></a>内部跳转–本文件内跳（Typora支持）</h3><p>格式为：<code>[link text](#destination)</code></p><blockquote><p>Windows用户使用<code>Ctrl+click</code></p></blockquote><p>跳转至-&gt;<a href="#%E8%B7%B3%E8%BD%AC">跳转</a></p><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>使用<code>&lt;&gt;</code>包括的URL或邮箱地址会被自动转换为超链接:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://www.baidu.com&gt;</span></span><br><span class="line">&lt;123@email.com&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">https://www.baidu.com</a><br><a href="mailto:&#x31;&#50;&#51;&#x40;&#101;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;">&#x31;&#50;&#51;&#x40;&#101;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片名称</span>](<span class="link">图片地址或图片本地存储的路径</span>)</span><br></pre></td></tr></table></figure><h4 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h4><img src="/2023/11/19/markdown-tutorial/微信图片_20231118193203.jpg" alt="她真好看的吧"><p><img src="/2023/11/19/markdown-tutorial/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231019131935.png" alt="还是她"></p><h2 id="流程图（graph）"><a href="#流程图（graph）" class="headerlink" title="流程图（graph）"></a>流程图（graph）</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph 方向描述</span><br><span class="line"><span class="code">图表中的其他语句</span></span><br></pre></td></tr></table></figure><p>关键字graph表示一个流程图的开始，同时需要指定改图的方向。</p><p>其中“方向描述”为:</p><table><thead><tr><th>用词</th><th>含义</th></tr></thead><tbody><tr><td>TB</td><td>从上到下</td></tr><tr><td>BT</td><td>从下到上</td></tr><tr><td>RL</td><td>从右到左</td></tr><tr><td>LR</td><td>从左到右</td></tr></tbody></table><blockquote><p>T &#x3D; TOP, B &#x3D; BOTTOM, L &#x3D; LEFT, R &#x3D; RIGHT, D &#x3D; DOWN</p></blockquote><p>最常用的是TB、LR</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line"><span class="code">A--&gt;B</span></span><br><span class="line"><span class="code">B--&gt;C</span></span><br><span class="line"><span class="code">C--&gt;A</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB;    A-->B    B-->C    C-->A</pre><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">A--&gt;B</span></span><br><span class="line"><span class="code">B--&gt;C</span></span><br><span class="line"><span class="code">C--&gt;A</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;    A-->B    B-->C    C-->A</pre><h3 id="流程图常用符号及含义"><a href="#流程图常用符号及含义" class="headerlink" title="流程图常用符号及含义"></a>流程图常用符号及含义</h3><table><thead><tr><th>表述</th><th>说明</th><th>含义</th></tr></thead><tbody><tr><td>id[text]</td><td>矩形节点</td><td>表示过程</td></tr><tr><td>id(text)</td><td>圆角矩形节点</td><td>表示开始和结束</td></tr><tr><td>id((text))</td><td>圆形节点</td><td>表示连接</td></tr><tr><td>id{文字}</td><td>菱形节点</td><td>表示判断、决策</td></tr><tr><td>id&gt;text]</td><td>右向旗状节点</td><td></td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line"><span class="code">A</span></span><br><span class="line"><span class="code">B(圆角矩形节点)</span></span><br><span class="line"><span class="code">C[矩形节点]</span></span><br><span class="line"><span class="code">D((圆形节点))</span></span><br><span class="line"><span class="code">E&#123;菱形节点&#125;</span></span><br><span class="line"><span class="code">F&gt;右向旗帜状节点]</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB;    A    B(圆角矩形节点)    C[矩形节点]    D((圆形节点))    E{菱形节点}    F>右向旗帜状节点]</pre><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line"><span class="code">begin(出门)--&gt; buy[买炸鸡]</span></span><br><span class="line"><span class="code">buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;</span></span><br><span class="line"><span class="code">IsRemaining --有--&gt; happy[买到炸鸡开心] --&gt; goBack(回家)</span></span><br><span class="line"><span class="code">IsRemaining --没有--&gt; sad[&quot;伤心&quot;] --&gt; goBack</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB;    begin(出门)--> buy[买炸鸡]    buy --> IsRemaining{"还有没有炸鸡？"}    IsRemaining --有--> happy[买到炸鸡开心] --> goBack(回家)    IsRemaining --没有--> sad["伤心"] --> goBack</pre><h3 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line"><span class="code">A1--&gt;B1</span></span><br><span class="line"><span class="code">A2---B2</span></span><br><span class="line"><span class="code">A3--text---B3</span></span><br><span class="line"><span class="code">A4--text--&gt;B4</span></span><br><span class="line"><span class="code">A5-.-B5</span></span><br><span class="line"><span class="code">A6-.-&gt;B6</span></span><br><span class="line"><span class="code">A7-.text.-B7</span></span><br><span class="line"><span class="code">A8-.text.-&gt;B8</span></span><br><span class="line"><span class="code">A9===B9</span></span><br><span class="line"><span class="code">A10==&gt;B10</span></span><br><span class="line"><span class="code">A11==text===B11</span></span><br><span class="line"><span class="code">A12==text==&gt;B12</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB;    A1-->B1    A2---B2    A3--text---B3    A4--text-->B4    A5-.-B5    A6-.->B6    A7-.text.-B7    A8-.text.->B8    A9===B9    A10==>B10    A11==text===B11    A12==text==>B12</pre><h3 id="子表图"><a href="#子表图" class="headerlink" title="子表图"></a>子表图</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subgraph 子图表名称</span><br><span class="line"><span class="code">语句</span></span><br><span class="line"><span class="code">end</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB;    subgraph 买炸鸡前        begin(出门)--> buy[买炸鸡]    end    buy --> IsRemaining{"还有没有炸鸡？"}    IsRemaining --有--> happy[买到炸鸡开心] --> goBack(回家)    IsRemaining --没有--> sad["伤心"] --> goBack</pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MarkDown基础&quot;&gt;&lt;a href=&quot;#MarkDown基础&quot; class=&quot;headerlink&quot; title=&quot;MarkDown基础&quot;&gt;&lt;/a&gt;MarkDown基础&lt;/h1&gt;&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="工具" scheme="https://1xueyu1.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Markdown" scheme="https://1xueyu1.github.io/categories/%E5%B7%A5%E5%85%B7/Markdown/"/>
    
    
    <category term="Markdown" scheme="https://1xueyu1.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
