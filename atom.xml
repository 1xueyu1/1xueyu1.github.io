<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rayii&#39;s blog</title>
  
  
  <link href="https://1xueyu1.github.io/atom.xml" rel="self"/>
  
  <link href="https://1xueyu1.github.io/"/>
  <updated>2023-11-26T17:34:47.273Z</updated>
  <id>https://1xueyu1.github.io/</id>
  
  <author>
    <name>Rayii</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线段树</title>
    <link href="https://1xueyu1.github.io/2023/11/26/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>https://1xueyu1.github.io/2023/11/26/%E7%BA%BF%E6%AE%B5%E6%A0%91/</id>
    <published>2023-11-26T02:37:35.000Z</published>
    <updated>2023-11-26T17:34:47.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><p><strong>参考文献</strong></p><p><a href="https://blog.csdn.net/weixin_45697774/article/details/104274713">线段树 从入门到进阶（超清晰，简单易懂）_线段树怎么写-CSDN博客</a></p><h2 id="简单线段树"><a href="#简单线段树" class="headerlink" title="简单线段树"></a>简单线段树</h2><p><strong>模板题</strong></p><p><a href="https://www.luogu.com.cn/problem/P3374">P3374 【模板】树状数组 1（单点修改&#x2F;区间查询）</a></p><p><a href="https://www.luogu.com.cn/problem/P3368">P3368 【模板】树状数组 2 （区间修改&#x2F;单点查询）</a></p><h3 id="线段树构建"><a href="#线段树构建" class="headerlink" title="线段树构建"></a>线段树构建</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[i].left = left;</span><br><span class="line">tree[i].right = right;</span><br><span class="line"><span class="comment">// 到叶子节点</span></span><br><span class="line"><span class="keyword">if</span> (left == right)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 递归构建左右子树</span></span><br><span class="line"><span class="built_in">build</span>(i * <span class="number">2</span>, left, mid);</span><br><span class="line"><span class="built_in">build</span>(i * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取数组的值给线段树赋值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[i].left == tree[i].right)</span><br><span class="line">&#123;</span><br><span class="line">tree[i].num = nums[tree[i].right];</span><br><span class="line"><span class="keyword">return</span> tree[i].num;</span><br><span class="line">&#125;</span><br><span class="line">tree[i].num = <span class="built_in">add</span>(i * <span class="number">2</span>) + <span class="built_in">add</span>(i * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> tree[i].num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从i开始递归修改所有 包含 第dis位 的区间，都加上k</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_plus</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> dis, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[i].num += k;</span><br><span class="line"><span class="keyword">if</span> (tree[i].left == tree[i].right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 修改左右儿子区间的值</span></span><br><span class="line"><span class="keyword">if</span> (dis &lt;= tree[i * <span class="number">2</span>].right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">my_plus</span>(i * <span class="number">2</span>, dis, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dis &gt;= tree[i * <span class="number">2</span> + <span class="number">1</span>].left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">my_plus</span>(i * <span class="number">2</span> + <span class="number">1</span>, dis, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询[l, r]的状态，如 区间的和 或者 区间的最大值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= tree[i].left &amp;&amp; tree[i].right &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">ans += tree[i].num;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tree[i * <span class="number">2</span>].right &gt;= l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">search</span>(i * <span class="number">2</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tree[i * <span class="number">2</span> + <span class="number">1</span>].left &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">search</span>(i * <span class="number">2</span> + <span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（总代码）"><a href="#（总代码）" class="headerlink" title="（总代码）"></a>（总代码）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> nums[<span class="number">500010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> left, right;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">&#125;tree[<span class="number">2000010</span>];  <span class="comment">// [4n]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[i].left = left;</span><br><span class="line">tree[i].right = right;</span><br><span class="line"><span class="comment">// 到叶子节点</span></span><br><span class="line"><span class="keyword">if</span> (left == right)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 递归构建左右子树</span></span><br><span class="line"><span class="built_in">build</span>(i * <span class="number">2</span>, left, mid);</span><br><span class="line"><span class="built_in">build</span>(i * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[i].left == tree[i].right)</span><br><span class="line">&#123;</span><br><span class="line">tree[i].num = nums[tree[i].right];</span><br><span class="line"><span class="keyword">return</span> tree[i].num;</span><br><span class="line">&#125;</span><br><span class="line">tree[i].num = <span class="built_in">add</span>(i * <span class="number">2</span>) + <span class="built_in">add</span>(i * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> tree[i].num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单点修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_plus</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> dis, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[i].num += k;</span><br><span class="line"><span class="keyword">if</span> (tree[i].left == tree[i].right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dis &lt;= tree[i * <span class="number">2</span>].right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">my_plus</span>(i * <span class="number">2</span>, dis, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dis &gt;= tree[i * <span class="number">2</span> + <span class="number">1</span>].left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">my_plus</span>(i * <span class="number">2</span> + <span class="number">1</span>, dis, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间查询</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= tree[i].left &amp;&amp; tree[i].right &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">ans += tree[i].num;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tree[i * <span class="number">2</span>].right &gt;= l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">search</span>(i * <span class="number">2</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tree[i * <span class="number">2</span> + <span class="number">1</span>].left &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">search</span>(i * <span class="number">2</span> + <span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">my_plus</span>(<span class="number">1</span>, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">search</span>(<span class="number">1</span>, b, c);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段树的构建"><a href="#线段树的构建" class="headerlink" title="线段树的构建"></a>线段树的构建</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[o] = &#123; l, r, <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">// 路径上记录的是区间修改值，叶子上记录的是节点权值</span></span><br><span class="line">    <span class="comment">// 将输入值赋值给线段树叶子节点，也就是说</span></span><br><span class="line">    <span class="comment">// 非叶子节点记录的只是区间修改值，所以query函数是加上路径上所有修改值和叶子节点的权值</span></span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[o].num = nums[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建左右子树</span></span><br><span class="line">    <span class="type">int</span> m = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(o * <span class="number">2</span>, l, m);</span><br><span class="line">    <span class="built_in">build</span>(o * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 区间修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[o].l &gt;= l &amp;&amp; tree[o].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[o].num += k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m = (tree[o].l + tree[o].r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modify</span>(o * <span class="number">2</span>, l, r, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modify</span>(o * <span class="number">2</span> + <span class="number">1</span>, l, r, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单点查询"><a href="#单点查询" class="headerlink" title="单点查询"></a>单点查询</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单点查询</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 将路径上的修改值，叶子上代表的原本的权值 全部加上就是最终的值</span></span><br><span class="line">    ans += tree[o].num;</span><br><span class="line">    <span class="keyword">if</span> (tree[o].l == tree[o].r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> m = (tree[o].l + tree[o].r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= m)</span><br><span class="line">        <span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span>, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> nums[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segment_tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">&#125;tree[maxn * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[o] = &#123; l, r, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将输入值赋值给线段树叶子节点，也就是说</span></span><br><span class="line"><span class="comment">// 非叶子节点记录的只是区间修改值，所以query函数需要加上路径上所有值</span></span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">tree[o].num = nums[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建左右子树</span></span><br><span class="line"><span class="type">int</span> m = l + (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">build</span>(o * <span class="number">2</span>, l, m);</span><br><span class="line"><span class="built_in">build</span>(o * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间修改</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[o].l &gt;= l &amp;&amp; tree[o].r &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">tree[o].num += k;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = (tree[o].l + tree[o].r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">modify</span>(o * <span class="number">2</span>, l, r, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m &lt; r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">modify</span>(o * <span class="number">2</span> + <span class="number">1</span>, l, r, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单点查询</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> o, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans += tree[o].num;</span><br><span class="line"><span class="keyword">if</span> (tree[o].l == tree[o].r)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> m = (tree[o].l + tree[o].r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= m)</span><br><span class="line"><span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span>, x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;ST;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; nums[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ST.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y, z;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">ST.<span class="built_in">modify</span>(<span class="number">1</span>, x, y, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">ST.<span class="built_in">query</span>(<span class="number">1</span>, x);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线段树&quot;&gt;&lt;a href=&quot;#线段树&quot; class=&quot;headerlink&quot; title=&quot;线段树&quot;&gt;&lt;/a&gt;线段树&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;参考文献&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
    <category term="线段树" scheme="https://1xueyu1.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>逆向基础</title>
    <link href="https://1xueyu1.github.io/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    <id>https://1xueyu1.github.io/2023/11/24/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/</id>
    <published>2023-11-24T14:30:50.000Z</published>
    <updated>2023-11-25T10:36:39.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向基础"><a href="#逆向基础" class="headerlink" title="逆向基础"></a>逆向基础</h1><p><strong>参考文章</strong>（系列）–&gt; <strong>强推</strong></p><p><a href="https://www.52pojie.cn/thread-1358649-1-1.html">玩玩破解，写给新人看（第一集） - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a><strong>（完全零基础也能看）</strong></p><h2 id="破解思路"><a href="#破解思路" class="headerlink" title="破解思路"></a>破解思路</h2><p>我们输入账号密码，然后软件会去验证我们的账号密码是否正确所以有验证过程。我们可以通过修改验证结果从而成功破解</p><h3 id="其他验证形式"><a href="#其他验证形式" class="headerlink" title="其他验证形式"></a>其他验证形式</h3><h4 id="网络验证"><a href="#网络验证" class="headerlink" title="网络验证"></a>网络验证</h4><p>修改从服务器传回的结果即可</p><h4 id="重启验证"><a href="#重启验证" class="headerlink" title="重启验证"></a>重启验证</h4><p>第一次输入账号密码后，我们的账号密码会保存在某个位置，以后打开时会自动读取</p><h5 id="注册表-RegOpenKeyA"><a href="#注册表-RegOpenKeyA" class="headerlink" title="注册表 : RegOpenKeyA"></a>注册表 : RegOpenKeyA</h5><h5 id="TXT-ReadFile"><a href="#TXT-ReadFile" class="headerlink" title="TXT  : ReadFile"></a>TXT  : ReadFile</h5><h5 id="INI-GetPrivateProfileString"><a href="#INI-GetPrivateProfileString" class="headerlink" title="INI : GetPrivateProfileString"></a>INI : GetPrivateProfileString</h5><h2 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h2><h4 id="字符串搜索-文本搜索和内存字符串搜索"><a href="#字符串搜索-文本搜索和内存字符串搜索" class="headerlink" title="字符串搜索(文本搜索和内存字符串搜索)"></a>字符串搜索(文本搜索和内存字符串搜索)</h4><h4 id="在一些函数下断点"><a href="#在一些函数下断点" class="headerlink" title="在一些函数下断点"></a>在一些函数下断点</h4><h6 id="如MessageBoxA"><a href="#如MessageBoxA" class="headerlink" title="如MessageBoxA"></a>如MessageBoxA</h6><h3 id="skills"><a href="#skills" class="headerlink" title="skills"></a>skills</h3><h4 id="0x00401000处代码为XOR-eax-eax的程序是由易语言编写的"><a href="#0x00401000处代码为XOR-eax-eax的程序是由易语言编写的" class="headerlink" title="0x00401000处代码为XOR eax, eax的程序是由易语言编写的"></a>0x00401000处代码为XOR eax, eax的程序是由易语言编写的</h4><h3 id="OD使用技巧"><a href="#OD使用技巧" class="headerlink" title="OD使用技巧"></a>OD使用技巧</h3><h4 id="Ctrl-F9-运行到当前函数结尾"><a href="#Ctrl-F9-运行到当前函数结尾" class="headerlink" title="Ctrl + F9 运行到当前函数结尾"></a>Ctrl + F9 运行到当前函数结尾</h4><h4 id="ALT-F9-直接从系统领空运行到程序领空"><a href="#ALT-F9-直接从系统领空运行到程序领空" class="headerlink" title="ALT + F9 直接从系统领空运行到程序领空"></a>ALT + F9 直接从系统领空运行到程序领空</h4><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p><a href="https://www.52pojie.cn/thread-1360369-1-1.html">玩玩破解，写给新人看（第八集） - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>第一步：先用PEID查壳</p><p>第二步：用DIE64查一下编程语言。</p><p>这时我们有两种选择，一种是先<a href="https://www.52pojie.cn/forum-5-1.html">脱壳</a>再用OD分析，一种是不脱壳直接用OD分析。</p><h2 id="易语言"><a href="#易语言" class="headerlink" title="易语言"></a>易语言</h2><p>通过二进制搜索“FF 25”来到这一群JMP的位置（也叫做易语言体），JMP上面的PUSH 5201***** 就是打开的第一个窗口的ID。</p><p>子窗口ID的代码上面会有一个PUSH 10001，告诉你，这个是易语言通用的，每个窗口ID语句上面都会有一个PUSH 10001。所以，我们要找其他窗口，最好的方法就是找PUSH 10001这句代码，然后往下就看到窗口ID了。</p><p>这个FF 25的地址，应该是目前版本的易语言弹出第一个窗口的目标地址，这是语言框架决定的了，所以记住这个位置就行了，下次遇到易语言编写的程序就可以直接定位这个地址。</p><p>假定你现在破解一个外挂，通过这个方法找到三个不同的窗口ID，你也不知道哪个是功能窗口ID，那你就在我们通过“FF 25”找到的第一个窗口ID那里逐个进行替换尝试。</p><h2 id="灰色按钮"><a href="#灰色按钮" class="headerlink" title="灰色按钮"></a>灰色按钮</h2><p>操作系统为按钮的状态显示有一个专门的函数可以调用，函数名字叫做EnableWindow，中文意思就是窗口或者里面的控件（按钮、菜单、输入框等）能否被允许响应鼠标和键盘的输入。</p><p>这个函数有两个参数，上面一个数值就是按钮的状态，如果是1表示按钮可以被点击，如果是0表示按钮不可以被点击。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;逆向基础&quot;&gt;&lt;a href=&quot;#逆向基础&quot; class=&quot;headerlink&quot; title=&quot;逆向基础&quot;&gt;&lt;/a&gt;逆向基础&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;参考文章&lt;/strong&gt;（系列）–&amp;gt; &lt;strong&gt;强推&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a h</summary>
      
    
    
    
    <category term="逆向" scheme="https://1xueyu1.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://1xueyu1.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>二分法</title>
    <link href="https://1xueyu1.github.io/2023/11/23/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <id>https://1xueyu1.github.io/2023/11/23/%E4%BA%8C%E5%88%86%E6%B3%95/</id>
    <published>2023-11-23T13:04:24.000Z</published>
    <updated>2023-11-23T14:44:59.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.cn/problems/successful-pairs-of-spells-and-potions/description/?envType=daily-question&envId=2023-11-10">2300. 咒语和药水的成功对数 - 力扣（LeetCode）</a></p><h3 id="闭区间写法"><a href="#闭区间写法" class="headerlink" title="闭区间写法[]"></a>闭区间写法[]</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lower_bount1</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// [left, right]</span></span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;  <span class="comment">// [mid + 1, right]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;  <span class="comment">// [left, mid - 1]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后left = right + 1, 并且left左侧均为红色，right右侧均为蓝色</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="左闭右开"><a href="#左闭右开" class="headerlink" title="左闭右开[)"></a>左闭右开[)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lower_bount2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = nums.<span class="built_in">size</span>();  <span class="comment">//区间[left, right)</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) <span class="comment">//相等时区间为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;  <span class="comment">// [mid + 1, right)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            right = mid;  <span class="comment">// [left, mid)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最终left == right</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开区间"><a href="#开区间" class="headerlink" title="开区间()"></a>开区间()</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lower_bount3</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = nums.<span class="built_in">size</span>();  <span class="comment">//区间(left, right)</span></span><br><span class="line">    <span class="keyword">while</span>(left + <span class="number">1</span> &lt; right)  <span class="comment">//区间里有数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            left = mid;  <span class="comment">// (mid, right)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            right = mid;  <span class="comment">// (left, mid)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// left + 1 == right</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lower_bound</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; potions, <span class="type">double</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = potions.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> m = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(potions[m] &gt;= t)</span><br><span class="line">            &#123;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> l = m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 第l个刚好大于t， [0, l - 1]一共l个， 所以大于的数目为这个</span></span><br><span class="line">        <span class="keyword">return</span> potions.<span class="built_in">size</span>() - l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">successfulPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; spells, vector&lt;<span class="type">int</span>&gt;&amp; potions, <span class="type">long</span> <span class="type">long</span> success)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(potions.<span class="built_in">begin</span>(), potions.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> spellsSize = spells.<span class="built_in">size</span>(), potionsSize = potions.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(spellsSize, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; spellsSize; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> t = (<span class="type">double</span>)success / spells[i];</span><br><span class="line">            <span class="comment">// 查找比t大的数有多少</span></span><br><span class="line">            ans[i] = <span class="built_in">lower_bound</span>(potions, t);</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二分法&quot;&gt;&lt;a href=&quot;#二分法&quot; class=&quot;headerlink&quot; title=&quot;二分法&quot;&gt;&lt;/a&gt;二分法&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="skills" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/skills/"/>
    
    
    <category term="二分法" scheme="https://1xueyu1.github.io/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="https://1xueyu1.github.io/2023/11/21/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>https://1xueyu1.github.io/2023/11/21/%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2023-11-21T15:04:53.000Z</published>
    <updated>2023-11-26T02:15:41.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p><a href="https://leetcode.cn/problems/number-of-provinces/">547. 省份数量 - 力扣（LeetCode）</a></p><h3 id="并查集模板"><a href="#并查集模板" class="headerlink" title="并查集模板"></a>并查集模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">father</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先将每个人的father初始化为自己</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找算法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//查找X的father</span></span><br><span class="line"><span class="keyword">if</span>(father[x] != x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//路径压缩</span></span><br><span class="line">        father[x] = <span class="built_in">find</span>(father[x]);</span><br><span class="line">        <span class="keyword">return</span> father[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="type">int</span> fy = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(fx != fy)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// y的father 变成x</span></span><br><span class="line">        fx = father[y];</span><br><span class="line">    <span class="comment">//如果有要求谁是谁的father，我们可以利用size数组来记录双方的影响力谁大决定谁做father</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parents;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(parents[x] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            parents[x] = <span class="built_in">find</span>(parents[x]);</span><br><span class="line">            <span class="keyword">return</span> parents[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line">        <span class="type">int</span> fy = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span>(fx != fy)</span><br><span class="line">        &#123;</span><br><span class="line">            parents[fx] = fy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findCircleNum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; isConnected)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = isConnected.<span class="built_in">size</span>();</span><br><span class="line">        parents.<span class="built_in">resize</span>(n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            parents[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(isConnected[i][j] == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">Union</span>(i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(parents[i] == i)</span><br><span class="line">            &#123;</span><br><span class="line">                ans ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><p><a href="https://leetcode.cn/problems/couples-holding-hands/description/?envType=daily-question&envId=2023-11-11">765. 情侣牵手 - 力扣（LeetCode）</a></p><h3 id="并查集解法"><a href="#并查集解法" class="headerlink" title="并查集解法"></a>并查集解法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent;</span><br><span class="line">    <span class="type">int</span> counts;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UnionFind</span>(<span class="type">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            parent.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        counts = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(parent[x] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            parent[x] = <span class="built_in">find</span>(parent[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> fp = <span class="built_in">find</span>(p), fq = <span class="built_in">find</span>(q);</span><br><span class="line">        <span class="keyword">if</span>(fp == fq)<span class="keyword">return</span>;</span><br><span class="line">        parent[fp] = fq;</span><br><span class="line">        counts--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getCounts</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> counts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSwapsCouples</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; row)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = row.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">UnionFind <span class="title">uf</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// merge操作是将两个座位上的人合并，如果是情侣，他们下标除以二相等，所以本来就在一个联通集中，不需要合并，如果不是情侣，连通集中每增加一对，counts--</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 因为情侣下标除以2是相等的</span></span><br><span class="line">            uf.<span class="built_in">merge</span>(row[i] / <span class="number">2</span>, row[i + <span class="number">1</span>] / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n - uf.<span class="built_in">getCounts</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="位运算解法-（贪心）"><a href="#位运算解法-（贪心）" class="headerlink" title="位运算解法+（贪心）"></a>位运算解法+（贪心）</h3><p>因为情侣的编号相差1，所以通过与1进行异或运算就能找到他们对应的人</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSwapsCouples</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; row)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = row.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果当前这对是情侣</span></span><br><span class="line">            <span class="keyword">if</span>((row[i] ^ <span class="number">1</span>) == row[i + <span class="number">1</span>])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 否则向后遍历</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">2</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 找到了对应的情侣就交换</span></span><br><span class="line">                <span class="keyword">if</span>((row[i] ^ <span class="number">1</span>) == row[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(row[i + <span class="number">1</span>], row[j]);</span><br><span class="line">                    ans ++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/number-of-provinces/&quot;&gt;547. 省</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="图" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
    <category term="并查集" scheme="https://1xueyu1.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>拓扑排序</title>
    <link href="https://1xueyu1.github.io/2023/11/21/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <id>https://1xueyu1.github.io/2023/11/21/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</id>
    <published>2023-11-20T16:11:36.000Z</published>
    <updated>2023-11-20T17:24:55.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拓扑排序-理论"><a href="#拓扑排序-理论" class="headerlink" title="拓扑排序(理论)"></a>拓扑排序(理论)</h2><p>参考<a href="https://www.jianshu.com/p/3347f54a3187">深入理解拓扑排序（Topological sort) - 简书 (jianshu.com)</a></p><h3 id="拓扑排序存在前提"><a href="#拓扑排序存在前提" class="headerlink" title="拓扑排序存在前提"></a>拓扑排序存在前提</h3><p>当且仅当一个有向图为有向无环图（directed acyclic graph，或称DAG）时，才能得到对应于该图的拓扑排序。每一个有向无环图都至少存在一种拓扑排序。</p><pre class="mermaid">graph LR;    A-->B-->C-->D    A-->E-->F-->D    B-->F</pre><p>其拓扑排序为[A, B, E, C, F, D]</p><p><strong>要点</strong></p><p><strong>每次删除一个入度边个数为 0 的点，并刷新其他点的出度边个数。</strong></p><p>如果图中有环，经过拓扑排序后入度不为0的节点构成一个环</p><hr><hr><hr><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.cn/problems/maximum-employees-to-be-invited-to-a-meeting/?envType=daily-question&envId=2023-11-01">2127. 参加会议的最多员工数 - 力扣（LeetCode）</a></p><p>一个公司准备组织一场会议，邀请名单上有 <code>n</code> 位员工。公司准备了一张 <strong>圆形</strong> 的桌子，可以坐下 <strong>任意数目</strong> 的员工。</p><p>员工编号为 <code>0</code> 到 <code>n - 1</code> 。每位员工都有一位 <strong>喜欢</strong> 的员工，每位员工 <strong>当且仅当</strong> 他被安排在喜欢员工的旁边，他才会参加会议。每位员工喜欢的员工 <strong>不会</strong> 是他自己。</p><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>favorite</code> ，其中 <code>favorite[i]</code> 表示第 <code>i</code> 位员工喜欢的员工。请你返回参加会议的 <strong>最多员工数目</strong> 。</p><p><strong>提示：</strong></p><ul><li><code>n == favorite.length</code></li><li><code>2 &lt;= n &lt;= 105</code></li><li><code>0 &lt;= favorite[i] &lt;= n - 1</code></li><li><code>favorite[i] != i</code></li></ul><hr><hr><hr><h2 id="思路参考"><a href="#思路参考" class="headerlink" title="思路参考"></a>思路参考</h2><p><a href="https://leetcode.cn/problems/maximum-employees-to-be-invited-to-a-meeting/solutions/1187830/nei-xiang-ji-huan-shu-tuo-bu-pai-xu-fen-c1i1b/?envType=daily-question&envId=2023-11-01">2127. 参加会议的最多员工数 - 力扣（LeetCode）</a></p><p><a href="https://leetcode.cn/u/endlesscheng/">@灵茶山艾府</a></p><p>下面是我的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumInvitations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; favorite)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = favorite.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 记录节点入度</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">degree</span><span class="params">(n)</span></span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">rg</span>(n);<span class="comment">// 反图</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x : favorite)</span><br><span class="line">        &#123;</span><br><span class="line">            degree[x]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(degree[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拓扑排序</span></span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> y = favorite[x];</span><br><span class="line">            <span class="comment">//不会把环中的关系加进来，防止计算深度时循环？</span></span><br><span class="line">            rg[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">            degree[y]--;</span><br><span class="line">            <span class="keyword">if</span>(degree[y] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; rdfs =  [&amp;](<span class="type">int</span> x) -&gt; <span class="type">int</span>&#123;</span><br><span class="line">            <span class="type">int</span> maxDepth = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 选择当前节点的所有儿子选择最长的</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> son : rg[x])</span><br><span class="line">            &#123;</span><br><span class="line">                maxDepth = <span class="built_in">max</span>(maxDepth, <span class="built_in">rdfs</span>(son) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> maxDepth;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> maxRingSize = <span class="number">0</span>, sumChainSize = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遍历所有节点找到基环树中有几个节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(degree[i] == <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            degree[i] = <span class="number">0</span>;<span class="comment">//防止重复遍历</span></span><br><span class="line">            <span class="type">int</span> ringSize = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> x = favorite[i]; x != i; x = favorite[x])</span><br><span class="line">            &#123;</span><br><span class="line">                degree[x] = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 记录环中的节点个数</span></span><br><span class="line">                ringSize++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(ringSize == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 因为这个环总共就两个节点</span></span><br><span class="line">                <span class="comment">// 可以将所有的基环长度为2的链放一起</span></span><br><span class="line">                sumChainSize += <span class="built_in">rdfs</span>(i) + <span class="built_in">rdfs</span>(favorite[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                maxRingSize = <span class="built_in">max</span>(maxRingSize, ringSize);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(sumChainSize, maxRingSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><p><a href="https://leetcode.cn/problems/course-schedule-ii/description/?utm_source=LCUS&utm_medium=ip_redirect&utm_campaign=transfer2china">210. 课程表 II - 力扣（LeetCode）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;拓扑排序-理论&quot;&gt;&lt;a href=&quot;#拓扑排序-理论&quot; class=&quot;headerlink&quot; title=&quot;拓扑排序(理论)&quot;&gt;&lt;/a&gt;拓扑排序(理论)&lt;/h2&gt;&lt;p&gt;参考&lt;a href=&quot;https://www.jianshu.com/p/3347f54a318</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="图" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    
    
    <category term="图" scheme="https://1xueyu1.github.io/tags/%E5%9B%BE/"/>
    
    <category term="拓扑排序" scheme="https://1xueyu1.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的遍历</title>
    <link href="https://1xueyu1.github.io/2023/11/20/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://1xueyu1.github.io/2023/11/20/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</id>
    <published>2023-11-20T09:09:30.000Z</published>
    <updated>2023-11-22T03:21:46.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><h3 id="定义二叉树"><a href="#定义二叉树" class="headerlink" title="定义二叉树"></a>定义二叉树</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义二叉树节点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">right</span>;</span></span><br><span class="line">&#125;TreeNode;</span><br></pre></td></tr></table></figure><h3 id="二叉树的创建（前序遍历的方式）"><a href="#二叉树的创建（前序遍历的方式）" class="headerlink" title="二叉树的创建（前序遍历的方式）"></a>二叉树的创建（前序遍历的方式）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二叉树的创建</span></span><br><span class="line">TreeNode* <span class="title function_">creatBinaryTree</span><span class="params">(<span class="type">int</span> num[], <span class="type">int</span> numSize, <span class="type">int</span>* index)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果数组当前值为-1，空节点</span></span><br><span class="line"><span class="keyword">if</span> (num[(*index)] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">(*index)++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">TreeNode* root = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> ((*index) &lt; numSize)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//否则新建节点</span></span><br><span class="line">root = (TreeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;内存分配失败!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">root-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;val = num[(*index)++];</span><br><span class="line"></span><br><span class="line">root-&gt;left = creatBinaryTree(num, numSize, index);</span><br><span class="line">root-&gt;right = creatBinaryTree(num, numSize, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="前序遍历（中左右）"><a href="#前序遍历（中左右）" class="headerlink" title="前序遍历（中左右）"></a>前序遍历（中左右）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前序遍历(递归)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line">preOrderTraversal(root-&gt;left);</span><br><span class="line"><span class="comment">//右</span></span><br><span class="line">preOrderTraversal(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历(非递归)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrderTraversalNo</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用栈模拟</span></span><br><span class="line">TreeNode* <span class="built_in">stack</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> stackTop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是前序遍历（非递归）:\n&quot;</span>);</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root;</span><br><span class="line"><span class="keyword">while</span> (stackTop)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line">TreeNode* node = <span class="built_in">stack</span>[--stackTop];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, node-&gt;val);</span><br><span class="line"><span class="comment">//因为用栈模拟，所以入栈使左右的顺序反过来，出栈使顺序就是对的</span></span><br><span class="line"><span class="comment">//右</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = node-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = node-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序遍历（递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line">inOrderTraversal(root-&gt;left);</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line"><span class="comment">//右</span></span><br><span class="line">inOrderTraversal(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//中序遍历（非递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrderTraversalNo</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用栈模拟</span></span><br><span class="line">TreeNode* <span class="built_in">stack</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> stackTop = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是中序遍历（非递归）:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (stackTop || root)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//先把节点入栈，出栈的时候就是从下往上，即左-&gt;中</span></span><br><span class="line"><span class="keyword">while</span> (root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root;</span><br><span class="line">root = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">root = <span class="built_in">stack</span>[--stackTop];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line">        <span class="comment">//右</span></span><br><span class="line">root = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序遍历（递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">postOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">postOrderTraversal(root-&gt;left);</span><br><span class="line">postOrderTraversal(root-&gt;right);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历（非递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">postOrderTraversalNo</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//后序遍历是左右中，前序遍历是中左右</span></span><br><span class="line"><span class="comment">//所以在前序遍历中修改代码变成中右左，再reverse数组就得到后序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将遍历的节点暂时存储在这里</span></span><br><span class="line"><span class="type">int</span> ans[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> ansSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用栈模拟</span></span><br><span class="line">TreeNode* <span class="built_in">stack</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> stackTop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root;</span><br><span class="line"><span class="keyword">while</span> (stackTop)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line">root = <span class="built_in">stack</span>[--stackTop];</span><br><span class="line">ans[ansSize++] = root-&gt;val;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line"><span class="keyword">if</span> (root-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是后序遍历（非递归）:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = ansSize - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">levelOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//层序遍历用队列模拟</span></span><br><span class="line">TreeNode* <span class="built_in">queue</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> queueFront = <span class="number">0</span>, queueRear = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是层序遍历：\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>[queueFront++] = root;</span><br><span class="line"><span class="keyword">while</span> (queueFront != queueRear)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="built_in">queue</span>[queueRear++];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line"><span class="keyword">if</span> (root-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>[queueFront++] = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>[queueFront++] = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二叉树的节点和深度"><a href="#二叉树的节点和深度" class="headerlink" title="二叉树的节点和深度"></a>二叉树的节点和深度</h2><h3 id="求二叉树节点个数"><a href="#求二叉树节点个数" class="headerlink" title="求二叉树节点个数"></a>求二叉树节点个数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树节点个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nodeCount</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//递归返回左右子树的节点个数加上当前节点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + nodeCount(root-&gt;left) + nodeCount(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求二叉树的深度"><a href="#求二叉树的深度" class="headerlink" title="求二叉树的深度"></a>求二叉树的深度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树深度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">BinaryTreeDepth</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> leftDepth = BinaryTreeDepth(root-&gt;left);</span><br><span class="line"><span class="type">int</span> rightDepth = BinaryTreeDepth(root-&gt;right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> max(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><strong>二叉树例子</strong></p><p><img src="/2023/11/20/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/%E4%BA%8C%E5%8F%89%E6%A0%91.jpg" alt="二叉树举例"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义二叉树节点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>* <span class="title">right</span>;</span></span><br><span class="line">&#125;TreeNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树的创建</span></span><br><span class="line">TreeNode* <span class="title function_">creatBinaryTree</span><span class="params">(<span class="type">int</span> num[], <span class="type">int</span> numSize, <span class="type">int</span>* index)</span>;</span><br><span class="line"><span class="comment">//前序遍历(递归)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrderTraversal</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//前序遍历(非递归)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrderTraversalNo</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//中序遍历（递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrderTraversal</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//中序遍历（非递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrderTraversalNo</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//后序遍历（递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">postOrderTraversal</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//后序遍历（非递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">postOrderTraversalNo</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">levelOrderTraversal</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//二叉树节点个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nodeCount</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"><span class="comment">//二叉树深度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">BinaryTreeDepth</span><span class="params">(TreeNode* root)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//前序遍历和此顺序一样，-1代表节点为空</span></span><br><span class="line"><span class="type">int</span> num[] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">8</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">15</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">42</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">33</span>, <span class="number">21</span>, <span class="number">54</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">31</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> numSize = <span class="keyword">sizeof</span>(num) / <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">TreeNode* root = creatBinaryTree(num, numSize, &amp;index);</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历（递归）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是前序遍历（递归法）:\n&quot;</span>);</span><br><span class="line">preOrderTraversal(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//前序遍历（非递归）</span></span><br><span class="line">preOrderTraversalNo(root);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历（递归）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是中序遍历（递归法）:\n&quot;</span>);</span><br><span class="line">inOrderTraversal(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//中序遍历（非递归）</span></span><br><span class="line">inOrderTraversalNo(root);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历（递归）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是后序遍历（递归法）:\n&quot;</span>);</span><br><span class="line">postOrderTraversal(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//后序遍历（非递归）</span></span><br><span class="line">postOrderTraversalNo(root);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line">levelOrderTraversal(root);</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树节点个数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;二叉树节点个数：%d\n&quot;</span>, nodeCount(root));</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树深度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;二叉树的深度：%d\n&quot;</span>, BinaryTreeDepth(root));</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树的创建 前序遍历</span></span><br><span class="line">TreeNode* <span class="title function_">creatBinaryTree</span><span class="params">(<span class="type">int</span> num[], <span class="type">int</span> numSize, <span class="type">int</span>* index)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果数组当前值为-1，空节点</span></span><br><span class="line"><span class="keyword">if</span> (num[(*index)] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">(*index)++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">TreeNode* root = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> ((*index) &lt; numSize)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//否则新建节点</span></span><br><span class="line">root = (TreeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;内存分配失败!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">root-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;val = num[(*index)++];</span><br><span class="line"></span><br><span class="line">root-&gt;left = creatBinaryTree(num, numSize, index);</span><br><span class="line">root-&gt;right = creatBinaryTree(num, numSize, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line">preOrderTraversal(root-&gt;left);</span><br><span class="line"><span class="comment">//右</span></span><br><span class="line">preOrderTraversal(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历(非递归)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preOrderTraversalNo</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用栈模拟</span></span><br><span class="line">TreeNode* <span class="built_in">stack</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> stackTop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是前序遍历（非递归）:\n&quot;</span>);</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root;</span><br><span class="line"><span class="keyword">while</span> (stackTop)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line">TreeNode* node = <span class="built_in">stack</span>[--stackTop];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, node-&gt;val);</span><br><span class="line"><span class="comment">//因为用栈模拟，所以入栈使左右的顺序反过来，出栈使顺序就是对的</span></span><br><span class="line"><span class="comment">//右</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = node-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = node-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历（递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line">inOrderTraversal(root-&gt;left);</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line"><span class="comment">//右</span></span><br><span class="line">inOrderTraversal(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//中序遍历（非递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrderTraversalNo</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用栈模拟</span></span><br><span class="line">TreeNode* <span class="built_in">stack</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> stackTop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是中序遍历（非递归）:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (stackTop || root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root;</span><br><span class="line">root = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">root = <span class="built_in">stack</span>[--stackTop];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line">root = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历（递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">postOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">postOrderTraversal(root-&gt;left);</span><br><span class="line">postOrderTraversal(root-&gt;right);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">postOrderTraversalNo</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//后序遍历是左右中，前序遍历是中左右</span></span><br><span class="line"><span class="comment">//所以在前序遍历中修改代码变成中右左，再reverse数组就得到后序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将遍历的节点暂时存储在这里</span></span><br><span class="line"><span class="type">int</span> ans[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> ansSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用栈模拟</span></span><br><span class="line">TreeNode* <span class="built_in">stack</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> stackTop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root;</span><br><span class="line"><span class="keyword">while</span> (stackTop)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//中</span></span><br><span class="line">root = <span class="built_in">stack</span>[--stackTop];</span><br><span class="line">ans[ansSize++] = root-&gt;val;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line"><span class="keyword">if</span> (root-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>[stackTop++] = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是后序遍历（非递归）:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = ansSize - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">levelOrderTraversal</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//层序遍历用队列模拟</span></span><br><span class="line">TreeNode* <span class="built_in">queue</span>[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> queueFront = <span class="number">0</span>, queueRear = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是层序遍历：\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>[queueFront++] = root;</span><br><span class="line"><span class="keyword">while</span> (queueFront != queueRear)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="built_in">queue</span>[queueRear++];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, root-&gt;val);</span><br><span class="line"><span class="keyword">if</span> (root-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>[queueFront++] = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>[queueFront++] = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树节点个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nodeCount</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//递归返回左右子树的节点个数加上当前节点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + nodeCount(root-&gt;left) + nodeCount(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树深度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">BinaryTreeDepth</span><span class="params">(TreeNode* root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> leftDepth = BinaryTreeDepth(root-&gt;left);</span><br><span class="line"><span class="type">int</span> rightDepth = BinaryTreeDepth(root-&gt;right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> max(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二叉树的遍历&quot;&gt;&lt;a href=&quot;#二叉树的遍历&quot; class=&quot;headerlink&quot; title=&quot;二叉树的遍历&quot;&gt;&lt;/a&gt;二叉树的遍历&lt;/h2&gt;&lt;h3 id=&quot;定义二叉树&quot;&gt;&lt;a href=&quot;#定义二叉树&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="数据结构" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="https://1xueyu1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
    <category term="二叉树的遍历" scheme="https://1xueyu1.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    
    <category term="C" scheme="https://1xueyu1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>markdown-tutorial</title>
    <link href="https://1xueyu1.github.io/2023/11/19/markdown-tutorial/"/>
    <id>https://1xueyu1.github.io/2023/11/19/markdown-tutorial/</id>
    <published>2023-11-18T16:51:12.000Z</published>
    <updated>2023-11-22T15:14:57.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MarkDown基础"><a href="#MarkDown基础" class="headerlink" title="MarkDown基础"></a>MarkDown基础</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#标题名字（#的个数代表标题的级数）</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题使用一个#</span></span><br><span class="line"><span class="section">## 二级标题使用两个#</span></span><br><span class="line">......</span><br><span class="line">最多支持六级标题</span><br></pre></td></tr></table></figure><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这就是 ~~删除线~~</span><br></pre></td></tr></table></figure><p>这就是 <del>删除线</del></p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="emphasis">*斜体*</span> 的文本</span><br></pre></td></tr></table></figure><p>这是用来 <em>斜体</em> 的文本</p><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="strong">**加粗**</span> 的文本</span><br></pre></td></tr></table></figure><p>这是用来 <strong>加粗</strong> 的文本</p><h3 id="斜体-加粗"><a href="#斜体-加粗" class="headerlink" title="斜体+加粗"></a>斜体+加粗</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 <span class="strong">**<span class="emphasis">*斜体+加粗*</span>**</span> 的文本</span><br></pre></td></tr></table></figure><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线是HTML语法</p><p><code>下划线</code> <u>下划线（Ctrl + u）</u></p><h3 id="高亮（需勾选扩展语法）"><a href="#高亮（需勾选扩展语法）" class="headerlink" title="高亮（需勾选扩展语法）"></a>高亮（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 ==斜体+加粗== 的文本</span><br></pre></td></tr></table></figure><p>这是用来 &#x3D;&#x3D;斜体+加粗&#x3D;&#x3D; 的文本</p><h3 id="下标（需勾选扩展语法）"><a href="#下标（需勾选扩展语法）" class="headerlink" title="下标（需勾选扩展语法）"></a>下标（需勾选扩展语法）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">H~2~O</span><br><span class="line">H~2~O~2~</span><br></pre></td></tr></table></figure><p>H<del>2</del>O</p><p>H<del>2</del>O<del>2</del></p><h3 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">面积 m^2^</span><br><span class="line">体积 m^3^</span><br></pre></td></tr></table></figure><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win下输入 win + ;即可选择想要的表情</span><br></pre></td></tr></table></figure><p>😊😂🤣(●’◡’●)</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><blockquote><p>直接使用Ctrl+t生成表格，然后再在源码出修改对齐方式</p></blockquote><table><thead><tr><th align="left">name</th><th>price</th></tr></thead><tbody><tr><td align="left">fried chicken</td><td>19</td></tr><tr><td align="left">cola</td><td>32</td></tr></tbody></table><table><thead><tr><th align="left">name</th><th align="center">price</th></tr></thead><tbody><tr><td align="left">fried chicken</td><td align="center">19</td></tr><tr><td align="left">cola</td><td align="center">32</td></tr></tbody></table><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&quot;后悔创业&quot;</span><br></pre></td></tr></table></figure><blockquote><p>“后悔创业”</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;可以嵌套使用</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>1</p></blockquote></blockquote><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表-–-符号-空格"><a href="#无序列表-–-符号-空格" class="headerlink" title="无序列表 – 符号 空格"></a>无序列表 – 符号 空格</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 可以使用 <span class="code">`*`</span> 作为标记</span><br><span class="line"><span class="bullet">+</span> 也可以使用 <span class="code">`+`</span></span><br><span class="line"><span class="bullet">-</span> 或者 <span class="code">`-`</span></span><br></pre></td></tr></table></figure><ul><li>可以使用<code>*</code>作为标记</li></ul><ul><li>也可以使用<code>+</code>作为标记</li></ul><ul><li>或者<code>-</code></li></ul><h4 id="有序列表-–-数字-空格"><a href="#有序列表-–-数字-空格" class="headerlink" title="有序列表 – 数字.空格"></a>有序列表 – 数字<code>.</code>空格</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有序列表以数字和 <span class="code">`.`</span> 开始</span><br><span class="line">数字的序列不会影响生成的列表序列</span><br></pre></td></tr></table></figure><ol><li>有序列表以数字和 <code>.</code> 开始</li><li>数字的序列不会影响生成的列表序列</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以使用：数字\. 来取消显示为列表</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​<span class="code">```语言名称</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(string[] args)</span></span></span><br></pre></td></tr></table></figure><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以通过``，插入行内代码</span><br><span class="line">例如 <span class="code">`Markdown`</span></span><br></pre></td></tr></table></figure><p><code>Markdown</code></p><h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p>代码块中的文本都会显示为原始内容</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>可以在一行中使用三个或更多的<code>*</code>、<code>-</code>、或<code>_</code>来添加分割线：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"><span class="strong">***</span></span></span><br><span class="line"><span class="strong"><span class="section">------</span></span></span><br><span class="line"><span class="strong"><span class="section">__<span class="emphasis">_</span></span></span></span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><h3 id="外部跳转–超链接"><a href="#外部跳转–超链接" class="headerlink" title="外部跳转–超链接"></a>外部跳转–超链接</h3><p>格式为<code>[link text](link)</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">提示文字</span>](<span class="link">https://1xueyu1.github.io/</span>)</span><br></pre></td></tr></table></figure><p><a href="https://1xueyu1.github.io/">Rayii’s blog</a></p><h3 id="内部跳转–本文件内跳（Typora支持）"><a href="#内部跳转–本文件内跳（Typora支持）" class="headerlink" title="内部跳转–本文件内跳（Typora支持）"></a>内部跳转–本文件内跳（Typora支持）</h3><p>格式为：<code>[link text](#destination)</code></p><blockquote><p>Windows用户使用<code>Ctrl+click</code></p></blockquote><p>跳转至-&gt;<a href="#%E8%B7%B3%E8%BD%AC">跳转</a></p><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>使用<code>&lt;&gt;</code>包括的URL或邮箱地址会被自动转换为超链接:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://www.baidu.com&gt;</span></span><br><span class="line">&lt;123@email.com&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">https://www.baidu.com</a><br><a href="mailto:&#x31;&#50;&#51;&#x40;&#x65;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;">&#x31;&#50;&#51;&#x40;&#x65;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片名称</span>](<span class="link">图片地址或图片本地存储的路径</span>)</span><br></pre></td></tr></table></figure><h4 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h4><img src="/2023/11/19/markdown-tutorial/微信图片_20231118193203.jpg" alt="她真好看的吧"><p><img src="/2023/11/19/markdown-tutorial/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231019131935.png" alt="还是她"></p><h2 id="流程图（graph）"><a href="#流程图（graph）" class="headerlink" title="流程图（graph）"></a>流程图（graph）</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph 方向描述</span><br><span class="line"><span class="code">图表中的其他语句</span></span><br></pre></td></tr></table></figure><p>关键字graph表示一个流程图的开始，同时需要指定改图的方向。</p><p>其中“方向描述”为:</p><table><thead><tr><th>用词</th><th>含义</th></tr></thead><tbody><tr><td>TB</td><td>从上到下</td></tr><tr><td>BT</td><td>从下到上</td></tr><tr><td>RL</td><td>从右到左</td></tr><tr><td>LR</td><td>从左到右</td></tr></tbody></table><blockquote><p>T &#x3D; TOP, B &#x3D; BOTTOM, L &#x3D; LEFT, R &#x3D; RIGHT, D &#x3D; DOWN</p></blockquote><p>最常用的是TB、LR</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line"><span class="code">A--&gt;B</span></span><br><span class="line"><span class="code">B--&gt;C</span></span><br><span class="line"><span class="code">C--&gt;A</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB;    A-->B    B-->C    C-->A</pre><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line"><span class="code">A--&gt;B</span></span><br><span class="line"><span class="code">B--&gt;C</span></span><br><span class="line"><span class="code">C--&gt;A</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;    A-->B    B-->C    C-->A</pre><h3 id="流程图常用符号及含义"><a href="#流程图常用符号及含义" class="headerlink" title="流程图常用符号及含义"></a>流程图常用符号及含义</h3><table><thead><tr><th>表述</th><th>说明</th><th>含义</th></tr></thead><tbody><tr><td>id[text]</td><td>矩形节点</td><td>表示过程</td></tr><tr><td>id(text)</td><td>圆角矩形节点</td><td>表示开始和结束</td></tr><tr><td>id((text))</td><td>圆形节点</td><td>表示连接</td></tr><tr><td>id{文字}</td><td>菱形节点</td><td>表示判断、决策</td></tr><tr><td>id&gt;text]</td><td>右向旗状节点</td><td></td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line"><span class="code">A</span></span><br><span class="line"><span class="code">B(圆角矩形节点)</span></span><br><span class="line"><span class="code">C[矩形节点]</span></span><br><span class="line"><span class="code">D((圆形节点))</span></span><br><span class="line"><span class="code">E&#123;菱形节点&#125;</span></span><br><span class="line"><span class="code">F&gt;右向旗帜状节点]</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB;    A    B(圆角矩形节点)    C[矩形节点]    D((圆形节点))    E{菱形节点}    F>右向旗帜状节点]</pre><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line"><span class="code">begin(出门)--&gt; buy[买炸鸡]</span></span><br><span class="line"><span class="code">buy --&gt; IsRemaining&#123;&quot;还有没有炸鸡？&quot;&#125;</span></span><br><span class="line"><span class="code">IsRemaining --有--&gt; happy[买到炸鸡开心] --&gt; goBack(回家)</span></span><br><span class="line"><span class="code">IsRemaining --没有--&gt; sad[&quot;伤心&quot;] --&gt; goBack</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB;    begin(出门)--> buy[买炸鸡]    buy --> IsRemaining{"还有没有炸鸡？"}    IsRemaining --有--> happy[买到炸鸡开心] --> goBack(回家)    IsRemaining --没有--> sad["伤心"] --> goBack</pre><h3 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line"><span class="code">A1--&gt;B1</span></span><br><span class="line"><span class="code">A2---B2</span></span><br><span class="line"><span class="code">A3--text---B3</span></span><br><span class="line"><span class="code">A4--text--&gt;B4</span></span><br><span class="line"><span class="code">A5-.-B5</span></span><br><span class="line"><span class="code">A6-.-&gt;B6</span></span><br><span class="line"><span class="code">A7-.text.-B7</span></span><br><span class="line"><span class="code">A8-.text.-&gt;B8</span></span><br><span class="line"><span class="code">A9===B9</span></span><br><span class="line"><span class="code">A10==&gt;B10</span></span><br><span class="line"><span class="code">A11==text===B11</span></span><br><span class="line"><span class="code">A12==text==&gt;B12</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB;    A1-->B1    A2---B2    A3--text---B3    A4--text-->B4    A5-.-B5    A6-.->B6    A7-.text.-B7    A8-.text.->B8    A9===B9    A10==>B10    A11==text===B11    A12==text==>B12</pre><h3 id="子表图"><a href="#子表图" class="headerlink" title="子表图"></a>子表图</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subgraph 子图表名称</span><br><span class="line"><span class="code">语句</span></span><br><span class="line"><span class="code">end</span></span><br></pre></td></tr></table></figure><pre class="mermaid">graph TB;    subgraph 买炸鸡前        begin(出门)--> buy[买炸鸡]    end    buy --> IsRemaining{"还有没有炸鸡？"}    IsRemaining --有--> happy[买到炸鸡开心] --> goBack(回家)    IsRemaining --没有--> sad["伤心"] --> goBack</pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MarkDown基础&quot;&gt;&lt;a href=&quot;#MarkDown基础&quot; class=&quot;headerlink&quot; title=&quot;MarkDown基础&quot;&gt;&lt;/a&gt;MarkDown基础&lt;/h1&gt;&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="工具" scheme="https://1xueyu1.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Markdown" scheme="https://1xueyu1.github.io/categories/%E5%B7%A5%E5%85%B7/Markdown/"/>
    
    
    <category term="Markdown" scheme="https://1xueyu1.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
